{"transpiled":true,"noir_version":"0.34.0+02fea6abe8637b9fb8f9535d1709b367d5e1da5c","name":"ZImburse","functions":[{"name":"redeem_linode_entitlement","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"1756802668388977958":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"body","type":{"kind":"array","length":768,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"body_hash_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"body_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"header","type":{"kind":"array","length":1024,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"header_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"pubkey","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"pubkey_redc","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"from_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"subject_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"amount_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"amount_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"receipt_id_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"claim_secret_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"","brillig_names":["get_notes_internal","get_collapse_hints","decompose_hint","get_key_validation_request","notify_nullified_note","split_60_bits","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","__mul_impl","__compute_quadratic_expression_with_borrow_flags","build_msg_block_iter","get_public_data_witness","lt_32_hint","lte_16_hint","pack_arguments","enqueue_public_function_call_internal","directive_invert","directive_integer_quotient"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"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","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"usdc_token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"title","type":{"kind":"string","length":60},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"],"assert_messages":{"835":"attempt to add with overflow","759":"Array index out of bounds","564":"Array index out of bounds","692":"Array index out of bounds","942":"Array index out of bounds","683":"attempt to subtract with overflow","747":"attempt to add with overflow","229":"attempt to add with overflow","741":"attempt to add with overflow","930":"attempt to add with overflow","1009":"attempt to add with overflow","665":"Array index out of bounds","211":"Array index out of bounds","1104":"attempt to add with overflow","909":"Array index out of bounds","775":"Array index out of bounds","708":"attempt to add with overflow","958":"Array index out of bounds","1083":"Array index out of bounds","821":"Array index out of bounds","687":"attempt to subtract with overflow","617":"attempt to add with overflow","803":"Array index out of bounds","995":"Array index out of bounds","218":"Array index out of bounds","596":"attempt to add with overflow","721":"Array index out of bounds","462":"Initializer address is not the contract deployer","526":"SharedImmutable already initialized","456":"Initialization hash does not match","788":"attempt to add with overflow","901":"Array index out of bounds","767":"Array index out of bounds","572":"attempt to add with overflow","889":"attempt to add with overflow","950":"Array index out of bounds","971":"attempt to add with overflow","977":"Array index out of bounds","173":"attempt to add with overflow","1075":"Array index out of bounds","1063":"attempt to add with overflow","676":"attempt to add with overflow","606":"Array index out of bounds","728":"Array index out of bounds","917":"Array index out of bounds","207":"attempt to add with overflow","588":"Array index out of bounds","1091":"Array index out of bounds"}},{"name":"get_title","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"array","length":60,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIfwAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAA4AAAQDAgQlAAQIQwAFJAAEPAYrAAAECAMrAAAFCAQrAAAGCAUiAAAAzToAAAAIQwAAADweAAAABB4AAAAFMQAAAAAEAAAABQAAAAYkAAIBBQoAAgYFBCEAABUABDsBAAAeAAsABiQABwEFCgAHBgUEIQAAGgAEOwEAACoAAAYkAAQFBAAABAAEACQBBAEGAAAEBgIEKgAEByQABwAIKgIIBwAABAcCByoCCAcAAAQHAgcqAggHAAAEBwIHKgIIByoBBgQAAAQEAgQqAgQGKgAABAAABAACACoCBgQkAAQACCoACAMgADEkAAQEBwwABAMHBiQABAEHIQAAtwAGIAA2KgEEBSQABAIEAAAEBQIJAAAECQQKKgEKAyQABAMJAAAEBQILAAAECwkMKgEMCioAAAkkAAQDBQAABAAFACQBBAEJAAAECQIFKgAFCyoCAwsAAAQLAgsqAgoLKgEJBQAABAUCBSoCBQkqAQkFAAAEBQIFKgIFCSQAAgAFKgAACyQABD0MAAAEAAwAJAEEAQsAAAQLAgwkAAQ8DQAABA0MDSoADA4MAAQODQ8WAA8PIQAAXQAPKgIFDgAABA4CDiAAVyoBCwwAAAQMAgwqAgwLKgAADAAABAACACoCCwwqAAALAAAEAAIAKgIICyoACAYgAGgMAAQGBAUhAABuAAUgAGsqAQwLKgALAyMkAAQCDgwABAYODyEAAHIADzsBAAAAAAQJAg8AAAQPBg4qAQ4NJQAEAQAADyoAAA4kAAQgEAAABAAQACQBBAEOAAAEDgIQJQAEAQAAEUYCAAAADQAAABAAAAARAAAAHwAkAAQfEisAABAIAysAABIIBCIAAADYKgEODQAABA0CDSoCDQ4qAAgFIACGJAAEHw0MAAQFDQ8hAACQAA8gAIoAAAQGBwUOAAQGBQ0hAACOAA07AQAAKgAFBiAAaCoBCw0kAAQ8DwwABA0PECEAAJUAECAAsSoBDA0qAQsPJAAEHxEMAAQFERIhAACbABI7AQAAAAAEDgISAAAEEgURKgERECQABDwRDAAEDxETIQAAogATOwEAACsAAA0IAyUABAA9CAQiAAAA6ysACAUAEgAABBICEwAABBMPESoCEBEqAhIMKgELEgAABBIHDw4ABBIPDSEAAK8ADTsBAAAqAg8LIACxAAAEBQcNDgAEBQ0PIQAAtQAPOwEAACoADQUgAIYqAQQGHAAHAwkAAAcFCQotAAAAAAoAAAAJJAAEBAsMAAQDCwwhAAC/AAw7AQAAKwAABggDJQAEAAUIBCIAAADrKwAIBQAKAAAECgIMAAAEDAMLKgIJCwAABAMHBg4ABAMGCSEAAMoACTsBAAAqAgoEKgAGAyAAMSUABAAACAcNAAQIBwgFCAgXAAgICAghAADXCAgBAAQIAwgHCAkrAQgJCAYBAAQIBAgHCAkrAggGCAkBAAQIBwACCAcgAM4jJQAEAAIIBgcABAgECAYIBSsACAQICCUABAAACAkNAAQICQgFCAoXAAgKCAohAADqCAoDAAQICAACCAgBAAQIAwgJCAsrAQgLCAYBAAQIAwgICAsrAQgLCAcBAAQIAwgJCAsrAggHCAsBAAQIAwgICAsrAggGCAsBAAQICQACCAkgANwjKwEIAwgGCwAECAYAAggHIQAA7wgHIADxKwAIAwgFIAD/KwAAAAgFAQAEAAAIBAAAJQAEAAAICQ0ABAgJCAQIChcACAoICiEAAP0ICgEABAgDCAkICysBCAsICAEABAgFCAkICysCCAgICwEABAgJAAIICSAA9CUBBAABCAUgAP8jKwAYyhjK","debug_symbols":"5d3fTttKEAbwd/E1Fzt/dmeHVzk6qkILVaQoVECPdIR49zpp7Jg6slUo7jfyDUpgYv/WseezTViemy+3N9+/ftru7+4fm+t/npvd/efN0/Z+3z57frlqbh62u93266fht5t0+EJ6rH/8ttkfnj4+bR6emmsy1qvmdv/l8FC0XcLddnfbXJu9XI2KXexU69n6UipyoVaT11OxUhpUp3ShupRUTtWlML+q/veqofxuOyXqi9OgeAl9ef+WN+m2vM9teWLtFywH76TdnPxUbV7GdvuD9nbDv8YfVlA/egX+wSvg9NEroHevIEvqirPw7D6RPXX7RCH5dZ9g/k3P4TXyhtfoG16T3/Cai8enSuGuBYjzTHcplfsVDPvF5Xej1G77Zks0825k1W7Z7cPxu2Gh9TW03iPrJYXWU2g9h9ZLaL2G1ufQ+tBZK6GzVkJnrYTOWg2dtRo6azV01mrorNXQWauhs1bRO2bxXm/pV31G75jTevT9vuZe7zTSL7/fl95jVGb0nrpFO53txkd6iUu3uPQal+7YdOrv/A9+s/CTXlJcOsWlc1y6xKVrXDp4mk7RwdN0ig6eplN08DSdosdNU4ubphY3TS1umlrcNLW4aWpx09TipqnFTVObTVOlNEcv1NHb+yzDFVwoTtzdiWkfni83RY/3VsyhODVhcQiLw1gcweIoFidjcQoWx7A4WF25YnVlx+rKjtWVHasrO1ZXdqyu7Fhd2bG6smN1Zcfqyr54V87nD+KXEae99gDzEJhn8dZTz56qY8/SRxf3v4QnHlwPdx5aev8h7otJxtuHCMzDYB4B8yiYJ4N5CpjH/qJHyyvPuFpcu48wiZfcV3O5UNyic3+rr8qw+DjSupqR+lpGymk1I6XVjJRXM1JZzUh1NSPNqxlpWc1IV3OOxKs5R2Kgc6SDR4DOZI4eoPONo2fxBLF+PgayC54M5qlY95HEsTyawDwE5gE7vnTx46ufTqm9qvSxp4B5HMuTE5hn8eMrn4+vXMceBvMImEfBPBnMU8A8BuZZ/PxH+o+KstrY41ieksA8BOZhMI+AeRTMk8E8BcxjYB6w/lzA+rOB9WcDuz41BvMImEfBPBnMA/Y5KwO7X2dg9+sq2P26ij7H1eRcPzT/dzB/l5+5W3bOwmM++CxXOdkkH31KSdczX2aqndP5LxmljAeLPgPl5LxSVNGnoJzho8+oNs139CnVZvjos1DO8NGnoZzho2f0DB88o+f46DNRzvDRM3qGHzt1PXbqeujU5RQ6dTmFTl1OgVP3pX363+Zhu7nZ3Z7+v9fd9/3nwb/7evr/28+ftMU/AA==","brillig_names":["get_title"],"assert_messages":{"141":"attempt to add with overflow","154":"Array index out of bounds","20":"Not initialized","113":"Array index out of bounds","174":"attempt to add with overflow","161":"Array index out of bounds","180":"attempt to add with overflow","190":"Array index out of bounds","25":"Function get_title can only be called statically","201":"attempt to add with overflow"}},{"name":"give_entitlement","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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ZY03+mWNN/pljTf6ZY03umU9441+WeONflnjjX5Z441+WRtZu2WNN/pljTf6ZY03+mWNN/pljTe6ZZ3xRr+s8Ua/rPFGv6zxRr+sjazdssYbm2VtQ96ego1T/vzg8W322yMuN8Agmc3AzMO6ZT2PF69uzxrJ9MsayfTLGsl0y3pBMv2yRjL9skYy/bJGMv2yNrJ2yxrJ9Msab/TLGm/0yxpv9Msab3TLuuCNflnjjX5Z441+WeONflkbWbtljTf6ZY03+mWNN/pljTf6ZY03umW94o1+WeONflnjjX5Z441+WRtZu2WNN/pljTf6ZY03+mWNN/pljTc6ZZ2HAW/0yxpv9Msab/TLGm/0y9rI2i1rvNEva7zRL2u80S9rvNEva7zRLesRb/TLGm/0yxpv9Msab/TL2sjaLWu80S9rvNEva7zRL2u80S9rvNEt6wlv9Msab/TLGm/0yxpv9MvayNota7zRL2u80S9rvNEva7zRL2u80S3rhDf6ZY03tss67R8CP6c1X2eNN/pljTf6ZW1k7ZY13uiXNd7olzXe6Jc13uiXNd7olrXhjX5Z441+WeONflnjjX5ZG1m7ZY03+mWNN/pljTf6ZY03+mWNN7plPeONflnjjX5Z441+WeONflkbWbtljTf6ZY03+mWNN/pljTf6ZY03umWd8Ua/rPFGv6zxRr+s8Ua/rI2s3bLGG/2yxhv9ssYb/bLGG/2yxhvdsl7wRr+s8Ua/rPFGv6zxRr+sjazdssYb/bLGG/2yxhv9ssYb/bLGG92yLnijX9Z4o1/WeKNf1nijX9ZG1m5Z441+WeONflnjjX5Z441+WeONblmveKNf1nijX9Z4o1/WeKNf1kbWblnjjc2yfv/k9h/Hvn9zvs4ab/TLGm/0yxpv9Msab/TKehzwRr+s8Ua/rPFGv6zxRr+sjazdssYb22WdhrxlnVK6zhpv9Msab/TLGm/0yxpvdMt6xBv9ssYb/bLGG/2yxhv9sjaydssab/TLGm/0yxpv9Msab/TLGm90y3rCG/2yxhv9ssYb/bLGG/2yNrJ2yxpv9Msab/TLGm/0yxpv9Msab3TLOuGNflnjjX5Z441+WeONflkbWbtljTf6ZY03+mWNN/pljTf6ZY03umVteKNf1nijX9Z4o1/WeKNf1kbWblnjjX5Z441+WeONflnjjX5Z441uWc94o1/W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","brillig_names":["get_public_keys_and_partial_address","unsafe_rand","decompose_hint","notify_created_note","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log","directive_invert","directive_integer_quotient"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000c0c5aaf"},{"kind":"string","value":"UintNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"entitlements","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"body","type":{"kind":"array","length":768,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"body_hash_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"body_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"header","type":{"kind":"array","length":1024,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"header_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"pubkey","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"pubkey_redc","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"signature","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"from_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"subject_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"amount_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"amount_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"receipt_id_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"claim_secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburse::redeem_linode_entitlement_parameters"}}],"kind":"struct","path":"ZImburse::redeem_linode_entitlement_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburse::get_title_parameters"}},{"name":"return_type","type":{"kind":"array","length":60,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"ZImburse::get_title_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"usdc_token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"title","type":{"kind":"string","length":60}}],"kind":"struct","path":"ZImburse::constructor_parameters"}}],"kind":"struct","path":"ZImburse::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}}],"kind":"struct","path":"ZImburse::give_entitlement_parameters"}}],"kind":"struct","path":"ZImburse::give_entitlement_abi"}]}},"file_map":{"100":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\nuse crate::hash::ArgsHasher;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"101":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"105":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/incoming_body.nr","source":"use crate::note::note_interface::NoteInterface;\nuse crate::event::event_interface::EventInterface;\nuse dep::protocol_types::{scalar::Scalar};\n\nuse std::aes128::aes128_encrypt;\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::IvpkM};\n\npub struct EncryptedLogIncomingBody<let N: u32> {\n    plaintext: [u8; N * 32 + 64]\n}\n\nimpl<let N: u32> EncryptedLogIncomingBody<N> {\n    pub fn from_note<T>(note: T, storage_slot: Field) -> Self where T: NoteInterface<N> {\n        let mut plaintext = note.to_be_bytes(storage_slot);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn from_event<T>(event: T, randomness: Field) -> Self where T: EventInterface<N> {\n        let mut plaintext = event.private_to_be_bytes(randomness);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn compute_ciphertext(self, eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n        let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(self.plaintext, iv, sym_key)\n    }\n}\n\nmod test {\n    use dep::protocol_types::{\n        address::AztecAddress, scalar::Scalar, point::Point, traits::Serialize,\n        abis::event_selector::EventSelector\n    };\n\n    use crate::{\n        note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n        encrypted_logs::incoming_body::EncryptedLogIncomingBody, event::event_interface::EventInterface,\n        context::PrivateContext, keys::public_keys::IvpkM\n    };\n\n    struct AddressNote {\n        address: AztecAddress,\n        owner: AztecAddress,\n        randomness: Field,\n        header: NoteHeader,\n    }\n\n    global ADDRESS_NOTE_LEN: u32 = 3;\n\n    impl NullifiableNote for AddressNote {\n        fn compute_nullifier(\n            _self: Self,\n            _context: &mut PrivateContext,\n            _note_hash_for_nullify: Field\n        ) -> Field {\n            1\n        }\n\n        unconstrained fn compute_nullifier_without_context(_self: Self) -> Field {\n            1\n        }\n    }\n\n    struct AddressNoteHidingPoint {\n        inner: Point\n    }\n\n    impl NoteInterface<ADDRESS_NOTE_LEN> for AddressNote {\n\n        fn get_note_type_id() -> Field {\n            1\n        }\n\n        fn get_header(self) -> NoteHeader {\n            self.header\n        }\n\n        fn set_header(&mut self, header: NoteHeader) {\n            self.header = header;\n        }\n\n        fn serialize_content(self) -> [Field; ADDRESS_NOTE_LEN] {\n            [self.address.to_field(), self.owner.to_field(), self.randomness]\n        }\n\n        fn deserialize_content(fields: [Field; ADDRESS_NOTE_LEN]) -> Self {\n            AddressNote {\n                address: AztecAddress::from_field(fields[0]),\n                owner: AztecAddress::from_field(fields[1]),\n                randomness: fields[2],\n                header: NoteHeader::empty()\n            }\n        }\n\n        fn to_be_bytes(self, storage_slot: Field) -> [u8; ADDRESS_NOTE_LEN * 32 + 64] {\n            let serialized_note = self.serialize_content();\n\n            let mut buffer: [u8; ADDRESS_NOTE_LEN * 32 + 64] = [0; ADDRESS_NOTE_LEN * 32 + 64];\n\n            let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n            let note_type_id_bytes: [u8; 32] = AddressNote::get_note_type_id().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = storage_slot_bytes[i];\n                buffer[32 + i] = note_type_id_bytes[i];\n            }\n\n            for i in 0..serialized_note.len() {\n                let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n            buffer\n        }\n\n        fn compute_note_hash(_self: Self) -> Field {\n            crate::generators::Ga1.x\n        }\n    }\n\n    impl AddressNote {\n        pub fn new(address: AztecAddress, owner: AztecAddress, randomness: Field) -> Self {\n            AddressNote { address, owner, randomness, header: NoteHeader::empty() }\n        }\n    }\n\n    #[test]\n    unconstrained fn test_encrypted_note_log_incoming_body_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let note = AddressNote::new(\n            AztecAddress::from_field(0x1),\n            AztecAddress::from_field(0x2),\n            3\n        );\n\n        let storage_slot = 2;\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        // 1. `EncryptedLogIncomingBody::from_note` calls `note.to_be_bytes(storage_slot)` function which serializes\n        // the note to bytes - note that in the case of `AddressNote` the `to_be_bytes` function was automatically\n        // implemented by Aztec macros.\n        let body = EncryptedLogIncomingBody::from_note(note, storage_slot);\n\n        // 2. `body.compute_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    struct TestEvent {\n        value0: Field,\n        value1: Field,\n        value2: Field,\n    }\n\n    impl Serialize<3> for TestEvent {\n        fn serialize(self) -> [Field; 3] {\n            [self.value0, self.value1, self.value2]\n        }\n    }\n\n    global TEST_EVENT_LEN: u32 = 3;\n\n    impl EventInterface<TEST_EVENT_LEN> for TestEvent {\n        fn get_event_type_id() -> EventSelector {\n            comptime\n            {\n                EventSelector::from_signature(\"TestEvent(Field,Field,Field)\")\n            }\n        }\n\n        fn private_to_be_bytes(self, randomness: Field) -> [u8; TEST_EVENT_LEN * 32 + 64] {\n            let mut buffer: [u8; TEST_EVENT_LEN * 32 + 64] = [0; TEST_EVENT_LEN * 32 + 64];\n\n            let randomness_bytes: [u8; 32] = randomness.to_be_bytes();\n            let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = randomness_bytes[i];\n                buffer[32 + i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn to_be_bytes(self) -> [u8; TEST_EVENT_LEN * 32 + 32] {\n            let mut buffer: [u8; TEST_EVENT_LEN * 32 + 32] = [0; TEST_EVENT_LEN * 32 + 32];\n\n            let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[32 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n            _emit(self);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_encrypted_log_event_incoming_body() {\n        let test_event = TestEvent { value0: 1, value1: 2, value2: 3 };\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        let randomness = 2;\n\n        let body = EncryptedLogIncomingBody::from_event(test_event, randomness);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_event_log_incoming_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let event_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 201, 247, 40, 80, 60, 188, 158, 251, 242, 103, 197, 79, 165, 195, 10, 160, 255, 35, 167, 152, 25, 233, 77, 145, 214, 243, 210, 119, 0, 20, 29, 95, 15, 63, 33, 190, 184, 67, 254, 96, 128, 243, 220, 228, 201, 130, 86, 163, 52, 127, 111, 10, 212, 7, 160, 16, 87, 13, 39, 11, 5, 1, 164, 65, 8, 56, 82, 245, 13, 68, 176, 90, 100, 69, 243, 78, 117, 188, 221, 34, 178, 31, 155, 89, 143, 176, 129, 118, 36, 236, 64, 179, 52, 239, 184, 51, 51, 199, 221, 49, 81, 197, 17, 199, 192, 99, 49, 168, 157, 164, 190, 33, 240, 182, 214, 173, 7, 156, 102, 95, 65, 217, 225, 123, 42, 21, 124, 144\n        ];\n\n        assert_eq(event_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..event_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], event_body_ciphertext_from_typescript[i]);\n        }\n    }\n}\n"},"106":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"107":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::{get_public_keys, get_ovsk_app}, public_keys::{OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_note_log, oracle::logs_traits::LensForEncryptedLog\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32, let M: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    num_public_values: u8 // Number of values to be appended to the log in public (used in partial note flow).\n) -> (u32, [u8; M], Field) where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let encrypted_log: [u8; M] = compute_encrypted_note_log(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note,\n        num_public_values\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32, let M: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    num_public_values: u8 // Number of values to be appended to the log in public (used in partial note flow).\n) -> (u32, [u8; M], Field) where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient, num_public_values)\n}\n\npub fn encode_and_encrypt_note<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(AztecAddress, AztecAddress, &mut PrivateContext)](NoteEmission<Note>) -> () where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovpk = get_public_keys(ov).ovpk_m;\n        let ivpk = get_public_keys(iv).ivpk_m;\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        // Number of public values is always 0 here because `encode_and_encrypt_note(...)` is only called\n        // in the non-partial note flow.\n        let num_public_values = 0;\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, iv, num_public_values);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(AztecAddress, AztecAddress, &mut PrivateContext)](NoteEmission<Note>) -> () where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        // Note: We could save a lot of gates by obtaining the following keys in an unconstrained context but this\n        // function is currently not used anywhere so we are not optimizing it.\n        let ovpk = get_public_keys(ov).ovpk_m;\n        let ivpk = get_public_keys(iv).ivpk_m;\n\n        // Number of public values is always 0 here because `encode_and_encrypt_note_unconstrained(...)` is only called\n        // in the non-partial note flow.\n        let num_public_values = 0;\n\n        // See the comment in `encode_and_encrypt_note_with_keys_unconstrained` for why having note hash counter\n        // and log hash unconstrained here is fine.\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, iv, num_public_values)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        // Number of public values is always 0 here because `encode_and_encrypt_note_unconstrained(...)` is only called\n        // in the non-partial note flow.\n        let num_public_values = 0;\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient, num_public_values);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys_unconstrained<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        // Number of public values is always 0 here because `encode_and_encrypt_note_with_keys_unconstrained(...)` is only called\n        // in the non-partial note flow.\n        let num_public_values = 0;\n\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient, num_public_values)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n"},"108":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/outgoing_body.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::aes128::aes128_encrypt;\n\nuse crate::{keys::public_keys::IvpkM, utils::point::point_to_bytes};\n\npub struct EncryptedLogOutgoingBody {\n    eph_sk: Scalar,\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n}\n\nimpl EncryptedLogOutgoingBody {\n    pub fn new(eph_sk: Scalar, recipient: AztecAddress, recipient_ivpk: IvpkM) -> Self {\n        Self { eph_sk, recipient, recipient_ivpk }\n    }\n\n    /// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n    /// be able to derive the key with which the incoming log can be decrypted.\n    pub fn compute_ciphertext(self, ovsk_app: Scalar, eph_pk: Point) -> [u8; 144] {\n        // Again, we could compute `eph_pk` here, but we keep the interface more similar\n        // and also make it easier to optimise it later as we just pass it along\n\n        let mut buffer = [0 as u8; 128];\n\n        let serialized_eph_sk_high: [u8; 32] = self.eph_sk.hi.to_be_bytes();\n        let serialized_eph_sk_low: [u8; 32] = self.eph_sk.lo.to_be_bytes();\n\n        let address_bytes: [u8; 32] = self.recipient.to_field().to_be_bytes();\n        let serialized_recipient_ivpk = point_to_bytes(self.recipient_ivpk.to_point());\n\n        for i in 0..32 {\n            buffer[i] = serialized_eph_sk_high[i];\n            buffer[i + 32] = serialized_eph_sk_low[i];\n            buffer[i + 64] = address_bytes[i];\n        }\n        for i in 0..32 {\n            buffer[i + 96] = serialized_recipient_ivpk[i];\n        }\n\n        // We compute the symmetric key using poseidon.\n        let full_key: [u8; 32] = poseidon2_hash_with_separator(\n            [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n            GENERATOR_INDEX__SYMMETRIC_KEY as Field\n        ).to_be_bytes();\n\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(buffer, iv, sym_key).as_array()\n    }\n}\n\nmod test {\n    use crate::{encrypted_logs::outgoing_body::EncryptedLogOutgoingBody, keys::public_keys::IvpkM};\n    use dep::protocol_types::{address::AztecAddress, scalar::Scalar};\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n\n    #[test]\n    unconstrained fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let body = EncryptedLogOutgoingBody::new(eph_sk, recipient, recipient_ivpk);\n\n        let ciphertext = body.compute_ciphertext(sender_ovsk_app, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        assert_eq(outgoing_body_ciphertext_from_typescript, ciphertext);\n    }\n}\n"},"110":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\nuse std::{\n    embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    event::event_interface::EventInterface, oracle::unsafe_rand::unsafe_rand,\n    utils::point::point_to_bytes, note::note_interface::NoteInterface,\n    encrypted_logs::{\n    header::EncryptedLogHeader, incoming_body::EncryptedLogIncomingBody,\n    outgoing_body::EncryptedLogOutgoingBody\n},\n    keys::public_keys::{OvpkM, IvpkM}\n};\n\npub fn compute_encrypted_event_log<Event, let N: u32, let OB: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    event: Event\n) -> [u8; OB] where Event: EventInterface<N> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_event(event, randomness).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; OB] = [0; OB];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = OB - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\npub fn compute_encrypted_note_log<Note, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note,\n    num_public_values: u8 // Number of values to be appended to the log in public (used in partial note flow).\n) -> [u8; M] where Note: NoteInterface<N> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_note(note, storage_slot).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    encrypted_bytes[64] = num_public_values; // TODO(#8558): This can be just a single bit if we store info about partial fields in ABI\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[65 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[97 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[145 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[193 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 337;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[337 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // num_public_values (1 byte)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(unsafe_rand());\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::compute_encrypted_note_log, keys::public_keys::{OvpkM, IvpkM},\n        test::mocks::mock_note::MockNoteBuilder\n    };\n    use dep::protocol_types::{address::AztecAddress, point::Point};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_note_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let storage_slot = 0x0fe46be583b71f4ab5b70c2657ff1d05cccf1d292a9369628d1a194f944e6599;\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let note_value = 0x301640ceea758391b2e161c92c0513f129020f4125256afdae2646ce31099f5c;\n        let note = MockNoteBuilder::new(note_value).contract_address(contract_address).storage_slot(storage_slot).build();\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n        let num_public_values: u8 = 0;\n\n        let log: [u8; 449] = compute_encrypted_note_log(\n            contract_address,\n            storage_slot,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            note,\n            num_public_values\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_note_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 205, 103, 212, 60, 151, 141, 10, 151, 222, 151, 180, 43, 91, 148, 201, 110, 165, 10, 238, 32, 134, 235, 99, 216, 200, 182, 31, 22, 156, 18, 209, 222, 172, 239, 193, 212, 86, 99, 62, 70, 182, 45, 175, 241, 91, 202, 179, 225, 236, 95, 71, 66, 151, 225, 203, 53, 216, 85, 102, 130, 6, 8, 25, 180, 86, 58, 140, 198, 105, 102, 177, 42, 94, 115, 247, 145, 147, 24, 231, 39, 73, 27, 10, 219, 130, 115, 188, 74, 114, 5, 177, 199, 83, 183, 106, 87, 204, 238, 231, 72, 45, 240, 39, 174, 25, 98, 53, 187, 156, 159, 244, 38\n        ];\n        assert_eq(encrypted_note_log_from_typescript, log);\n    }\n\n    #[test]\n    unconstrained fn test_encrypted_note_log_of_finalized_partial_note_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let storage_slot = 0x0fe46be583b71f4ab5b70c2657ff1d05cccf1d292a9369628d1a194f944e6599;\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let note_value = 0x301640ceea758391b2e161c92c0513f129020f4125256afdae2646ce31099f5c;\n        let note_public_value1 = 0x14172339287e8d281545c177313f02b6aa2fedfd628cfd8b7f11a136fd0d6557;\n        let note_public_value2 = 0x0834d81e3f73c7e2809b08ae38600ffc76a2554473eeab6de7bff4b33a84feac;\n        let note = MockNoteBuilder::new(note_value).contract_address(contract_address).storage_slot(storage_slot).build();\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n        let num_public_values: u8 = 2;\n\n        // First we compute the encrypted log without the public values\n        let log_without_public_values: [u8; 449] = compute_encrypted_note_log(\n            contract_address,\n            storage_slot,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            note,\n            num_public_values\n        );\n\n        // Then we \"append\" the public values to the log by copying both the original log and the current log into a new byte array\n        let mut log: [u8; 513] = [0; 513];\n        for i in 0..449 {\n            log[i] = log_without_public_values[i];\n        }\n        let note_public_value1_bytes: [u8; 32] = note_public_value1.to_be_bytes();\n        let note_public_value2_bytes: [u8; 32] = note_public_value2.to_be_bytes();\n        for i in 0..32 {\n            log[449 + i] = note_public_value1_bytes[i];\n            log[481 + i] = note_public_value2_bytes[i];\n        }\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_note_log_of_finalized_partial_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 205, 103, 212, 60, 151, 141, 10, 151, 222, 151, 180, 43, 91, 148, 201, 110, 165, 10, 238, 32, 134, 235, 99, 216, 200, 182, 31, 22, 156, 18, 209, 222, 172, 239, 193, 212, 86, 99, 62, 70, 182, 45, 175, 241, 91, 202, 179, 225, 236, 95, 71, 66, 151, 225, 203, 53, 216, 85, 102, 130, 6, 8, 25, 180, 86, 58, 140, 198, 105, 102, 177, 42, 94, 115, 247, 145, 147, 24, 231, 39, 73, 27, 10, 219, 130, 115, 188, 74, 114, 5, 177, 199, 83, 183, 106, 87, 204, 238, 231, 72, 45, 240, 39, 174, 25, 98, 53, 187, 156, 159, 244, 38, 20, 23, 35, 57, 40, 126, 141, 40, 21, 69, 193, 119, 49, 63, 2, 182, 170, 47, 237, 253, 98, 140, 253, 139, 127, 17, 161, 54, 253, 13, 101, 87, 8, 52, 216, 30, 63, 115, 199, 226, 128, 155, 8, 174, 56, 96, 15, 252, 118, 162, 85, 68, 115, 238, 171, 109, 231, 191, 244, 179, 58, 132, 254, 172\n        ];\n        assert_eq(encrypted_note_log_of_finalized_partial_from_typescript, log);\n    }\n}\n"},"123":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/unsafe_rand.nr","source":"#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n\n// Called `unsafe_rand` because we do not constrain in circuit that we are dealing with an actual random value.\n// Instead we just trust our PXE.\nunconstrained pub fn unsafe_rand() -> Field {\n    rand_oracle()\n}\n"},"126":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"128":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter)\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\nunconstrained pub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) -> Field {\n    notify_nullified_note_oracle(nullifier, note_hash, counter)\n}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n"},"130":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"131":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n"},"132":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n/// - Pack arguments (array version) will notify the simulator that these arguments will be used later at\n///   some point in the call.\n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments\n///   itself.\nunconstrained pub fn pack_arguments_array<let N: u32>(args: [Field; N]) -> Field {\n    pack_arguments_array_oracle(args)\n}\n\n/// - Pack arguments (slice version) will notify the simulator that these arguments will be used later at\n///   some point in the call.\n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments\n///   itself.\nunconstrained pub fn pack_arguments(args: [Field]) -> Field {\n    pack_arguments_oracle(args)\n}\n\n"},"135":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::{address::AztecAddress, point::Point};\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(_note_hash_counter: u32, _encrypted_note: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(_contract_address: AztecAddress, _randomness: Field, _encrypted_event: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedNoteLog)]\nunconstrained fn compute_encrypted_note_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_note_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_note_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedEventLog)]\nunconstrained fn compute_encrypted_event_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _event_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_event_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    event_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_event_log_oracle(\n        contract_address,\n        randomness,\n        event_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_oracle_private<T>(_contract_address: AztecAddress, _message: T, _counter: u32) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log_private_internal<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32\n) -> Field {\n    emit_unencrypted_log_oracle_private(contract_address, message, counter)\n}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n\nunconstrained pub fn emit_contract_class_unencrypted_log_private_internal<let N: u32>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {\n    emit_contract_class_unencrypted_log_private(contract_address, message, counter)\n}\n"},"138":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"139":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"143":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N> where T: Eq {\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe {\n        get_collapse_hints(input)\n    };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>\n) where T: Eq {\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(collapsed.len(), collapsed_to_input_index_mapping.len(), \"Collapse hint vec length mismatch\");\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(collapsed.get_unchecked(i), input[input_index].unwrap(), \"Wrong collapsed vec content\");\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(collapsed.get_unchecked(i), std::mem::zeroed(), \"Dirty collapsed vec storage\");\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(input: [Option<T>; N]) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"146":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n"},"158":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"163":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"164":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::oracle::logs_traits::ToBytesForUnencryptedLog;\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (n as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"167":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"169":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"170":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"177":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"178":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"190":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"232":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"241":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_le_radix(256)\n    }\n    // docs:end:to_le_bytes\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_be_radix(256)\n    }\n    // docs:end:to_be_bytes\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"274":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"287":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"29":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\nmod sha256;\nmod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"307":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"309":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"310":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x2499880e2b1b831785c17286f99a0d5122fee784ce7b1c04e380c4a991da819a;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"312":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"313":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n"},"316":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"317":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"325":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"326":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"329":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"340":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/compressed-string/src/compressed_string.nr","source":"use dep::aztec::protocol_types::{utils::field::field_from_bytes, traits::{Serialize, Deserialize}};\n\n// The general Compressed String.\n// Compresses M bytes into N fields.\n// Can be used for longer strings that don't fit in a single field.\n// Each field can store 31 characters, so N should be M/31 rounded up.\npub struct CompressedString<let N: u32, let M: u32> {\n  value: [Field; N]\n}\n\nimpl<let N: u32, let M: u32> CompressedString<N, M> {\n    pub fn from_string(input_string: str<M>) -> Self {\n        let mut fields = [0; N];\n        let byts = input_string.as_bytes();\n\n        let mut r_index = 0 as u32;\n\n        for i in 0..N {\n            let mut temp = [0 as u8; 31];\n            for j in 0..31 {\n                if r_index < M {\n                    temp[j] = byts[r_index];\n                    r_index += 1;\n                }\n            }\n\n            fields[i] = field_from_bytes(temp, true);\n        }\n\n        Self { value: fields }\n    }\n\n    pub fn to_bytes(self) -> [u8; M] {\n        let mut result = [0; M];\n        let mut w_index = 0 as u32;\n        for i in 0..N {\n            let bytes: [u8; 31] = self.value[i].to_be_bytes();\n            for j in 0..31 {\n                if w_index < M {\n                    result[w_index] = bytes[j];\n                    w_index += 1;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let M: u32> Eq for CompressedString<N, M> {\n    fn eq(self, other: CompressedString<N, M>) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Serialize<N> for CompressedString<N, M> {\n    fn serialize(self) -> [Field; N] {\n        self.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Deserialize<N> for CompressedString<N, M> {\n    fn deserialize(input: [Field; N]) -> Self {\n        Self { value: input }\n    }\n}\n\n#[test]\nunconstrained fn test_short_string() {\n    let i = \"Hello world\";\n    let b = i.as_bytes();\n    let name: CompressedString<1,11> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<4,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string_work_with_too_many_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_serde() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n\n    assert_eq(name, CompressedString::deserialize(name.serialize()));\n}\n\n#[test(should_fail)]\nunconstrained fn test_long_string_fail_with_too_few_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<3,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n"},"342":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::unsafe_rand::unsafe_rand,\n    keys::getters::get_nsk_app, macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness: unsafe_rand(), header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"343":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    crate::sha256::digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u64, msg_start: u32) -> ([u8; 64], u64) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut msg_byte_ptr: u64 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    for k in msg_start..msg_end {\n        if k as u64 < message_size {\n            msg_block[msg_byte_ptr] = msg[k];\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n    (msg_block, msg_byte_ptr)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u64,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u64 {\n    let mut msg_byte_ptr: u64 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    let mut extra_bytes = 0;\n    if msg_end > N {\n        msg_end = N;\n        extra_bytes = msg_end - N;\n    }\n\n    for k in msg_start..msg_end {\n        if k as u64 < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start as u64 < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start as u64 < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start as u64 < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if msg_byte_ptr == 64 {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start as u64 < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start as u64 < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start as u64 < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE as u64 {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..64 {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..64 {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(mut msg_block: [u8; 64], mut msg_byte_ptr: u64) -> ([u8; 64], u64) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        if msg_byte_ptr < 64 {\n            for _ in 57..64 {\n                if msg_byte_ptr <= 63 {\n                    msg_block[msg_byte_ptr] = 0;\n                    msg_byte_ptr += 1;\n                }\n            }\n        }\n    }\n    (msg_block, msg_byte_ptr)\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; 64], mut msg_byte_ptr: u64, message_size: u64) -> [u8; 64] {\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for _i in 0..64 {\n        // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n        if msg_byte_ptr < 56 {\n            msg_block[msg_byte_ptr] = 0;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        } else if msg_byte_ptr < 64 {\n            for j in 0..8 {\n                msg_block[msg_byte_ptr + j] = len_bytes[j];\n            }\n            msg_byte_ptr += 8;\n        }\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; 64], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n"},"369":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/circuits/zimburse_verifiers/src/linode.nr","source":"use dep::zkemail::{KEY_LIMBS_2048, dkim::verify_dkim_2048, body_hash::{compare_body_hash, get_body_hash_by_index}};\nuse crate::constants::{LinodeBillingParams, MAX_EMAIL_BODY_LENGTH, MAX_EMAIL_HEADER_LENGTH};\nuse crate::utils::{check_from_linode_billing, check_subject_billing_receipt, extract_billed_amount};\n\npub fn verify_linode_billing_receipt(\n    body: [u8; MAX_EMAIL_BODY_LENGTH],\n    body_hash_index: u32,\n    body_length: u32,\n    header: [u8; MAX_EMAIL_HEADER_LENGTH],\n    header_length: u32,\n    pubkey: [Field; KEY_LIMBS_2048],\n    pubkey_redc: [Field; KEY_LIMBS_2048],\n    signature: [Field; KEY_LIMBS_2048],\n    from_index: u32,\n    subject_index: u32,\n    amount_index: u32,\n    amount_length: u32,\n    receipt_id_length: u32,\n) -> u32 {\n\n    // check the body and header lengths are within bounds\n    assert(header_length <= MAX_EMAIL_HEADER_LENGTH);\n    assert(body_length <= MAX_EMAIL_BODY_LENGTH);\n\n    // verify the dkim signature over the header\n    verify_dkim_2048(header, header_length, pubkey, pubkey_redc, signature);\n    // manually extract the body hash from the header\n    let body_hash_encoded = get_body_hash_by_index(header, body_hash_index);\n    // compare the retrieved body hash to the computed body hash\n    compare_body_hash(body_hash_encoded, body, body_length);\n    // assert email is from billing@linode.com\n    check_from_linode_billing(from_index, header);\n    // assert this is a billing receipt email from Linode\n    check_subject_billing_receipt(subject_index, header, receipt_id_length);\n    // extract billed amount and serialize\n    let billed_amount = extract_billed_amount(body, amount_index, amount_length);\n    billed_amount\n}\n"},"370":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/circuits/zimburse_verifiers/src/utils.nr","source":"use crate::constants::{\n   LB_FROM_LEN, LB_PAYMENT_TEXT_LEN, LB_SUBJECT_FIXED_END_LEN, LB_SUBJECT_FIXED_START_LEN, LINODE_BILLING_FROM, LINODE_BILLING_PAYMENT_TEXT,\n   LINODE_BILLING_SUBJECT_FIXED_END, LINODE_BILLING_SUBJECT_FIXED_START, MAX_BILLED_AMOUNT, MAX_EMAIL_BODY_LENGTH,\n    MAX_EMAIL_HEADER_LENGTH\n};\n\n/**\n* Check that email is from linode billing address\n*/\npub fn check_from_linode_billing(index: u32, header: [u8; MAX_EMAIL_HEADER_LENGTH]) {\n    // check the first char is \"f\" or \"F\"\n    assert((header[index] == 0x66) | (header[index] != 0x46), \"Email sender not found.\");\n\n    // check the remaing chars are the expected Linode billing\n    let from_bytes = LINODE_BILLING_FROM.as_bytes();\n    for i in 0..LB_FROM_LEN {\n        assert(header[i + index + 1] == from_bytes[i], \"Email not from Linode billing.\");\n    }\n\n    // check for CRLF\n    assert(header[LB_FROM_LEN + index + 1] == 0x0D, \"Invalid CRLF sequence\");\n    assert(header[LB_FROM_LEN + index + 2] == 0x0A, \"Invalid CRLF sequence\");\n}\n\n/**\n* Check that email subject is linode billing receipt\n*/\npub fn check_subject_billing_receipt(index: u32, header: [u8; MAX_EMAIL_HEADER_LENGTH], receipt_id_length: u32) {\n    // check the first char is \"s\" or \"S\"\n    assert((header[index] == 0x73) | (header[index] == 0x53), \"Email subject not found\");\n\n    let fixed_start_bytes = LINODE_BILLING_SUBJECT_FIXED_START.as_bytes();\n    // check chars in fixed section start\n    for i in 0..LB_SUBJECT_FIXED_START_LEN {\n        assert(header[i + index + 1] == fixed_start_bytes[i], \"Email subject is not Linode billing receipt\");\n    }\n\n    let fixed_end_bytes = LINODE_BILLING_SUBJECT_FIXED_END.as_bytes();\n    // check chars in fixed section end\n    for i in 0..LB_SUBJECT_FIXED_END_LEN {\n        let headerIndex = i + index + receipt_id_length + LB_SUBJECT_FIXED_START_LEN;\n        assert(header[headerIndex] == fixed_end_bytes[i], \"Email subject is not Linode billing receipt\");\n    }\n}\n\npub fn serialize_bytes<let LIMBS: u32, let SEQUENCE_LENGTH: u32>(sequence: [u8; SEQUENCE_LENGTH]) -> [Field; LIMBS] {\n    let mut limbs: [Field; LIMBS] = [0; LIMBS];\n    for i in 0..LIMBS {\n        let mut chunk = 0;\n        let mut v = 1;\n        for j in 0..31 {\n            let index = i * 31 + j;\n            if index < SEQUENCE_LENGTH {\n                chunk += sequence[index] as Field * v;\n                v *= 256;\n            }\n        }\n        limbs[i] = chunk;\n    }\n    limbs\n}\n\npub fn is_number_constraint(num: u8) {\n    assert(num >= 0x30);\n    assert(num < 0x3A);\n}\n\n/**\n* Extract the amount billed by Linode as a u32\n*/\npub fn extract_billed_amount(body: [u8; MAX_EMAIL_BODY_LENGTH], index: u32, amount_length: u32) -> u32 {\n\n    // ensure billed amount follows valid payment text sequence\n    let payment_text_bytes = LINODE_BILLING_PAYMENT_TEXT.as_bytes();\n    for i in 0..LB_PAYMENT_TEXT_LEN {\n        assert(body[(index - LB_PAYMENT_TEXT_LEN) + i] == payment_text_bytes[i], \"Invalid payment text sequence.\");\n    }\n\n    let mut amount: Field = 0;\n    let fixed_values = 4; // '$', '.', and two decimals\n    let commas: Field = ((amount_length - fixed_values - 1) / 4) as Field; // account for \n    let mut power: Field = amount_length as Field - commas - 3; // 3 represents '$' and '.' and power is equal to numberic len - 1\n\n    // ensure first character is '$'\n    assert(body[index] == 36);\n\n    // if second character is a zero then decrement power\n    if body[index + 1] == 48 {\n        power = power - 1;\n    }\n\n    for i in 1..MAX_BILLED_AMOUNT {\n        if i < amount_length {\n            let byte = body[index + i];\n            // check that byte is not a comma or period\n            if (byte != 44) & (byte != 46) {\n                amount = amount + ((byte as Field - 48) * (10 as Field).pow_32(power));\n                power = power - 1;\n            }\n        }\n    }\n    amount as u32\n}\n\n// #[test]\n// fn value_extraction() {\n//     let index = 0;\n//     let mut body: [u8; MAX_EMAIL_BODY_LENGTH] = [0; MAX_EMAIL_BODY_LENGTH];\n//     let val = \"$4,123.00\";\n//     let bytes = val.as_bytes();\n//     for i in 0..bytes.len() {\n//         body[i] = bytes[i];\n//     }\n//     let extracted = extract_billed_amount(body, index, bytes.len());\n//     println(extracted);\n// }\n\n// #[test]\n// fn test_payment_string_bytes() {\n//  let bytes = LINODE_BILLING_PAYMENT_TEXT.as_bytes();\n//  println(bytes);\n// }"},"372":{"path":"/Users/ianbrighton/nargo/github.com/zkemail/zkemail.nrv0.2.0/lib/src/base64.nr","source":"use crate::BODY_HASH_BASE64_LENGTH;\n\n// noir_base64 has issues right now, just use this for now\n\n/**\n * Decodes a base64 encoded body hash into a 32 byte sha256 hash of the body\n * @notice from https://github.com/richardliang/noir-rsa/blob/main/crates/rsa-biguint/src/lib.nr\n\n * @param encoded - the base 64 encoded body hash\n * @returns the decoded sha256 hash\n */\npub fn bodyhash_base64_decode(encoded: [u8; BODY_HASH_BASE64_LENGTH]) -> [u8; 32] {\n    let mut total_bits = [0 as u1; BODY_HASH_BASE64_LENGTH * 6];\n    for i in 0..BODY_HASH_BASE64_LENGTH {\n        let translate = base64_lookup(encoded[i] as u8);\n        // Store as big endian\n        let translate_bits: [u1; 6] = (translate as Field).to_be_bits();\n        for j in 0..6 {\n            total_bits[i * 6 + j] = translate_bits[j];\n        }\n    }\n\n    // Since we're returning the SHA256 hash, only need first 32 bytes (=256 bits)\n    let mut output = [0 as u8; 32];\n    for i in 0..32 {\n        for j in 0..8 {\n            // Convert from big endian back to little endian\n            output[i] |= (total_bits[i * 8 + j] as u8) << (7 - j) as u8;\n        }\n    }\n\n    output\n}\n\n/**\n * Lookup for the base 64 encoding\n * @todo: replace with noir_lang base64 lib\n *\n * @param input - the base 64 encoded character\n * @returns the decoded value\n */\nfn base64_lookup(input: u8) -> u8 {\n    // A-Z: 65-90\n    if input >= 65 & input <= 90 {\n        input - 65\n    } else if input >= 97 & input <= 122 {\n        // a-z: 97-122\n        input - 71\n    } else if input >= 48 & input <= 57 {\n        // 0-9: 48-57\n        input + 4\n    } else if input == 43 {\n        // +\n        62\n    } else if input == 47 {\n        // /\n        63\n    } else {\n        // =\n        0\n    }\n}"},"373":{"path":"/Users/ianbrighton/nargo/github.com/zkemail/zkemail.nrv0.2.0/lib/src/body_hash.nr","source":"use crate::BODY_HASH_BASE64_LENGTH;\nuse crate::base64::bodyhash_base64_decode;\nuse dep::std::hash::sha256_var;\n\nglobal BH_PREFIX: [u8; 3] = [98, 104, 61]; // \"bh=\"\nglobal BH_SUFFIX: u8 = 59; // \";\"\n\n/**\n * Get the body hash from the header by allowing circuit input to choose index\n * @notice unsafe, can theoretically make a recipient display name = the bh\n *\n * @param HEADER_LENGTH - The length of the email header\n * @param header - The email header as validated in the DKIM signature\n * @param index - The asserted index to find the body hash at\n * @returns The base 64 encoded body hash\n */\npub fn get_body_hash_by_index<let MAX_HEADER_LENGTH: u32>(\n    header: [u8; MAX_HEADER_LENGTH],\n    index: u32\n) -> [u8; BODY_HASH_BASE64_LENGTH] {\n    // check index range\n    assert(index >= 3, \"Index does not leave room for 'bh=' prefix\");\n    assert(index + BODY_HASH_BASE64_LENGTH < MAX_HEADER_LENGTH, \"Index does not leave room for body hash\");\n    // check for 'bh=' prefix\n    for i in 0..3 {\n        assert(header[index - 3 + i] == BH_PREFIX[i], \"No 'bh=' prefix found\");\n    }\n    // check for base64 suffix\n    assert(header[index + BODY_HASH_BASE64_LENGTH] == BH_SUFFIX, \"No base64 suffix found\");\n    // retrieve body hash\n    let mut body_hash = [0 as u8; BODY_HASH_BASE64_LENGTH];\n    for i in 0..BODY_HASH_BASE64_LENGTH {\n        body_hash[i] = header[index + i];\n    }\n    body_hash\n}\n\n/**\n * Given a retrieved base64-encoded body hash and the actual body, check that the body hashes to the same value\n * @notice not used with partial hash, see compare_partial_body_hash\n * @dev todo: check if b64 encoding or decoding is cheaper\n *\n * @param MAX_BODY_LENGTH - The maximum length of the email body\n * @param body_hash_encoded - The base 64 encoded body hash retrieved from the DKIM-signed header\n * @param body - The email body, 0-padded at end to the MAX_BODY_LENGTH\n * @param body_length - The actual length of the email body\n */\npub fn compare_body_hash<let MAX_BODY_LENGTH: u32>(\n    body_hash_encoded: [u8; BODY_HASH_BASE64_LENGTH],\n    body: [u8; MAX_BODY_LENGTH],\n    body_length: u32\n) {\n    // base64 decode the retrieved encoded body hash\n    // let signed_body_hash: [u8; 32] = base64_decode(body_hash_encoded);\n    let signed_body_hash: [u8; 32] = bodyhash_base64_decode(body_hash_encoded);\n    // sha256 hash the body\n    let computed_body_hash: [u8; 32] = sha256_var(body, body_length as u64);\n    // check the body hashes match\n    assert(\n        signed_body_hash == computed_body_hash, \"Sha256 hash computed over body does not match DKIM-signed header\"\n    );\n}\n"},"375":{"path":"/Users/ianbrighton/nargo/github.com/zkemail/zkemail.nrv0.2.0/lib/src/dkim.nr","source":"use dep::rsa::bignum::fields::{Params1024, Params2048};\nuse dep::rsa::bignum::runtime_bignum::BigNumInstance;\nuse dep::rsa::types::RSA;\nuse dep::rsa::bignum::BigNum;\nuse dep::std::hash::sha256_var;\nuse crate::{KEY_LIMBS_1024, KEY_LIMBS_2048, KEY_BYTES_1024, KEY_BYTES_2048, RSA_EXPONENT};\n\ntype BN1024 = BigNum<KEY_LIMBS_1024, Params1024>;\ntype RSA1024 = RSA<BN1024, BigNumInstance<KEY_LIMBS_1024, Params1024>, KEY_BYTES_1024>;\ntype BN2048 = BigNum<KEY_LIMBS_2048, Params2048>;\ntype RSA2048 = RSA<BN2048, BigNumInstance<KEY_LIMBS_2048, Params2048>, KEY_BYTES_2048>;\n\n/**\n * Verify a 1024-bit RSA (DKIM) signature over an email header\n * \n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param header - The email header, 0-padded to the maximum possible length for this circuit\n * @param header_length - The actual length of the email header\n * @param pubkey_modulus_limbs - The DKIM RSA Pubkey\n * @param redc_params_limbs - Barrett Reduction Parameter for Pubkey for efficient signature verification\n * @param signature - The DKIM RSA Signature \n */\npub fn verify_dkim_1024<let MAX_HEADER_LENGTH: u32>(\n    header: [u8; MAX_HEADER_LENGTH],\n    header_length: u32,\n    pubkey: [Field; KEY_LIMBS_1024],\n    pubkey_redc: [Field; KEY_LIMBS_1024],\n    signature: [Field; KEY_LIMBS_1024]\n) {\n    // check the header length is within bounds\n    assert(header_length <= MAX_HEADER_LENGTH);\n\n    // instantiate the BNInstance for the pubkey\n    let pubkey: BigNumInstance<KEY_LIMBS_1024, Params1024> = BigNumInstance::new(pubkey, pubkey_redc);\n\n    // instantiate BN for the signature\n    let signature: BN1024 = BigNum::from_array(signature);\n\n    // hash the header\n    let header_hash = sha256_var(header, header_length as u64);\n\n    // verify the DKIM signature over the header\n    let rsa: RSA1024 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(pubkey, header_hash, signature, RSA_EXPONENT));\n}\n\n/**\n * Verify a 1024-bit RSA (DKIM) signature over an email header\n * \n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param header - The email header, 0-padded to the maximum possible length for this circuit\n * @param header_length - The actual length of the email header\n * @param pubkey_modulus_limbs - The DKIM RSA Pubkey\n * @param redc_params_limbs - Barrett Reduction Parameter for Pubkey for efficient signature verification\n * @param signature - The DKIM RSA Signature \n */\npub fn verify_dkim_2048<let MAX_HEADER_LENGTH: u32>(\n    header: [u8; MAX_HEADER_LENGTH],\n    header_length: u32,\n    pubkey: [Field; KEY_LIMBS_2048],\n    pubkey_redc: [Field; KEY_LIMBS_2048],\n    signature: [Field; KEY_LIMBS_2048]\n) {\n    // check the header length is within bounds\n    assert(header_length <= MAX_HEADER_LENGTH);\n\n    // instantiate the BNInstance for the pubkey\n    let pubkey: BigNumInstance<KEY_LIMBS_2048, Params2048> = BigNumInstance::new(pubkey, pubkey_redc);\n\n    // instantiate BN for the signature\n    let signature: BN2048 = BigNum::from_array(signature);\n\n    // hash the header\n    let header_hash = sha256_var(header, header_length as u64);\n\n    // verify the DKIM signature over the header\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(pubkey, header_hash, signature, RSA_EXPONENT));\n}\n"},"378":{"path":"/Users/ianbrighton/nargo/github.com/noir-lang/noir_rsav0.3.0/lib/src/rsa.nr","source":"use dep::bignum::BigNum;\nuse dep::bignum::runtime_bignum::BigNumInstance;\nuse dep::bignum::runtime_bignum::BigNumTrait;\nuse dep::bignum::runtime_bignum::BigNumInstanceTrait;\n\nuse crate::types::{RSA, BN1024, BN2048, BNInst1024, BNInst2048, RSA1024, RSA2048};\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] = [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i as u32 < 52 + ps_len as u32 {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i as u32 == 52 + ps_len as u32 {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i as u32 == 53 + ps_len as u32 {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\nimpl<BN, BNInstance, let NumBytes: u32> RSA<BN, BNInstance, NumBytes>  where BN: BigNumTrait, BNInstance: BigNumInstanceTrait<BN> {\n    /**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @details The fourth function parameter is required to define the value of `NBytes`\n *          when converting a BigNum into a byte array, the number of bytes is required and currently cannot be inferred.\n *          Once numeric generics can be derived by applying operations to other numeric generics the need for this will go away.\n *\n * @note The exponent `e` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\n    pub fn verify_sha256_pkcs1v15(_: Self, instance: BNInstance, msg_hash: [u8; 32], sig: BN, exponent: u32) -> bool {\n        assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n        let mut exponentiated = instance.mul(sig, sig); // sig^2\n\n        if exponent == 65537 {\n            // e = 65537 = 1 0000 0000 0000 0001\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^2 * sig^2 = sig^4\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^8\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^16\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^32\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^64\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^128\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^256\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^512\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^1024\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^2048\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^4096\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^8192\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^16384\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^32768\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^65536\n        }\n        // otherwise, e = 3 = 11\n\n        exponentiated = instance.mul(exponentiated, sig); // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n\n        let mut padded_sha256_hash_bytes: [u8; NumBytes] = exponentiated.to_le_bytes();\n        compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n    }\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_1024() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n\n    let BNInstance: BNInst1024 = BigNumInstance::new(\n        [\n        0xe908724e0d28a1565511879e00f063, 0x58dea28d5112982c8ab8597d3e611f, 0xb115f9878acc910a47b41ac8d5f763, 0xc71b0a719c2283f710f86024737cee, 0x9ee9eb73e95b84f033af5217337427, 0x8fcab34c99cc2661dd57de15ae2110, 0xa38db8a829eec5550342f6f66334dc, 0xd7c4b32fd351a47d860fda1897330e, 0x98c92a33a0f33fd7\n    ],\n        [\n        0x55582e8ba08822783fbd7d07390be2, 0x1d7d83f9dce3983c66f440dcc2f33e, 0x6072d13c84a4cb304f58fbabe782e7, 0x0cee5e0dd62bc54d15a91a4ea3bc50, 0xc485e6f946c45cf660fba4f49325cb, 0x1f0e45df0464b065c94e84ed1dad8c, 0xe4c7b3976310ea239059d834b545f3, 0xd418145200fa77235f5f8d852b121f, 0x01acf0bd16cad9bd8f\n    ]\n    );\n    let signature: BN1024 = BigNum::from_array(\n        [\n        0x393f230b55a12fb7bb39c7edd2cf48, 0x78f7d0a217d340407cae4f39b8f001, 0x603909ff76a519f3c8e96d695d462e, 0x0640ab230b459bf4b20b4823a5b850, 0x02ba190de61a85074b18e228231984, 0xe1424c0779825707aa433ecb86c388, 0xbed8087d947a9c6c56625ad20c91aa, 0x7da4a0c2eee3a3c0d61e892ab4ada9, 0x6ef98a936c8bf8e5\n    ]\n    );\n\n    let rsa: RSA1024 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    let BNInstance: BNInst2048 = BigNumInstance::new(\n        [\n        0x183b4cadacea64716b6535b25a86ad, 0x129a32e9fbd374949e81b080546c2b, 0x9276332765f54b9b4d6fe23f4983a4, 0x91df05fde1a414c9fbf38808a01032, 0x97ca171c382e082ddd6c81be090902, 0x97161dde47ed979939451704b72648, 0x3b66f0c93f8ddbc62bb99f6b8fad2d, 0xc3a046fcad814d8938da372cd84d2a, 0xfe903cfe3ee4de6de3916023bb87f2, 0x8be5fd99c8b46dce9aab27ce4b3883, 0x0d99dfe50dd2288123804872da8543, 0xbb6d8afef8b2c7e3b86ad96973d4e5, 0x17e08fa3c5391279b844581f67825c, 0x09511f4a436abe495bfbfcc254d9c5, 0xf80d02572d620eab5ad7ecfbe2c20c, 0x2a5307402a05f59ba232ad0c8366d0, 0x7b9169630b317c38d549a86f85fcfc, 0xf2\n    ],\n        [\n        0xf4effa025abe90db41dc5bb5934a5f, 0x2596b25aa09f6a0e290accebbef006, 0x330e9567ec5eca92b7a8ce72ad3d83, 0xccf98d178ec4017e4947cadc02da7c, 0xaed6044ffeeb12de4d1e67aedfda78, 0xb5ae8a5a4637b632800e2f41dfbf0a, 0x8304360d359cf2f0d5d97c039f9b04, 0x53cde0d0633c0e66e1da9a118f6a96, 0xf9a83822351097bb1ed123d10290f5, 0xeb489c7f7227c09ca0117264dcf04f, 0x6a1b3618478a235f438adf84533177, 0x71c03085e38a87f5ec8e51c27dde98, 0xcf3e89d9cf253ef61d65d4431334d9, 0xa5a1a59e98fb7f49c746149324201d, 0x38f46c635f884f24c254eaa37981d6, 0x1c42be15dd95e1ac5bf01972b24ff9, 0x4555dd506d1f89e61279293c03db90, 0x010e\n    ]\n    );\n    let signature: BN2048 = BigNum::from_array(\n        [\n        0x5f0937ed1aacbdb83991e21c89ca8a, 0x5a1fa4ef2faf4042401c9121c73874, 0x7379fbb7713fbf807d250f7401afb8, 0x9cc5ce8813f3a83a72b681a4d434b2, 0x11cb49ac2ee1f9bed8a008b8327e1e, 0xf3362524f1224e48827b34a62f6ace, 0x3498a2944e32a3798fe9da684b32ae, 0xc346c33528bcdf7a06805126a29402, 0x6ac93f2fa68f270ec73674eae24380, 0x222c72de080496533ceeb8af827910, 0xc22889b311a53203278b942ca67100, 0x93d75567f7fe9ee7ca9871a0cb09f9, 0x049dabd976a9574847b1614f6b739c, 0xdc66b621dbae623df9b657b52fa1b0, 0xf37e82cc1eced382e11fc32e673f67, 0xe50545eb9027f1144a0ba7bbb0c886, 0xb6193409539c515d3c55a45c5734b1, 0x4b\n    ]\n    );\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n\n    let BNInstance: BNInst2048 = BigNumInstance::new(\n        [\n        0xc6a1c5e80ce354c6b00ccf20cf3a1d, 0x178d135f925a03eceb25f79bab56ee, 0x13ab3d6d8a5c5586752b5a3bc74ec3, 0x3d13b47b152367e3e2fc014d03d19f, 0xe89a7278a2945b4a672011691db30f, 0x5b4c1b061378143629dbb29dea1e4, 0x26a48b6f4e8df1472fd4fc12b17c18, 0xc7c92ead0ce810520cf3a8267254c1, 0x806b8cdba93909e9d9a71ee1bcdac2, 0x703ef80f8eb703b84c201366dff1c7, 0x7361034bb2c4c081aad8b1bcca83de, 0xb23c7e1109e65e6d08fa72cc862008, 0x750bc927874455782cd2d6fd5a51f6, 0xf0b83665fbf8cb5cf31cee9f89848e, 0x20d447b08953c7ce3330197938a8ae, 0x11a08bb5a2241c6a2a69f930d8b28b, 0xef5bca8dd582570a44705cb123d09e, 0xb7\n    ],\n        [\n        0xbc93ee57c1c8adc53f0a995a6221ca, 0x2a9b43587534b20dd85a5233329f10, 0xc587fd488f64eed02adc1f462f7448, 0xf1484d37676bb0e800996757382522, 0xc2126c48221aa61c9f52c6b918bab3, 0x8660c861dd52ed958beaf6c6c2cff0, 0x5edd9dc4f02a000f350948c70bdf94, 0x6f3b9603149272e9b232a379a017bb, 0x950fd85cffbdf4476b1cb66c1f63d6, 0xee459417b1a56b6f7ef3b89e385ac, 0x48daeef6d1a055f3746ab71058e137, 0x3cbc0ba96d541feee92dd27f9d0306, 0x6a2a42384cc388fa113ee80317e0a0, 0x43b4f89c508a42d309f295c0d9f3a5, 0x8d8c28b05f71b962b40ea906ff407f, 0x390a7989eb9cecc5827cb00e1ca693, 0x4cbf158eabf7e96ef7f2586d0ce613, 0x164\n    ]\n    );\n\n    let signature: BN2048 = BigNum::from_array(\n        [\n        0x19772b9af8a031170a7844ce4f3d7c, 0x4808e817258f57805a7326f70bcd74, 0xca8f3f98e374d52100115bfa645a7d, 0x49547189edff3b683fee267e717b7f, 0x96f263b47e96925f3b5898a7389ceb, 0x4cc50a893da91d0e085fc6656b30bc, 0x67e84ff92d88c0ad2c17ad2701309e, 0x095326818578173289665fcd9ad788, 0x775c6e85b745065db9411b9d579763, 0xad0f20c8a5265dfca4080ca877a2b8, 0xbfd199372f1680b3bc583a08bd8ba9, 0x663476ca3e5ede3e5976887db2c4e5, 0x531192309d0d49fed47c0216c27f9e, 0x37d26d31c86b951ca1c17b517063b7, 0x3cdb362ed5dfd06568eb9a9bbb6a91, 0x14520b9c23f583314729a9d858bca9, 0x5e0505067ada1026721d45997bf2c4, 0x3e\n    ]\n    );\n\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 3));\n}\n"},"381":{"path":"/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignumv0.3.3/src/utils/split_bits.nr","source":"\n// Decomposes a single field into two 120 bit fields and a carry\nunconstrained pub fn split_120_bits(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let offsets: [Field; 17] = [\n        1, 0x100, 0x10000, 0x1000000, 0x100000000, 0x10000000000, 0x1000000000000, 0x100000000000000, 0x10000000000000000, 0x1000000000000000000, 0x100000000000000000000, 0x10000000000000000000000, 0x1000000000000000000000000, 0x100000000000000000000000000, 0x10000000000000000000000000000, 0x1000000000000000000000000000000, 0x100000000000000000000000000000000\n    ];\n\n    for i in 0..15 {\n        low += (x_bytes[i] as Field) * offsets[i];\n        high += (x_bytes[i + 15] as Field) * offsets[i];\n    }\n    high += (x_bytes[30] as Field) * offsets[15];\n    high += (x_bytes[31] as Field) * offsets[16];\n    // TDOO: investigate why this is triggered in BigCurve crate? it shouldn't be?\n    //   assert(x_bytes[31] == 0);\n    (low, high)\n}\n\n/**\n * @brief Decomposes a single field into two 60 bit fields\n *\n * @description Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\n **/\nunconstrained pub fn split_60_bits(x: Field) -> (u64, u64) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: u64 = 0;\n    let mut high: u64 = 0;\n\n    let offsets: [u64; 8] = [1, 0x100, 0x10000, 0x1000000, 0x100000000, 0x10000000000, 0x1000000000000, 0x100000000000000];\n    for i in 0..8 {\n        low += (x_bytes[i] as u64) * offsets[i];\n        high += (x_bytes[i + 8] as u64) * offsets[i];\n    }\n    let t1 = low >> 60;\n    let mask = ((1 as u64) << 60 as u8) - 1;\n    low = low & mask;\n    high = (high << 4) | t1;\n    (low, high)\n}\n"},"382":{"path":"/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignumv0.3.3/src/utils/arrayX.nr","source":"use dep::std;\nuse crate::utils::split_bits;\n\n/**\n * @brief Array abstraction, whose size is a known multiplier `SizeMultiplier` of an initial size `N`\n *\n * @note ArrayX is a workaround for the lack of arithmetic over generics.\n *       e.g. [Field; N * 2] is not currently possible\n *       This abstraction can be removed once Noir supports arithmetic on generics.\n**/\nstruct  ArrayX<T, let N: u32, let SizeMultiplier: u32> {\n    segments: [[T; N]; SizeMultiplier]\n}\n\nimpl<T, let N: u32, let SizeMultiplier: u32> std::convert::From<[T; N]> for ArrayX<T, N, SizeMultiplier> where T: std::default::Default {\n    fn from(input: [T; N]) -> Self {\n        assert(N == 1);\n        let mut result = ArrayX::new();\n        result.segments[0] = input;\n        result\n    }\n}\n\nimpl<T, let N: u32, let SizeMultiplier: u32> std::convert::From<[[T; N]; SizeMultiplier]> for ArrayX<T, N, SizeMultiplier> where T: std::default::Default {\n    fn from(input: [[T; N]; SizeMultiplier]) -> Self {\n        ArrayX { segments: input }\n    }\n}\n\nimpl<T, let N: u32, let SizeMultiplier: u32> std::cmp::Eq for ArrayX<T, N, SizeMultiplier> where T: std::cmp::Eq {\n    fn eq(self, other: Self) -> bool {\n        let mut result: bool = true;\n        for i in 0..SizeMultiplier {\n            for j in 0..N {\n                result = result & (self.segments[i][j] == other.segments[i][j]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let SizeMultiplier: u32> ArrayX<T, N, SizeMultiplier> {\n\n    fn new() -> Self where T: std::default::Default {\n        ArrayX { segments: [[T::default(); N]; SizeMultiplier] }\n    }\n\n    fn mul_assign(&mut self, i: u32, rhs: T) where T: std::ops::Mul {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index] *= rhs;\n    }\n\n    fn add_assign(&mut self, i: u32, rhs: T) where T: std::ops::Add {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index] += rhs;\n    }\n\n    fn sub_assign(&mut self, i: u32, rhs: T) where T: std::ops::Sub {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index] -= rhs;\n    }\n\n    fn set(&mut self, i: u32, x: T) {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index] = x;\n    }\n\n    fn get(self, i: u32) -> T {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index]\n    }\n}\n\nimpl<let N: u32, let SizeMultiplier: u32> ArrayX<Field, N, SizeMultiplier> {\n\n    unconstrained fn __normalize_limbs(self, range: u32) -> Self {\n        let mut normalized: Self = ArrayX::new();\n        let mut inp = self;\n        // (9 limb mul = 17 product terms)\n\n        // a2 a1 a0\n        // b2 b1 b0\n\n        // a0b0\n        // a1b0 a0b1\n        // a2b0 a1b1 a0b2\n        // a2b1 a1b2\n        // a2b2\n\n        // r0 lo\n        // r0 hi + r1 lo\n        // r1 hi + r2 lo\n        // r2 hi + r3 lo\n        // r3 hi + r4 lo\n        // r4 hi = 6?\n        for i in 0..(range - 1) {\n            let (lo, hi) = split_bits::split_120_bits(inp.get(i));\n\n            normalized.set(i, lo);\n            inp.set(i + 1, inp.get(i + 1) + hi);\n        }\n        {\n            let (lo, hi) = split_bits::split_120_bits(inp.get(range - 1));\n            normalized.set(range - 1, lo);\n            assert(hi == 0);\n        }\n        normalized\n    }\n}\n"},"383":{"path":"/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignumv0.3.3/src/utils/u60_representation.nr","source":"use dep::std;\n\nuse crate::utils::arrayX::ArrayX;\nuse crate::utils::split_bits;\nuse crate::utils::msb::get_msb64;\n\n/**\n * @brief U60Repr represents a BigNum element as a sequence of 60-bit unsigned integers.\n *\n * @description: used in unconstrained functions when computing witness values.\n * It is helpful to use u60 types when evaluating addition operations that can overflow the field modulus,\n * as well as when performing bit shifts.\n */\nstruct  U60Repr<let N: u32, let NumSegments: u32>\n{\n    limbs: ArrayX<u64, N, NumSegments>\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Add for U60Repr<N, NumSegments> {\n    fn add(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n\n        let mut carry: u64 = 0;\n        for j in 0..NumSegments {\n            for i in 0..N {\n                let mut add: u64 = self.limbs.segments[j][i] + b.limbs.segments[j][i] + carry;\n                carry = add >> 60;\n                add = add - (carry << 60);\n                result.limbs.segments[j][i] = add;\n            }\n        }\n\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Sub for U60Repr<N, NumSegments> {\n    fn sub(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        for j in 0..NumSegments {\n            for i in 0..N {\n                borrow = ((b.limbs.segments[j][i] + borrow_in) > self.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + self.limbs.segments[j][i] - b.limbs.segments[j][i] - borrow_in;\n                result.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::From<[Field; N]> for U60Repr<N, NumSegments> {\n    fn from(input: [Field; N]) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n        for i in 0..(N) {\n            let (lo, hi) = split_bits::split_60_bits(input[i]);\n            result.limbs.set(2 * i, lo);\n            result.limbs.set(2 * i + 1, hi);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::Into<[Field; N]> for U60Repr<N, NumSegments> {\n    fn into(x: U60Repr<N, NumSegments>) -> [Field; N] {\n        let mut result: [Field; N] = [0; N];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..N {\n            result[i] = x.limbs.get(2 * i) as Field + (x.limbs.get(2 * i + 1) as Field * two_pow_60);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::cmp::Eq for U60Repr<N, NumSegments> {\n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> U60Repr<N, NumSegments> {\n\n    unconstrained fn new<let NumFieldSegments: u32>(x: ArrayX<Field, N, NumFieldSegments>) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n        for i in 0..(N * NumFieldSegments) {\n            let (lo, hi) = split_bits::split_60_bits(x.get(i));\n            result.limbs.set(2 * i, lo);\n            result.limbs.set(2 * i + 1, hi);\n        }\n        result\n    }\n\n    unconstrained fn one() -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n        result.limbs.set(0, 1);\n        result\n    }\n\n    unconstrained fn into_arrayX<let NumFieldSegments: u32>(x: U60Repr<N, NumSegments>) -> ArrayX<Field, N, NumFieldSegments> {\n        let mut result: ArrayX<Field, N, NumFieldSegments> = ArrayX { segments: [[0; N]; NumFieldSegments] };\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..(N * NumFieldSegments) {\n            result.set(\n                i,\n                x.limbs.get(2 * i) as Field + (x.limbs.get(2 * i + 1) as Field * two_pow_60)\n            );\n        }\n        result\n    }\n\n    unconstrained fn gte(self, b: Self) -> bool {\n        let mut result = false;\n        let mut early_exit = false;\n        for i in 0..(N * NumSegments) {\n            if (b.limbs.get((N * NumSegments) - 1 - i) < (self.limbs.get((N * NumSegments) - 1 - i))) {\n                result = true;\n                early_exit = true;\n                break;\n            } else if (b.limbs.get((N * NumSegments) - 1 - i) != (self.limbs.get((N * NumSegments) - 1 - i))) {\n                result = false;\n                early_exit = true;\n                break;\n            }\n        }\n        if (early_exit == false) {\n            result = (self.limbs.get(0) == b.limbs.get(0));\n        }\n        result\n    }\n\n    fn get_bit(self, bit: u32) -> bool {\n        let segment_index = bit / 60;\n        let uint_index = bit % 60;\n\n        let limb: u64 = self.limbs.get(segment_index);\n        let value = (limb >> uint_index as u8) & 1;\n        value == 1\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shr(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = shift % 60;\n        let remainder_shift = 60 - limb_shift;\n        let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        result.limbs.set(\n            0,\n            (self.limbs.get(0 + num_shifted_limbs) >> limb_shift as u8)\n        );\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs.get(i + num_shifted_limbs);\n            result.limbs.set(i, (value >> limb_shift as u8));\n            let remainder: u64 = (value << remainder_shift as u8) & mask;\n            result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shr1(&mut self) {\n        let value = self.limbs.segments[NumSegments - 1][N - 1];\n        self.limbs.segments[NumSegments - 1][N - 1] = value >> 1;\n\n        let mut remainder = (value & 1) << 59;\n\n        for j in 0..NumSegments {\n            for i in 0..N {\n                let value = self.limbs.segments[NumSegments - 1 - j][N - 1 - i];\n                self.limbs.segments[NumSegments - 1 - j][N - 1 - i] = (value >> 1) + remainder;\n                remainder = (value << 59) & 0x800000000000000;\n            }\n        }\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shl(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift: u8 = 60 - limb_shift as u8;\n\n        // 83\n        // limb shift = 1\n        // inside shift = 19 bits to the left\n        // meaning we have 19 carry bits and 41 remainder bits\n        let mask: u64 = (1 as u64 << 60) - 1;\n        //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        let value = self.limbs.get(0);\n\n        let mut remainder = (value >> remainder_shift);\n        result.limbs.set(num_shifted_limbs, (value << (limb_shift as u8)) & mask);\n\n        // shift 84. num shifted = 1\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs.get(i);\n            let upshift = ((value << (limb_shift as u8)) + remainder) & mask;\n            result.limbs.set(i + num_shifted_limbs, upshift);\n            remainder = (value >> remainder_shift);\n            // let remainder: u64 = (self.limbs.get(i + num_shifted_limbs as u64) << remainder_shift as u8) & mask;\n            // result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    fn increment(&mut self) {\n        let mut carry: u64 = 0;\n\n        let mut add: u64 = self.limbs.segments[0][0] + 1;\n        carry = add >> 60;\n        add = add - (carry << 60);\n        self.limbs.segments[0][0] = add;\n        for i in 1..N {\n            let mut add: u64 = self.limbs.segments[0][i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            self.limbs.segments[0][i] = add;\n        }\n        for j in 1..NumSegments {\n            for i in 0..N {\n                let mut add: u64 = self.limbs.segments[j][i] + carry;\n                carry = add >> 60;\n                add = add - (carry << 60);\n                self.limbs.segments[j][i] = add;\n            }\n        }\n    }\n\n    unconstrained  fn get_msb(val: Self) -> u32 {\n        let mut count = 0;\n        for i in 0..N * NumSegments {\n            let v = val.limbs.get((N * NumSegments) - 1 - i);\n            if (v > 0) {\n                count = 60 * ((N * NumSegments) - 1 - i) + get_msb64(v);\n                break;\n            }\n        }\n        count\n    }\n}\n"},"418":{"path":"/Users/ianbrighton/nargo/github.com/noir-lang/noir-bignumv0.3.3/src/runtime_bignum.nr","source":"use dep::std;\nuse crate::utils::u60_representation::U60Repr;\nuse crate::utils::arrayX::ArrayX;\nuse crate::utils::split_bits;\nuse crate::BigNum;\n\n/**\n * @brief runtime_bignum::BigNumTrait defines methods available to BigNum *if* the modulus is not known at compile time.\n *        e.g. RSA where the modulus is a witness value as it changes for every RSA signature\n *        tee `lib.nr` for a trait definition where the modulus is known at compile time\n **/\ntrait BigNumTrait {\n    fn new() -> Self;\n    fn one() -> Self;\n    fn from(limbs: [Field]) -> Self;\n    fn from_be_bytes<let NBytes: u32>(x: [u8; NBytes]) -> Self;\n    fn to_le_bytes<let NBytes: u32>(val: Self) -> [u8; NBytes];\n    fn get(self) -> [Field];\n    fn get_limb(self, idx: u64) -> Field;\n    fn set_limb(&mut self, idx: u32, value: Field);\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n    fn validate_in_range(self);\n    fn validate_quotient_in_range(self);\n    fn __is_zero(self) -> bool;\n    fn __eq(self, rhs: Self) -> bool;\n}\n\n/**\n * @brief BigNumInstanceTrait defines methods available to a runtime BigNumInstance.\n *        BigNumInstance wraps the modulus parameter (as well as a Barret reduction parameter),\n *        which is required for the majority of BigNum operations\n **/\ntrait BigNumInstanceTrait<BN> where BN: BigNumTrait {\n    fn modulus(self) -> BN;\n    fn __derive_from_seed<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BN;\n    fn eq(self, lhs: BN, rhs: BN) -> bool;\n    fn __neg(self, val: BN) -> BN;\n    fn __add(self, lhs: BN, rhs: BN) -> BN;\n    fn __sub(self, lhs: BN, rhs: BN) -> BN;\n    fn __mul(self, lhs: BN, rhs: BN) -> BN;\n    fn __div(self, lhs: BN, rhs: BN) -> BN;\n    fn __batch_invert<let M: u32>(self, x: [BN; M]) -> [BN; M];\n    fn __udiv_mod(self, numerator: BN, divisor: BN) -> (BN, BN);\n    fn __invmod(self, val: BN) -> BN;\n    fn __pow(self, val: BN, exponent: BN) -> BN;\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BN; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BN; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BN; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BN, BN);\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BN; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BN; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BN; ADD_N],\n        linear_flags: [bool; ADD_N]\n    );\n\n    fn validate_in_field(self, val: BN);\n    fn validate_gt(self, lhs: BN, rhs: BN);\n    fn assert_is_not_equal(self, lhs: BN, rhs: BN);\n    fn neg(self, val: BN) -> BN;\n    fn add(self, lhs: BN, rhs: BN) -> BN;\n    fn sub(self, lhs: BN, rhs: BN) -> BN;\n    fn mul(self, lhs: BN, rhs: BN) -> BN;\n    fn div(self, lhs: BN, rhs: BN) -> BN;\n    fn udiv_mod(self, numerator: BN, divisor: BN) -> (BN, BN);\n    fn udiv(self, numerator: BN, divisor: BN) -> BN;\n    fn umod(self, numerator: BN, divisor: BN) -> BN;\n\n}\n\n/**\n * @brief BigNumParamsTrait defines a \"field\" with which to parametrise BigNum.\n * @description The \"field\" does not need to be prime, any value *should* work (TODO: test!)\n**/\ntrait BigNumParamsTrait<let N: u32> {\n    /**\n     * @brief modulus_bits = log2(modulus) rounded up\n     **/\n    fn modulus_bits() -> u32;\n\n    fn has_multiplicative_inverse() -> bool { true }\n}\n\nstruct  BigNumInstance<let N: u32, Params> {\n    \n    /**\n     * @brief modulus: all BigNum operations are evaluated modulo this value\n     **/\n    modulus: [Field; N],\n\n    /**\n     * @brief modulus but represented in a U60Repr form\n     **/\n    modulus_u60: U60Repr<N, 2>,\n    modulus_u60_x4: U60Repr<N, 4>,\n\n    // /**\n    //  * @brief double_modulus: used when performing negations and subtractions\n    //  **/\n    double_modulus: [Field; N],\n    // /**\n    //  * @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    //  **/\n    redc_param: [Field; N],\n}\n\nimpl<let N: u32, Params> BigNum<N, Params> {\n    // some strange circular dependency problem means we need to define `new` as a member of BigNumTrait as well as a definition outside of the trait\n    // (delete this method to see. BigNumInstance methods that use BigNum::new() error out, and I can't find a way of declaring BigNum to satisfy BigNumTrait as part of the BigNumInstance definition because BigNumInstance has no contextual knowledge of the BigNum type...)\n    fn new() -> Self {\n        BigNum { limbs: [0; N] }\n    }\n    fn one() -> BigNum<N, Params> {\n        let mut result: Self = BigNum { limbs: [0; N] };\n        result.limbs[0] = 1;\n        result\n    }\n}\n\nimpl<let N: u32, Params> BigNumTrait for BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn new() -> Self {\n        BigNum::new()\n    }\n    fn one() -> Self {\n        BigNum::one()\n    }\n\n    fn from(limbs: [Field]) -> Self {\n        BigNum { limbs: limbs.as_array() }\n    }\n\n    /**\n     * @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n     * @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n     *               is precisely large enough to cover Params::modulus_bits()\n     * @param x: input byte array\n     **/\n    fn from_be_bytes<let NBytes: u32>(x: [u8; NBytes]) -> BigNum<N, Params> {\n        let num_bits = NBytes * 8;\n        let modulus_bits = Params::modulus_bits();\n        assert(num_bits >= modulus_bits);\n        assert(num_bits - modulus_bits < 8);\n        let mut result = BigNum::new();\n\n        let excess_bytes = N * 15 - NBytes;\n        let final_limb_bytes = 15 - excess_bytes;\n        let mut limb: Field = 0;\n        let mut k = 0;\n        for _j in 0..final_limb_bytes {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        result.limbs[N - 1] = limb;\n\n        for i in 1..N {\n            let mut limb: Field = 0;\n            for _j in 0..15 {\n                limb *= 256;\n                limb += x[k] as Field;\n                k += 1;\n            }\n            result.limbs[N - i - 1] = limb;\n        }\n\n        // max_bits_in_most_significant_byte should be known at comptime. if not...messy!\n        let mut max_bits_in_most_significant_byte = 8 - (num_bits - modulus_bits);\n\n        let most_significant_byte: Field = x[0] as Field;\n\n        most_significant_byte.assert_max_bit_size(max_bits_in_most_significant_byte as u32);\n        result\n    }\n\n    fn to_le_bytes<let NBytes: u32>(val: BigNum<N, Params>) -> [u8; NBytes] {\n        let nbytes = (Params::modulus_bits() / 8) + (Params::modulus_bits() % 8 != 0) as u32;\n        assert(nbytes <= NBytes);\n\n        let mut result: [u8; NBytes] = [0; NBytes];\n        for i in 0..N - 1 {\n            let limb_bytes: [u8; 15] = val.limbs[i].to_le_bytes();\n            for j in 0..15 {\n                result[i * 15 + j] = limb_bytes[j];\n            }\n        }\n        let last_limb_bytes: [u8; 15] = val.limbs[N - 1].to_le_bytes();\n        let num_last_bytes = (NBytes - (N - 1) * 15);\n        for i in 0..num_last_bytes {\n            result[(N-1) * 15 + i] = last_limb_bytes[i];\n        }\n        result\n    }\n\n    fn get(self) -> [Field] {\n        self.limbs\n    }\n    fn get_limb(self, idx: u64) -> Field {\n        self.limbs[idx]\n    }\n    fn set_limb(&mut self, idx: u32, value: Field) {\n        self.limbs[idx] = value;\n    }\n\n    /**\n     * @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n     * @description should be cheaper than using an IF statement (TODO: check!)\n     **/\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let mut result: Self = lhs;\n        for i in 0..N {\n            result.limbs[i] = (lhs.limbs[i] - rhs.limbs[i]) * predicate as Field + rhs.limbs[i];\n        }\n        result\n    }\n\n    /**\n     * @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n     **/\n    fn validate_in_range(self) {\n        for i in 0..(N - 1) {\n            self.limbs[i].assert_max_bit_size(120);\n        }\n        let final_limb_bits = Params::modulus_bits() - ((N - 1) * 120);\n        self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32);\n    }\n\n    /**\n     * @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n     * @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n     *              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n     *              Why is this?\n     *              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n     *                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n     *                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n     *              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n     *\n     *              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n     *              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n     **/\n    fn validate_quotient_in_range(self) {\n        for i in 0..(N) {\n            self.limbs[i].assert_max_bit_size(120);\n        }\n        // Note: replace magic number 6 with definition\n        let final_limb_bits = Params::modulus_bits() - ((N - 1) * 120) + 6;\n        self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32);\n    }\n\n    fn __is_zero(self) -> bool {\n        self.__is_zero_impl()\n    }\n\n    fn __eq(self, rhs: Self) -> bool {\n        self.__eq_impl(rhs)\n    }\n}\n\nimpl<let N: u32, Params> BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn from_array(limbs: [Field; N]) -> BigNum<N, Params> {\n        BigNum { limbs }\n    }\n\n    unconstrained fn __is_zero_impl(self) -> bool {\n        let mut result: bool = true;\n        for i in 0..N {\n            result = result & (self.limbs[i] == 0);\n        }\n        result\n    }\n\n    unconstrained fn __eq_impl(lhs: Self, rhs: Self) -> bool {\n        lhs.limbs == rhs.limbs\n    }\n}\n\nimpl<let N: u32, Params> BigNumInstanceTrait<BigNum<N, Params>> for BigNumInstance<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn modulus(self) -> BigNum<N, Params> {\n        BigNum { limbs: self.modulus }\n    }\n    fn __derive_from_seed<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BigNum<N, Params> {\n        self.__derive_from_seed_impl(seed)\n    }\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### U N C O N S T R A I N E D    F U N C T I O N S\n    // ### NOTE: these functions call unconstrained internal implementations because trait impl modifiers are not supported \n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    fn __neg(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__neg_impl(val)\n    }\n\n    fn __add(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__add_impl(lhs, rhs)\n    }\n\n    fn __sub(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__sub_impl(lhs, rhs)\n    }\n\n    fn __mul(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__mul_impl(lhs, rhs)\n    }\n\n    fn __div(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__div_impl(lhs, rhs)\n    }\n\n    fn __batch_invert<let M: u32>(self, x: [BigNum<N, Params>; M]) -> [BigNum<N, Params>; M] {\n        self.batch_invert_impl(x)\n    }\n\n    fn __invmod(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__invmod_impl(val)\n    }\n\n    fn __pow(self, val: BigNum<N, Params>, exponent: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__pow_impl(val, exponent)\n    }\n\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        self.__compute_quadratic_expression_impl(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        )\n    }\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### C O N S T R A I N E D    F U N C T I O N S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    /**\n     * @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n     * @description The expression is of the form (when evaluated as an integer relation):\n     *\n     * \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n     *\n     * The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n     *\n     * Note: this method requires the remainder term of the expression to be ZERO\n     * When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n     * This can be achieved by minimizing the number of degree-2 relations required.\n     *\n     * The expensive parts of this algorithm are the following:\n     *      1. evaluating the limb products required to compute `lhs * rhs`\n     *      2. applying range constraints to validate the result is 0\n     *\n     * Range constraints are needed for the following reason:\n     * When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n     * Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n     * Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n     * To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n     * (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n     * To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n     * We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n     * TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n     * I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n     * TODO: explain why we apply a 126-bit range check, this feels like a magic number\n     * (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n     * TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n     * \n     * @param lhs_terms a 2D array of BigNum\n     * @param lhs_flags a 2D array of sign flags\n     * @param rhs_terms a 2D array of BigNum\n     * @param rhs_flags a 2D array of sign flags\n     * @param linear_terms an array of BigNum\n     * @param linear_flags an array of sign flags\n     **/\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) {\n        // use an unconstrained function to compute the value of the quotient\n        let (quotient, _, borrow_flags): (BigNum<N, Params>, BigNum<N, Params>, ArrayX<Field, N, 2>) = self.__compute_quadratic_expression_with_borrow_flags(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n        // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n        quotient.validate_quotient_in_range();\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        // (should be a compile-time check...unconstrained function?)\n\n        // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n        let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut t4: [Field; N] = [0; N];\n\n        // TODO: this is super nasty as it requires a multiplication\n        let double_modulus: [Field; N] = self.double_modulus;\n        for k in 0..NUM_PRODUCTS {\n            for i in 0..N {\n                for j in 0..LHS_N {\n                    // note: if is_negative is not known at comptime this is very expensive\n                    if (lhs_flags[k][j]) {\n                        t0[k][i] -= lhs_terms[k][j].limbs[i];\n                        t0[k][i] += double_modulus[i];\n                    } else {\n                        t0[k][i] += lhs_terms[k][j].limbs[i];\n                    }\n                }\n                for j in 0..RHS_N {\n                    if (rhs_flags[k][j]) {\n                        t1[k][i] -= rhs_terms[k][j].limbs[i];\n                        t1[k][i] += double_modulus[i];\n                    } else {\n                        t1[k][i] += rhs_terms[k][j].limbs[i];\n                    }\n                }\n            }\n        }\n        for i in 0..N {\n            for j in 0..ADD_N {\n                if (linear_flags[j]) {\n                    t4[i] -= linear_terms[j].limbs[i];\n                    t4[i] += double_modulus[i];\n                } else {\n                    t4[i] += linear_terms[j].limbs[i];\n                }\n            }\n        }\n\n        // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n        // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n        // so that we can ensure that no limbs will underflow for an honest Prover\n        let mut product_limbs: ArrayX<Field, N,2> = ArrayX::new();\n        //       let fff: [Field; N] = quotient.limbs;\n        //      let mut borrow_flags: ArrayX<Field, N,2> = BigNum::get_borrow_flags3(t0, t1, t2, t3, t4, fff, self.modulus);\n\n        // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n        // TODO: this is super nasty as it requires a multiplication\n        for i in 0..N {\n            for j in 0..N {\n                for k in 0..NUM_PRODUCTS {\n                    if k == 0 {\n                        let new_term = t0[k][i] * t1[k][j] - quotient.limbs[i] * self.modulus[j];\n                        std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                        product_limbs.add_assign(i + j, new_term);\n                    } else {\n                        product_limbs.add_assign(i + j, t0[k][i] * t1[k][j]);\n                    }\n                }\n                if (NUM_PRODUCTS == 0) {\n                    product_limbs.sub_assign(i + j, quotient.limbs[i] * self.modulus[j]);\n                }\n            }\n            product_limbs.add_assign(i, t4[i]);\n        }\n\n        // each limb product represents the sum of 120-bit products.\n        // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n        // where no more than 64 limb products are summed together.\n        // TODO: check in unconstrained function that this condition is satisfied\n        // TODO: define trade-offs regarding the value of borrow_shift\n        // (the larger the value, the greater the range check that is required on product_limbs)\n        // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n        // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n        let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n        let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n\n        // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n        //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n        // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n        borrow_flags.get(0).assert_max_bit_size(1);\n        product_limbs.add_assign(0, borrow_flags.get(0) * borrow_shift);\n        for i in 1..(N + N - 2) {\n            borrow_flags.get(i).assert_max_bit_size(1);\n            product_limbs.add_assign(\n                i,\n                (borrow_flags.get(i) * borrow_shift - borrow_flags.get(i - 1) * borrow_carry)\n            );\n        }\n        product_limbs.sub_assign(N + N - 2, borrow_flags.get(N + N - 3) * borrow_carry);\n\n        // Final step: Validate `product_limbs` represents the integer value `0`\n        // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n        // i.e. we need to do the following for each limb `i`:\n        //      1. validate the limb's low-120 bits equals zero\n        //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n        //      3. add the carry into limb `i+1`\n        // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n        // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n        // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n        //  where k is the number of bits in the prime field)\n        // We then add the result into the next limb and repeat.\n        let hi_shift: Field = 0x1000000000000000000000000000000;\n        let hi_downshift: Field = 1 / hi_shift;\n        for i in 0..N + N - 2 {\n            product_limbs.mul_assign(i, hi_downshift);\n            std::as_witness(product_limbs.get(i));\n            product_limbs.get(i).assert_max_bit_size(126); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n            product_limbs.add_assign(i + 1, product_limbs.get(i));\n        }\n        // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n        assert(product_limbs.get(N + N - 2) == 0);\n    }\n\n    fn validate_in_field(self, val: BigNum<N, Params>) {\n        // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n        let mut p_minus_self: [Field; N] = [0; N];\n        let modulus: [Field; N] = self.modulus;\n        for i in 0..N {\n            p_minus_self[i] = modulus[i] - val.limbs[i];\n        }\n        let borrow_flags = self.__validate_in_field_compute_borrow_flags(val);\n        let two_pow_120: Field = 0x1000000000000000000000000000000;\n        p_minus_self[0] += borrow_flags[0] as Field * two_pow_120;\n        for i in 1..N - 1 {\n            p_minus_self[i] += (borrow_flags[i] as Field * two_pow_120 - borrow_flags[i-1] as Field);\n        }\n        p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n        let mut compare = val;\n        compare.limbs = p_minus_self;\n        compare.validate_in_range();\n    }\n\n    /**\n     * @brief Validate self != other\n     * @details If A == B, then A == B mod N.\n     *          We can efficiently evaluate A == B mod N where N = circuit modulus\n     *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n     *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n     *          (todo: compute how tiny)\n     **/\n    fn assert_is_not_equal(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) {\n        let mut l: Field = 0;\n        let mut r: Field = 0;\n        let mut modulus_mod_n: Field = 0;\n        let mut two_pow_120: Field = 0x1000000000000000000000000000000;\n        let modulus = self.modulus;\n        for i in 0..N {\n            l *= two_pow_120;\n            r *= two_pow_120;\n            modulus_mod_n *= two_pow_120;\n            l += lhs.limbs[N - i - 1];\n            r += rhs.limbs[N - i - 1] ;\n            modulus_mod_n += modulus[N - i - 1];\n        }\n\n        // lhs can be either X mod N or P + X mod N\n        // rhs can be either Y mod N or P + Y mod N\n        // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n        let mut diff = l - r;\n        let mut target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n        assert(target != 0, \"asssert_is_not_equal fail\");\n    }\n\n    fn eq(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> bool {\n        let diff = self.sub(lhs, rhs);\n        // if self == other, possible values of `diff` will be `p` or `0`\n        // (the subtract operator constrains diff to be < ceil(log(p)))\n        // TODO: can do this more efficiently via witngen in unconstrained functions?\n        let mut is_equal_modulus: bool = true;\n        let mut is_equal_zero: bool = true;\n        for i in 0..N {\n            is_equal_modulus = is_equal_modulus & (diff.limbs[i] == self.modulus[i]);\n            is_equal_zero = is_equal_zero & (diff.limbs[i] == 0);\n        }\n        is_equal_modulus | is_equal_zero\n    }\n\n    fn neg(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = self.__neg_with_flags(val);\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let result_limb = modulus[0] - val.limbs[0] - result.limbs[0] + (borrow_flags[0] as Field * borrow_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] - val.limbs[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + (borrow_flags[i] as Field * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = modulus[N - 1] - val.limbs[N - 1] - result.limbs[N - 1] - borrow_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n\n    fn add(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) = self.__add_with_flags(lhs, rhs);\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut subtrahend: [Field; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let result_limb = lhs.limbs[0] + rhs.limbs[0] - subtrahend[0] - result.limbs[0]\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] + rhs.limbs[i]\n                - subtrahend[i]\n                - result.limbs[i]\n                - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] + rhs.limbs[N - 1]\n            - subtrahend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n\n    // validate that lhs - rhs does not underflow i.e. lhs > rhs\n    fn validate_gt(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) {\n        // so we do... p - x - r = 0 and there might be borrow flags\n\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags) = self.__validate_gt_remainder(lhs, rhs);\n\n        result.validate_in_range();\n\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut addend: [Field; N] = [0; N];\n        let result_limb = lhs.limbs[0] - rhs.limbs[0] + addend[0] - result.limbs[0] - 1\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] - rhs.limbs[i] + addend[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] - rhs.limbs[N - 1] + addend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n    }\n\n    fn sub(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) = self.__sub_with_flags(lhs, rhs);\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut addend: [Field; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n        let result_limb = lhs.limbs[0] - rhs.limbs[0] + addend[0] - result.limbs[0]\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] - rhs.limbs[i] + addend[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] - rhs.limbs[N - 1] + addend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let result = self.__mul(lhs, rhs);\n        self.evaluate_quadratic_expression([[lhs]], [[false]], [[rhs]], [[false]], [result], [true]);\n        result\n    }\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        assert(\n            Params::has_multiplicative_inverse(), \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\"\n        );\n        let result = self.__div(lhs, rhs);\n        self.evaluate_quadratic_expression([[result]], [[false]], [[rhs]], [[false]], [lhs], [true]);\n        result\n    }\n\n    /**\n     * @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n     *\n     * i.e. 1. floor(numerator / divisor) = quotient\n     *      2. numerator % divisor = remainder\n     *      3. divisor * quotient + remainder = numerator\n     **/\n    fn __udiv_mod(\n        self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        self.__udiv_mod_impl(numerator, divisor)\n    }\n    /**\n     * @brief udiv_mod performs integer division between numerator, divisor \n     *\n     * i.e. 1. floor(numerator / divisor) = quotient\n     *      2. numerator % divisor = remainder\n     *      3. divisor * quotient + remainder = numerator\n     **/\n    fn udiv_mod(\n        self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let (quotient, remainder) = BigNumInstance::__udiv_mod_impl(self, numerator, divisor);\n\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        self.evaluate_quadratic_expression(\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false]\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        self.validate_gt(divisor, remainder);\n        (quotient, remainder)\n    }\n\n    /**\n     * @brief udiv_mod performs integer division between numerator, divisor \n     *\n     * i.e. return param is floor(numerator / divisor)\n     **/\n    fn udiv(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.udiv_mod(numerator, divisor).0\n    }\n\n    /**\n     * @brief udiv_mod performs integer modular reduction\n     *\n     * i.e. 1. numerator % divisor = return value\n     **/\n    fn umod(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.udiv_mod(numerator, divisor).1\n    }\n}\n\nimpl<let N: u32, Params> BigNumInstance<N, Params> where Params: BigNumParamsTrait<N> {\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### C  O  N  S  T  R  U  C  T  O  R  S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    fn new(modulus: [Field; N], redc_param: [Field; N]) -> Self {\n        Self {\n            redc_param,\n            modulus,\n            modulus_u60: U60Repr::from(modulus),\n            modulus_u60_x4: U60Repr::from(modulus),\n            double_modulus: get_double_modulus(modulus)\n        }\n    }\n\n    unconstrained fn __derive_from_seed_impl<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BigNum<N, Params> {\n        let mut rolling_seed = seed;\n\n        let mut to_reduce: ArrayX<Field, N, 2> = ArrayX { segments: [[0; N], [0; N]] };\n\n        let mut double_modulus_bits = Params::modulus_bits() * 2;\n        let mut double_modulus_bytes = (double_modulus_bits) / 8 + (double_modulus_bits % 8 != 0) as u32;\n\n        let mut last_limb_bytes = double_modulus_bytes % 15;\n        if (last_limb_bytes == 0) {\n            last_limb_bytes = 15;\n        }\n        let mut last_limb_bits = double_modulus_bits % 8;\n        if (last_limb_bits == 0) {\n            last_limb_bits = 8;\n        }\n\n        for i in 0..(N - 1) {\n            let hash: [u8; 32] = std::hash::sha256(rolling_seed);\n            let mut lo: Field = 0;\n            let mut hi: Field = 0;\n            for j in 0..15 {\n                hi *= 256;\n                lo *= 256;\n\n                if (i < 2 * N - 2) {\n                    lo += hash[j + 15] as Field;\n                    hi += hash[j] as Field;\n                }\n            }\n            to_reduce.set(2 * i, lo);\n            to_reduce.set(2 * i + 1, hi);\n            rolling_seed[0] += 1;\n        }\n\n        {\n            let hash: [u8; 32] = std::hash::sha256(rolling_seed);\n            let mut hi: Field = 0;\n            for j in 0..(last_limb_bytes - 1) {\n                hi *= 256;\n                hi += hash[j] as Field;\n            }\n            hi *= 256;\n            let last_byte = hash[last_limb_bytes - 1];\n            let mask = (1 as u64 << (last_limb_bits) as u8) - 1;\n            let last_bits = last_byte as u64 & mask;\n            hi += last_bits as Field;\n            to_reduce.set(2 * N - 2, hi);\n        }\n\n        let (_, remainder) = __barrett_reduction(\n            to_reduce,\n            self.redc_param,\n            Params::modulus_bits(),\n            self.modulus,\n            self.modulus_u60_x4\n        );\n        let mut result = BigNum::new();\n        result.limbs = remainder;\n        result\n    }\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### U N C O N S T R A I N E D    F U N C T I O N S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    unconstrained fn __validate_in_field_compute_borrow_flags(self: Self, val: BigNum<N, Params>) -> [bool; N] {\n        let mut flags: [bool; N] = [false; N];\n        let modulus: [Field; N] = self.modulus;\n        flags[0] = modulus[0].lt(val.limbs[0]);\n        for i in 1..N - 1 {\n            flags[i] = modulus[i].lt(val.limbs[i] + flags[i - 1] as Field);\n        }\n        flags\n    }\n\n    unconstrained fn __pow_impl(self, val: BigNum<N, Params>, exponent: BigNum<N, Params>) -> BigNum<N, Params> {\n        let x: U60Repr<N, 2> = U60Repr::from(exponent.limbs);\n\n        let num_bits = Params::modulus_bits() + 1;\n\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n\n        for i in 0..num_bits {\n            accumulator = self.__mul(accumulator, accumulator);\n            if x.get_bit(num_bits - i - 1) {\n                accumulator = self.__mul(accumulator, val);\n            }\n        }\n        accumulator\n    }\n\n    unconstrained fn __mul_with_quotient(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let mut mul: ArrayX<Field, N, 2> = ArrayX::new();\n        for i in 0..N {\n            for j in 0..N {\n                mul.add_assign(i + j, lhs.limbs[i] * rhs.limbs[j]);\n            }\n        }\n        let (q, r) = __barrett_reduction(\n            mul.__normalize_limbs(N + N),\n            self.redc_param,\n            Params::modulus_bits(),\n            self.modulus,\n            self.modulus_u60_x4\n        );\n\n        let mut quotient = BigNum::from_array(q);\n        let mut remainder = BigNum::from_array(r);\n        (quotient, remainder)\n    }\n\n    unconstrained fn __mul_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let (_, b) = self.__mul_with_quotient(lhs, rhs);\n        b\n    }\n\n    unconstrained fn __add_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let y_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let mut z_u60 = x_u60 + y_u60;\n\n        if z_u60.gte(self.modulus_u60) {\n            z_u60 = z_u60 - self.modulus_u60;\n        }\n        let mut result = BigNum::from_array(U60Repr::into(z_u60));\n        result\n    }\n\n    /**\n     * @brief given an input `x`, compute `2p - x` (unconstrained)\n     *\n     * @description we subtract the input from double the modulus, because all constrained BigNum operations\n     *              only guarantee that the output is in the range [0, ceil(log2(p))].\n     *              I.E. the input may be larger than the modulus `p`.\n     *              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n     *              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n     *              because such a check is expensive and usually unneccesary.\n     */\n    unconstrained fn __neg_impl(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        let f: [Field; N] = val.limbs;\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(f);\n        let mut result = BigNum::from_array(U60Repr::into(self.modulus_u60 - x_u60));\n        result\n    }\n\n    unconstrained fn __add_with_flags(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N], bool) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n        let add_u60 = a_u60 + b_u60;\n\n        let overflow = add_u60.gte(self.modulus_u60);\n\n        let mut subtrahend_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n\n        if overflow {\n            subtrahend_u60 = self.modulus_u60;\n        }\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for j in 0..2 {\n            for i in 0..N {\n                let mut add_term: u64 = a_u60.limbs.segments[j][i] + b_u60.limbs.segments[j][i] + carry_in;\n                carry = (add_term >= 0x1000000000000000) as u64;\n                add_term -= (carry as u64 * 0x1000000000000000);\n                result_u60.limbs.segments[j][i] = add_term;\n                carry_in = carry as u64;\n                borrow = ((subtrahend_u60.limbs.segments[j][i] + borrow_in) > result_u60.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + result_u60.limbs.segments[j][i]\n                    - subtrahend_u60.limbs.segments[j][i]\n                    - borrow_in;\n                result_u60.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n\n                if ((j * N + i) & 1 == 1) {\n                    let idx = (j * N + i - 1) / 2;\n                    if (carry & borrow == 1) {\n                        carry = 0;\n                        borrow = 0;\n                    }\n                    carry_flags[idx] = carry as bool;\n                    borrow_flags[idx] = borrow as bool;\n                }\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n\n        (result, carry_flags, borrow_flags, overflow)\n    }\n\n    unconstrained fn __validate_gt_remainder(\n        _: Self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N]) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let mut b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let underflow = b_u60.gte(a_u60);\n        b_u60 += U60Repr::one();\n        assert(underflow == false, \"BigNum::validate_gt check fails\");\n        let mut addend_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for j in 0..2 {\n            for i in 0..N {\n                let mut add_term: u64 = a_u60.limbs.segments[j][i] + addend_u60.limbs.segments[j][i] + carry_in;\n                carry = (add_term >= 0x1000000000000000) as u64;\n                add_term -= (carry as u64 * 0x1000000000000000);\n                result_u60.limbs.segments[j][i] = add_term;\n                carry_in = carry as u64;\n                borrow = ((b_u60.limbs.segments[j][i] + borrow_in) > result_u60.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + result_u60.limbs.segments[j][i]\n                    - b_u60.limbs.segments[j][i]\n                    - borrow_in;\n                result_u60.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n\n                if ((j * N + i) & 1 == 1) {\n                    let idx = (j * N + i - 1) / 2;\n                    if (carry & borrow == 1) {\n                        carry = 0;\n                        borrow = 0;\n                    }\n                    carry_flags[idx] = carry as bool;\n                    borrow_flags[idx] = borrow as bool;\n                }\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, carry_flags, borrow_flags)\n    }\n\n    unconstrained fn __sub_with_flags(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N], bool) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let underflow = b_u60.gte(a_u60 + U60Repr::one());\n\n        let mut addend_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n\n        if underflow {\n            addend_u60 = self.modulus_u60;\n        }\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for j in 0..2 {\n            for i in 0..N {\n                let mut add_term: u64 = a_u60.limbs.segments[j][i] + addend_u60.limbs.segments[j][i] + carry_in;\n                carry = (add_term >= 0x1000000000000000) as u64;\n                add_term -= (carry as u64 * 0x1000000000000000);\n                result_u60.limbs.segments[j][i] = add_term;\n                carry_in = carry as u64;\n                borrow = ((b_u60.limbs.segments[j][i] + borrow_in) > result_u60.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + result_u60.limbs.segments[j][i]\n                    - b_u60.limbs.segments[j][i]\n                    - borrow_in;\n                result_u60.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n\n                if ((j * N + i) & 1 == 1) {\n                    let idx = (j * N + i - 1) / 2;\n                    if (carry & borrow == 1) {\n                        carry = 0;\n                        borrow = 0;\n                    }\n                    carry_flags[idx] = carry as bool;\n                    borrow_flags[idx] = borrow as bool;\n                }\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, carry_flags, borrow_flags, underflow)\n    }\n\n    unconstrained fn __neg_with_flags(self, val: BigNum<N, Params>) -> (BigNum<N, Params>, [bool; N]) {\n        let f: [Field; N] = val.limbs;\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(f);\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        let mut borrow_flags: [bool; N] = [false; N];\n        for j in 0..2 {\n            for i in 0..N {\n                borrow = ((x_u60.limbs.segments[j][i] + borrow_in) > self.modulus_u60.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + self.modulus_u60.limbs.segments[j][i]\n                    - x_u60.limbs.segments[j][i]\n                    - borrow_in;\n                result_u60.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n                if ((j * N + i) & 1 == 1) {\n                    let idx = (j * N + i - 1) / 2;\n                    borrow_flags[idx] = borrow as bool;\n                }\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, borrow_flags)\n    }\n\n    /**\n     * @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n     * @description see `__neg` for why we use 2p instead of p\n     **/\n    unconstrained fn __sub_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__add(lhs, self.__neg(rhs))\n    }\n\n    unconstrained fn __invmod_impl(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        let one: BigNum<N, Params> = BigNum::one();\n        let one_u60: U60Repr<N, 2> = U60Repr::from(one.limbs);\n        let exponent = self.modulus_u60.sub(one_u60.add(one_u60));\n        let mut result = BigNum::from_array(U60Repr::into(exponent));\n        self.__pow(val, result)\n    }\n\n    unconstrained fn batch_invert_impl<let M: u32>(self, x: [BigNum<N, Params>; M]) -> [BigNum<N, Params>; M] {\n        // TODO: ugly! Will fail if input slice is empty\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n        let mut result: [BigNum<N, Params>; M] = [BigNum::new(); M];\n        let mut temporaries: [BigNum<N, Params>] = &[];\n        for i in 0..x.len() {\n            temporaries = temporaries.push_back(accumulator);\n            if (x[i].__is_zero() == false) {\n                accumulator = self.__mul(accumulator, x[i]);\n            }\n        }\n\n        accumulator = self.__invmod(accumulator);\n        let mut T0: BigNum<N, Params> = BigNum::new();\n        T0.limbs = [0; N];\n        for i in 0..x.len() {\n            let idx = x.len() - 1 - i;\n            if (x[idx].__is_zero() == false) {\n                T0 = self.__mul(accumulator, temporaries[idx]);\n                accumulator = self.__mul(accumulator, x[idx]);\n                result[idx] = T0;\n            }\n        }\n        result\n    }\n\n    unconstrained fn batch_invert_slice_impl(self, x: [BigNum<N, Params>]) -> [BigNum<N, Params>] {\n        // TODO: ugly! Will fail if input slice is empty\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n        let mut result: [BigNum<N, Params>] = [BigNum::new()];\n        let mut temporaries: [BigNum<N, Params>] = &[];\n        for i in 0..x.len() {\n            temporaries = temporaries.push_back(accumulator);\n            if (x[i].__is_zero() == false) {\n                accumulator = self.__mul(accumulator, x[i]);\n            }\n            result = result.push_back(BigNum::new());\n        }\n\n        accumulator = self.__invmod(accumulator);\n        let mut T0: BigNum<N, Params> = BigNum::new();\n        T0.limbs = [0; N];\n        for i in 0..x.len() {\n            let idx = x.len() - 1 - i;\n            if (x[idx].__is_zero() == false) {\n                T0 = self.__mul(accumulator, temporaries[idx]);\n                accumulator = self.__mul(accumulator, x[idx]);\n                result[idx] = T0;\n            }\n        }\n        result\n    }\n\n    unconstrained fn __div_impl(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        let t0 = self.__invmod(divisor);\n        self.__mul(numerator, t0)\n    }\n\n    /**\n     * @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n     **/\n    // NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n    // To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n    // We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n    // Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n    // Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\n    unconstrained fn __add_linear_expression<let M: u32>(\n        self,\n        x: [BigNum<N, Params>; M],\n        flags: [bool; M]\n    ) -> ([Field; N]) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mut sum: [Field; N] = [0; N];\n        // TODO: ugly! Will fail if input array is empty\n        let modulus2: [Field;N] = self.double_modulus;\n        for i in 0..M {\n            if (flags[i]) {\n                for j in 0..N {\n                    sum[j] = sum[j] + modulus2[j] - x[i].limbs[j];\n                    assert(x[i].limbs[j].lt(modulus2[j]));\n                }\n            } else {\n                for j in 0..N {\n                    sum[j] = sum[j] + x[i].limbs[j];\n                }\n            }\n        }\n        // problem if we normalize when used in computing quotient\n        sum\n        //   let result_p: ArrayX<Field, N, 1> = BigNum::__normalize_limbs(ArrayX::from_array(lhs_sum_p), N);\n        //  let result_n: ArrayX<Field, N, 1> = BigNum::__normalize_limbs(ArrayX::from_array(lhs_sum_n), N);\n        //  (result_p.segments[0], result_n.segments[0])\n    }\n\n    /**\n     * @brief computes the limb products of a quadratic expression\n     * @details see __compute_quadratic_expression_with_borrow_flags for full description\n     **/\n    unconstrained fn __compute_quadratic_expression_product<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> ArrayX<Field, N, 2> {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mut lhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut rhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut add: [Field; N] = [0; N];\n\n        for i in 0..NUM_PRODUCTS {\n            lhs[i] = self.__add_linear_expression(lhs_terms[i], lhs_flags[i]);\n            rhs[i] = self.__add_linear_expression(rhs_terms[i], rhs_flags[i]);\n        }\n\n        let add: [Field; N] = self.__add_linear_expression(linear_terms, linear_flags);\n\n        let mut mulout: ArrayX<Field, N,2> = ArrayX::new();\n\n        for i in 0..N {\n            for j in 0..N {\n                for k in 0..NUM_PRODUCTS {\n                    mulout.add_assign(i + j, (lhs[k][i] * rhs[k][j]));\n                }\n            }\n            mulout.add_assign(i, add[i]);\n        }\n        mulout\n    }\n\n    /**\n     * @brief computes the quotient/remainder of a quadratic expression\n     * @details see __compute_quadratic_expression_with_borrow_flags for full description\n     **/\n    unconstrained fn __compute_quadratic_expression_impl<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mulout = self.__compute_quadratic_expression_product(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        let relation_result: ArrayX<Field, N, 2> = mulout.__normalize_limbs(N + N);\n\n        // TODO: ugly! Will fail if input slice is empty\n        let k  = Params::modulus_bits();\n\n        let (quotient, remainder) = __barrett_reduction(\n            relation_result,\n            self.redc_param,\n            k,\n            self.modulus,\n            self.modulus_u60_x4\n        );\n\n        let mut q = BigNum::from_array(quotient);\n        let mut r = BigNum::from_array(remainder);\n        (q, r)\n    }\n\n    /**\n     * @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n     * @description The expression is of the form:\n     *\n     * \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n     *\n     * The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n     *\n     * When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n     * This can be achieved by minimizing the number of degree-2 relations required.\n     *\n     * The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n     * For example, when computing the product a * b - q * p = 0, it is possible that:\n     *      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n     *      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n     * In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n     * In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n     *\n     * @param lhs_terms a 2D array of BigNum\n     * @param lhs_flags a 2D array of sign flags\n     * @param rhs_terms a 2D array of BigNum\n     * @param rhs_flags a 2D array of sign flags\n     * @param linear_terms an array of BigNum\n     * @param linear_flags an array of sign flags\n     **/\n    unconstrained fn __compute_quadratic_expression_with_borrow_flags<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>, ArrayX<Field, N, 2>) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n\n        let mut mulout_p = self.__compute_quadratic_expression_product(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        let mut mulout_n: ArrayX<Field, N, 2> = ArrayX::new();\n\n        let relation_result: ArrayX<Field, N, 2> = mulout_p.__normalize_limbs(N + N);\n        let modulus: [Field; N] = self.modulus;\n        let (quotient, remainder) = __barrett_reduction(\n            relation_result,\n            self.redc_param,\n            Params::modulus_bits(),\n            modulus,\n            self.modulus_u60_x4\n        );\n        assert(remainder == [0; N]);\n\n        for i in 0..N {\n            for j in 0..N {\n                mulout_n.add_assign(i + j, quotient[i] * modulus[j]);\n            }\n        }\n\n        // compute borrow flags from mulout_p and mulout_n\n        let mut borrow_flags: ArrayX<Field, N, 2> = ArrayX::new();\n        let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n        let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n        let two_pow_120: Field = 0x1000000000000000000000000000000;\n        let downshift: Field = 1 / two_pow_120;\n\n        // determine whether we need to borrow from more significant limbs.\n        // initial limb is \"simple\" comparison operation\n        // TODO: check how expensive `lt` operator is w.r.t. witness generation\n        borrow_flags.set(0, mulout_p.get(0).lt(mulout_n.get(0)) as Field);\n        // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n        // and there is nothing to borrow against for the final limb.\n        let mut hi_bits = (mulout_p.get(0) - mulout_n.get(0) + (borrow_flags.get(0) * borrow_shift)) * downshift;\n        for i in 1..(N + N - 2) {\n            // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n            // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n            //     * downshift;\n            mulout_p.add_assign(i, hi_bits);\n\n            // determine whether negative limb values are greater than positive limb values\n            let underflow: Field = mulout_p.get(i).lt(mulout_n.get(i) + (borrow_flags.get(i - 1) * borrow_carry)) as Field;\n            borrow_flags.set(i, underflow);\n\n            hi_bits = (mulout_p.get(i) - mulout_n.get(i) + (borrow_flags.get(i) * borrow_shift)\n                - (borrow_flags.get(i - 1) * borrow_carry)) * downshift;\n        }\n\n        let mut q = BigNum::from_array(quotient);\n        let mut r = BigNum::from_array(remainder);\n        (q, r, borrow_flags)\n    }\n\n    unconstrained fn __udiv_mod_impl(\n        _: Self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let mut quotient_u60: U60Repr<N, 2> = U60Repr::from([0; N]);\n        let mut remainder_u60: U60Repr<N, 2> = U60Repr::from(numerator.limbs);\n\n        let mut divisor_u60: U60Repr<N, 2> = U60Repr::from(divisor.limbs);\n        let b = divisor_u60;\n\n        let mut bit_difference = remainder_u60.get_msb() - divisor_u60.get_msb();\n\n        let mut accumulator_u60: U60Repr<N, 2> = U60Repr::one();\n        divisor_u60 = divisor_u60.shl(bit_difference);\n        accumulator_u60 = accumulator_u60.shl(bit_difference);\n\n        if (divisor_u60.gte(remainder_u60 + U60Repr::one())) {\n            divisor_u60.shr1();\n            accumulator_u60.shr1();\n        }\n        for _ in 0..(N * 120) {\n            if (remainder_u60.gte(b) == false) {\n                break;\n            }\n\n            // we've shunted 'divisor' up to have the same bit length as our remainder.\n            // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n            if (remainder_u60.gte(divisor_u60)) {\n                remainder_u60 -= divisor_u60;\n                // we can use OR here instead of +, as\n                // accumulator is always a nice power of two\n                quotient_u60 = quotient_u60 + accumulator_u60;\n            }\n            divisor_u60.shr1(); // >>= 1;\n            accumulator_u60.shr1(); //  >>= 1;\n        }\n\n        (\n            BigNum::from_array(U60Repr::into(quotient_u60)), BigNum::from_array(U60Repr::into(remainder_u60))\n        )\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [Field; N]) -> [Field; N] {\n    let TWO_POW_120: Field = 0x1000000000000000000000000000000;\n    let m: U60Repr<N, 2> = U60Repr::from(modulus);\n    let mut result: [Field; N] = U60Repr::into(m + m);\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n\nunconstrained fn __barrett_reduction<let N: u32>(\n    x: ArrayX<Field, N, 2>,\n    redc_param: [Field; N],\n    k: u32,\n    modulus: [Field; N],\n    modulus_u60: U60Repr<N, 4>\n) -> ([Field; N], [Field; N]) {\n    let mut mulout: ArrayX<Field, N, 3>  = ArrayX { segments: [[0; N]; 3] };\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout.add_assign(i + j, x.get(i) * redc_param[j]);\n        }\n    }\n    mulout = mulout.__normalize_limbs(3 * N - 1);\n    let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n    let mut quotient_u60 = mulout_u60.shr((k + k));\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient: ArrayX<Field, N, 2> = quotient_u60.into_arrayX();\n\n    // quotient_mul_modulus can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus: ArrayX<Field, N, 2>  = ArrayX { segments: [[0; N]; 2] };\n    let mut quotient_mul_modulus_normalized: ArrayX<Field, N, 2>  = ArrayX { segments: [[0; N]; 2] };\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus.add_assign(i + j, partial_quotient.get(i) * modulus[j]);\n        }\n    }\n\n    for i in 0..(N + N) {\n        let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus.get(i));\n        quotient_mul_modulus_normalized.set(i, lo);\n        // TODO: what is faster, leaving this if statement in or out?\n        // (array is size-1 too large so we can tolerate adding 0 into max element)\n        if (i + 1 < N + N) {\n            quotient_mul_modulus.add_assign(i + 1, hi);\n        }\n    }\n    let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n\n    let x_u60 : U60Repr<N, 4> = U60Repr::new(x);\n    let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    } else {}\n\n    let q: [Field; N] = U60Repr::into(quotient_u60);\n    let r: [Field; N] = U60Repr::into(remainder_u60);\n\n    (q, r)\n}\n"},"55":{"path":"std/ops/arith.nr","source":"// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"6":{"path":"std/cmp.nr","source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(s, quote { Eq }, signature, for_each_field, quote { & }, body)\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"},"68":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c: [u8; 17]= b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"71":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/zimburse/src/types/uint_note.nr","source":"use dep::aztec::{\n    prelude::{NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, keys::getters::get_nsk_app, macros::notes::note\n};\n\n#[note]\npub struct UintNote {\n    // The integer stored by the note\n    value: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n\nimpl NullifiableNote for UintNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for UintNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}"},"72":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/zimburse/src/types/definition.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\nuse dep::compressed_string::CompressedString;\n\nglobal DEFINITION_LENGTH: u32 = 4;\nglobal TITLE_LENGTH: u32 = 60;\nglobal TITLE_SERIALIZED_LENGTH: u32 = 2;\n\npub struct Definition {\n    admin: AztecAddress,\n    usdc: AztecAddress,\n    title: CompressedString<TITLE_SERIALIZED_LENGTH, TITLE_LENGTH>\n}\n\nimpl Serialize<DEFINITION_LENGTH> for Definition {\n    fn serialize(self: Self) -> [Field; DEFINITION_LENGTH] {\n        [self.admin.to_field(), self.usdc.to_field(), self.title.value[0], self.title.value[1]]\n    }\n}\n\nimpl Deserialize<DEFINITION_LENGTH> for Definition {\n    fn deserialize(fields: [Field; DEFINITION_LENGTH]) -> Self {\n        Definition {\n            admin: AztecAddress::from_field(fields[0]),\n            usdc: AztecAddress::from_field(fields[1]),\n            title: CompressedString { value: [fields[2], fields[3]] }\n        }\n    }\n}\n\nimpl Definition {\n    /**\n     * Create a new definition for a Z-Imburse escrow contract with the uncompressed string\n     *\n     * @param admin The address of the admin of the contract\n     * @param usdc The address of the USDC token\n     * @param title The title of the contract as a string of max length 60\n     * @return The new definition\n     */\n    pub fn new(admin: AztecAddress, usdc: AztecAddress, title: str<TITLE_LENGTH>) -> Self {\n        Definition { admin, usdc, title: CompressedString::from_string(title) }\n    }\n\n    /**\n     * Return the bytes of the title to display as a string\n     *\n     * @return The title as a string\n     */\n    pub fn title_as_string(self) -> [u8; TITLE_LENGTH] {\n        self.title.to_bytes()\n    }\n}\n"},"74":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/zimburse/src/types/recurring_entitlement_note.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator};\nuse dep::aztec::{note::utils::compute_note_hash_for_nullify, oracle::unsafe_rand::unsafe_rand};\nuse dep::compressed_string::CompressedString;\nuse dep::aztec::macros::notes::note;\nuse dep::aztec::prelude::{NoteHeader, NullifiableNote, PrivateContext};\nuse dep::aztec::keys::getters::get_nsk_app;\n\n// unique ids for each verifier type\nmod HOSTING_VERIFIER_TYPE {\n    global LINODE: u8 = 1; // supported\n    global HEROKU: u8 = 2; // todo: supported\n    global AWS: u8 = 3; // todo: supported\n    global GCP: u8 = 4; // not supported in mvp\n    global AZURE: u8 = 5; // not supported in mvp\n    global HETZNER: u8 = 6; // not supported in mvp\n    global DIGITAL_OCEAN: u8 = 7; // not supported in mvp\n}\n\n// trait OwnedNote {\n//     fn new(\n//         owner: AztecAddress,\n//         external_nullifier_hash: Field,\n//         npk_m_hash: Field,\n//         max_value: U128,\n//         verifier_type: u8,\n//     ) -> Self;\n// }\n\ntrait OwnedNote {\n    fn new(\n        owner: AztecAddress,\n        npk_m_hash: Field,\n        max_value: U128,\n    ) -> Self;\n}\n\n#[note]\npub struct RecurringEntitlementNote {\n    // the user that is allowed to use this entitlement\n    owner: AztecAddress,\n    // // the external nullifier that the admin can use to nullify the note\n    // external_nullifier_hash: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // the maximum value that can be withdrawn from the escrow using this entitlement\n    max_value: U128,\n    // // the type of email verifier that should be used for this entitlement\n    // verifier_type: u8,\n    // random entropy to make the note private\n    randomness: Field,\n}\n\nimpl NullifiableNote for RecurringEntitlementNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for RecurringEntitlementNote {\n    fn eq(self, other: Self) -> bool {\n        (self.owner == other.owner)\n            & (self.max_value == other.max_value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for RecurringEntitlementNote {\n    // fn new(\n    //     owner: AztecAddress,\n    //     external_nullifier_hash: Field,\n    //     npk_m_hash: Field,\n    //     max_value: U128,\n    //     verifier_type: u8,\n    //     randomness: Field\n    // ) -> Self {\n    //     Self {\n    //         owner,\n    //         external_nullifier_hash,\n    //         npk_m_hash,\n    //         max_value,\n    //         verifier_type,\n    //         randomness: unsafe_rand()\n    //         header: NoteHeader::empty()\n    //     }\n    // }\n    fn new(\n        owner: AztecAddress,\n        npk_m_hash: Field,\n        max_value: U128,\n    ) -> Self {\n        Self {\n            owner,\n            npk_m_hash,\n            max_value,\n            randomness: unsafe { unsafe_rand() },\n            header: NoteHeader::empty()\n        }\n    }\n}"},"77":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/zimburse/src/main.nr","source":"use dep::aztec::macros::aztec;\n\nmod constants;\nmod types;\n// mod date_parser;\n\n#[aztec]\ncontract ZImburse {\n    use dep::aztec::prelude::{AztecAddress, PrivateImmutable, PrivateSet, SharedImmutable, Map};\n    use dep::aztec::encrypted_logs::encrypted_note_emission::encode_and_encrypt_note;\n    use dep::aztec::macros::{storage::storage, functions::{private, public, view, initializer}};\n    use dep::aztec::keys::getters::get_public_keys;\n    use dep::address_note::address_note::AddressNote;\n    use dep::aztec::note::note_getter_options::NoteGetterOptions;\n    use dep::zimburse_verifiers::{\n        constants::{MAX_EMAIL_BODY_LENGTH, MAX_EMAIL_HEADER_LENGTH},\n        linode::verify_linode_billing_receipt,\n        zkemail::KEY_LIMBS_2048\n    };\n    \n    use crate::types::definition::{Definition, TITLE_LENGTH};\n    use crate::types::recurring_entitlement_note::RecurringEntitlementNote;\n    // use dep::aztec::macros::{storage::storage, functions::{private, initializer}};\n    use dep::token::Token;\n\n    #[storage]\n    struct Storage<Context> {\n        definition: SharedImmutable<Definition, Context>,\n        entitlements: Map<AztecAddress, PrivateSet<RecurringEntitlementNote, Context>, Context>\n    }\n\n\n    /**\n     * Initialize the Z-Imburse contract by setting the owner and USDC token.\n     *\n     * @param usdc_token The address of the USDC token\n     */\n    #[public]\n    #[initializer]\n    fn constructor(usdc_token: AztecAddress, title: str<TITLE_LENGTH>) {\n        let definition = Definition::new(context.msg_sender(), usdc_token, title);\n        storage.definition.initialize(definition);\n    }\n\n\n    #[private]\n    fn give_entitlement(to: AztecAddress, amount: Field) {\n        let recipient = get_public_keys(to);\n        let mut entitlement: RecurringEntitlementNote = RecurringEntitlementNote::new(to, recipient.npk_m.hash(), U128::from_integer(amount));\n        storage.entitlements.at(to).insert(&mut entitlement).emit(\n            encode_and_encrypt_note(&mut context, context.msg_sender(), to)\n        );\n    }\n\n    #[private]\n    fn redeem_linode_entitlement(\n        // email inputs\n        body: [u8; MAX_EMAIL_BODY_LENGTH],\n        body_hash_index: u32,\n        body_length: u32,\n        header: [u8; MAX_EMAIL_HEADER_LENGTH],\n        header_length: u32,\n        pubkey: [Field; KEY_LIMBS_2048],\n        pubkey_redc: [Field; KEY_LIMBS_2048],\n        signature: [Field; KEY_LIMBS_2048],\n        from_index: u32,\n        subject_index: u32,\n        amount_index: u32,\n        amount_length: u32,\n        receipt_id_length: u32,\n        // claim hash\n        claim_secret_hash: Field,\n    ) {\n        // read note\n        // todo: filter for linode entitlement\n        let notes = storage.entitlements.at(context.msg_sender()).pop_notes(\n            NoteGetterOptions::new().set_limit(1)\n        );\n        assert(notes.len() == 1, \"No entitlements to redeem\");\n        let note = notes.get_unchecked(0);\n        assert(note.owner == context.msg_sender(), \"Entitlement does not belong to the sender\");\n\n        // verify linode billing receipt and extract amount\n        // todo: return date and nullify for the month\n        // todo: return dkim key and check against hash\n        let mut billed_amount = U128::from_integer(verify_linode_billing_receipt(\n            body, body_hash_index, body_length, header, header_length, pubkey, pubkey_redc, signature, from_index, subject_index, amount_index, amount_length, receipt_id_length\n        ));\n        // let mut billed_amount = U128::from_integer(2200);\n\n        // billed amount returns 2 decimals, so multiply billed_amount by 10,000\n        billed_amount = billed_amount * U128::from_integer(10000);\n\n        // determine the amount to reimburse\n        let amount_to_reimburse = if note.max_value >= billed_amount {\n            billed_amount\n        } else {\n            note.max_value\n        };\n\n        // release funds from escrow by shielding in public\n        // todo: event should notify how much was reimbursed\n        let token_address = storage.definition.read_private().usdc;\n        Token::at(token_address).shield(context.this_address(), amount_to_reimburse.to_field(), claim_secret_hash, 0).enqueue(&mut context);\n    }\n\n    /**\n     * Get the title of the Z-Imburse escrow\n     */\n    #[public]\n    #[view]\n    pub fn get_title() -> [u8; TITLE_LENGTH]{\n        storage.definition.read_public().title_as_string()\n    }\n\n    // /// TESTS\n    // use dep::aztec::test::helpers::test_environment::TestEnvironment;\n    // use dep::aztec::oracle::unsafe_rand::unsafe_rand;\n\n    // #[test]\n    // unconstrained fn test_escrow() {\n    //     // set up env\n    //     let mut env = TestEnvironment::new();\n    //     let usdc_deployer = env.create_account();\n    //     let escrow_owner = env.create_account();\n    //     let recipient = env.create_account();\n    //     // deploy USDC\n    //     env.impersonate(usdc_deployer);\n    //     let usdc_initialize = Token::interface().constructor(usdc_deployer, \"USDC                           \", \"Aztec USDC                     \", 6);\n    //     let usdc_contract = env.deploy_self(\"Token\").with_public_initializer(usdc_initialize);\n    //     let usdc_address = usdc_contract.to_address();\n    //     // mint to escrow owner\n    //     let secret = unsafe_rand();\n    //     let generator = 20;\n    //     let secretHash = std::hash::poseidon2::Poseidon2::hash([generator, secret], 2);\n    //     let amount_to_mint = 1000000000;\n    //     let mint_call_iface = Token::at(usdc_address).mint_private(amount_to_mint, secretHash);\n    //     // env.call_private_void(mint_call_iface);\n    //     // // deploy escrow\n    //     // env.impersonate(escrow_owner);\n    //     // let escrow_initialize = ZImburse::interface().constructor(usdc_address, \"Test Escrow                                                 \");\n    //     // let escrow_contract = env.deploy_self(\"ZImburse\").with_public_initializer(escrow_initialize);\n    //     // let escrow_address = escrow_contract.to_address();\n    //     // redeem \n    // }\n}\n\n"},"79":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/address-note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::unsafe_rand::unsafe_rand, keys::getters::get_nsk_app, context::PrivateContext,\n    macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe_rand();\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"84":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, notification_note_hash, nullifier_counter) == 0);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n\n"},"85":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"87":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"90":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"92":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/note_getter_options.nr","source":"use std::option::Option;\nuse dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, traits::ToField};\nuse crate::note::note_interface::NoteInterface;\n\npub struct PropertySelector {\n    index: u8, // index of the field in the serialized note array\n    offset: u8, // offset in the byte representation of the field (selected with index above) from which to reading\n    length: u8, // number of bytes to read after the offset\n}\n\npub struct Select {\n    property_selector: PropertySelector,\n    comparator: u8,\n    value: Field,\n}\n\nimpl Select {\n    // The selected property will be the left hand side and value the right hand side of the operation, so e.g. the\n    // object created by new(property, Comparator.GT, value) represents 'property > value'.\n    pub fn new(property_selector: PropertySelector, comparator: u8, value: Field) -> Self {\n        Select { property_selector, comparator, value }\n    }\n}\n\npub struct SortOrderEnum {\n    DESC: u8,\n    ASC: u8,\n}\n\nglobal SortOrder = SortOrderEnum {\n    DESC: 1,\n    ASC: 2,\n};\n\npub struct Sort {\n    property_selector: PropertySelector,\n    order: u8,\n}\n\nimpl Sort {\n    pub fn new(property_selector: PropertySelector, order: u8) -> Self {\n        Sort { property_selector, order }\n    }\n}\n\npub struct NoteStatusEnum {\n    ACTIVE: u8,\n    ACTIVE_OR_NULLIFIED: u8,\n}\n\nglobal NoteStatus = NoteStatusEnum {\n    ACTIVE: 1,\n    ACTIVE_OR_NULLIFIED: 2,\n    // TODO 4217: add 'NULLIFIED'\n};\n\n// This is the default filter and preprocessor, which does nothing\nfn return_all_notes<Note>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    _p: Field\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    notes\n}\n\n// docs:start:NoteGetterOptions\npub struct NoteGetterOptions<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    // Preprocessor and filter functions are used to filter notes. The preprocessor is applied before the filter and\n    // unlike filter it is applied in an unconstrained context.\n    preprocessor: fn ([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n    filter: fn ([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], FILTER_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    filter_args: FILTER_ARGS,\n    status: u8,\n}\n// docs:end:NoteGetterOptions\n\n// When retrieving notes using the NoteGetterOptions, the configurations are applied in a specific sequence to ensure\n// precise and controlled data retrieval.\n// The database-level configurations are applied first:\n// `selects` to specify fields, `sorts` to establish sorting criteria, `offset` to skip items, and `limit` to cap\n// the result size.\n// And finally, a custom preprocessor and filter to refine the outcome further.\nimpl<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS> NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS> {\n    // This method adds a `Select` criterion to the options.\n    // It takes a property_selector indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from `utils::comparison`)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T\n    ) -> Self where T: ToField {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    // This method adds a `Sort` criterion to the options.\n    // It takes a field_index indicating which field to sort by and an order (SortOrder) to determine the sorting direction.\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    // This method lets you set a limit for the maximum number of notes to be retrieved in a single query result.\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        assert_constant(limit);\n\n        self.limit = limit;\n        *self\n    }\n\n    // This method sets the offset value, which determines where to start retrieving notes in the query results.\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n\nimpl<Note, let N: u32> NoteGetterOptions<Note, N, Field, Field> where Note: NoteInterface<N> {\n    // This function initializes a NoteGetterOptions that simply returns the maximum number of notes allowed in a call.\n    pub fn new() -> Self {\n        Self {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32,\n            offset: 0,\n            preprocessor: return_all_notes,\n            preprocessor_args: 0,\n            filter: return_all_notes,\n            filter_args: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n}\n\nimpl<Note, let N: u32, PREPROCESSOR_ARGS> NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, Field> where Note: NoteInterface<N> {\n    // This function initializes a NoteGetterOptions with a preprocessor, which takes the notes returned from\n    // the database and preprocessor_args as its parameters.\n    // `preprocessor_args` allows you to provide additional data or context to the custom preprocessor.\n    pub fn with_preprocessor(\n        preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n        preprocessor_args: PREPROCESSOR_ARGS\n    ) -> Self {\n        Self {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32,\n            offset: 0,\n            preprocessor,\n            preprocessor_args,\n            filter: return_all_notes,\n            filter_args: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n}\n\nimpl<Note, let N: u32, FILTER_ARGS> NoteGetterOptions<Note, N, Field, FILTER_ARGS> where Note: NoteInterface<N> {\n    // This function initializes a NoteGetterOptions with a filter, which takes\n    // the notes returned from the database and filter_args as its parameters.\n    // `filter_args` allows you to provide additional data or context to the custom filter.\n    pub fn with_filter(\n        filter: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], FILTER_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n        filter_args: FILTER_ARGS\n    ) -> Self {\n        Self {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32,\n            offset: 0,\n            preprocessor: return_all_notes,\n            preprocessor_args: 0,\n            filter,\n            filter_args,\n            status: NoteStatus.ACTIVE\n        }\n    }\n}\n"},"98":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"}}}