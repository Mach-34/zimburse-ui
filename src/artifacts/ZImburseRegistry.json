{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-aarch64","name":"ZImburseRegistry","functions":[{"name":"register_participant","is_unconstrained":false,"custom_attributes":["private","internal"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"check_and_register_participant","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"1756802668388977958":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_notes_internal","get_collapse_hints","pack_arguments_oracle_wrapper","call_private_function_internal","pack_returns_oracle_wrapper","directive_integer_quotient","directive_invert"]},{"name":"get_escrow_registry_status","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_escrow_registry_status"],"assert_messages":{"311":"Array index out of bounds","180":"Array index out of bounds","20":"Function get_escrow_registry_status can only be called statically","113":"Storage slot 0 not allowed. Storage slots must start from 1.","148":"Array index out of bounds","299":"attempt to add with overflow","340":"attempt to add with overflow","159":"attempt to add with overflow","188":"Array index out of bounds","319":"Array index out of bounds","237":"Array index out of bounds","327":"Array index out of bounds","219":"Array index out of bounds","251":"attempt to add with overflow","15":"Not initialized","172":"Array index out of bounds","201":"attempt to add with overflow"}},{"name":"get_participant_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_participant_escrows"]},{"name":"get_managed_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_managed_escrows"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"2426":"attempt to add with overflow","4986":"Array index out of bounds","2292":"Array index out of bounds","945":"Storage slot 0 not allowed. Storage slots must start from 1.","1969":"Array index out of bounds","2804":"Array index out of bounds","5230":"attempt to add with overflow","2725":"Array index out of bounds","354":"Array index out of bounds","3938":"Array index out of bounds","4962":"Array index out of bounds","4505":"attempt to add with overflow","4694":"Array index out of bounds","4371":"attempt to add with overflow","5151":"attempt to add with overflow","4749":"Array index out of bounds","5553":"Array index out of bounds","4292":"Array index out of bounds","2433":"Array index out of bounds","3134":"Array index out of bounds","4481":"Array index out of bounds","3000":"attempt to add with overflow","3512":"attempt to add with overflow","2354":"attempt to add with overflow","3701":"Array index out of bounds","4024":"attempt to add with overflow","3433":"attempt to add with overflow","3622":"Array index out of bounds","5048":"Array index out of bounds","5371":"attempt to add with overflow","660":"attempt to add with overflow","1873":"attempt to add with overflow","3409":"attempt to add with overflow","3732":"Array index out of bounds","4299":"Array index out of bounds","5457":"Array index out of bounds","2306":"attempt to add with overflow","3196":"Storage slot 0 not allowed. Storage slots must start from 1.","5110":"attempt to add with overflow","2227":"Array index out of bounds","1904":"attempt to add with overflow","1770":"Array index out of bounds","1179":"Function set_contract_registered can only be called internally","2203":"Array index out of bounds","4952":"attempt to add with overflow","1990":"attempt to add with overflow","3014":"Array index out of bounds","4038":"Array index out of bounds","4928":"Array index out of bounds","5062":"attempt to add with overflow","3959":"attempt to add with overflow","2100":"Array index out of bounds","5306":"Array index out of bounds","4526":"attempt to add with overflow","5361":"attempt to add with overflow","1832":"attempt to add with overflow","5574":"attempt to add with overflow","4770":"attempt to add with overflow","4447":"Array index out of bounds","217":"attempt to add with overflow","1430":"Not initialized","3344":"attempt to add with overflow","3021":"Array index out of bounds","4045":"Array index out of bounds","4880":"Array index out of bounds","571":"Initialization hash does not match","1784":"attempt to add with overflow","3832":"Array index out of bounds","5179":"Array index out of bounds","3375":"attempt to add with overflow","1705":"Array index out of bounds","2918":"Array index out of bounds","2595":"Array index out of bounds","4454":"Array index out of bounds","5478":"attempt to add with overflow","2138":"attempt to add with overflow","3351":"attempt to add with overflow","3863":"Array index out of bounds","1681":"Array index out of bounds","2193":"attempt to add with overflow","2382":"Array index out of bounds","2571":"Array index out of bounds","4186":"DKIM key has already been registered","5375":"Array index out of bounds","5564":"attempt to add with overflow","2169":"Array index out of bounds","3894":"attempt to add with overflow","365":"attempt to add with overflow","877":"Sender is not the registry contract","3949":"attempt to add with overflow","2468":"Array index out of bounds","4973":"attempt to add with overflow","5138":"Array index out of bounds","2633":"Array index out of bounds","5382":"Array index out of bounds","963":"DKIM key has already been registered","3200":"Array index out of bounds","4547":"Array index out of bounds","2475":"Array index out of bounds","3499":"Array index out of bounds","4066":"attempt to add with overflow","5468":"attempt to add with overflow","1238":"Storage slot 0 not allowed. Storage slots must start from 1.","3853":"attempt to add with overflow","3530":"Array index out of bounds","5578":"Array index out of bounds","1860":"Array index out of bounds","2561":"attempt to add with overflow","1915":"Array index out of bounds","3963":"Array index out of bounds","2537":"Array index out of bounds","166":"attempt to add with overflow","2214":"attempt to add with overflow","3750":"Array index out of bounds","1434":"Function get_escrow_class_id can only be called statically","5585":"Array index out of bounds","142":"attempt to add with overflow","3970":"Array index out of bounds","4994":"Array index out of bounds","1977":"Array index out of bounds","118":"attempt to add with overflow","2733":"Array index out of bounds","5482":"Array index out of bounds","2788":"Array index out of bounds","3812":"attempt to add with overflow","2142":"Array index out of bounds","4001":"attempt to add with overflow","2008":"Array index out of bounds","3032":"attempt to add with overflow","4056":"attempt to add with overflow","4190":"Array index out of bounds","2764":"Array index out of bounds","4489":"attempt to add with overflow","4568":"attempt to add with overflow","771":"Sender is not the registry contract","4678":"Array index out of bounds","4757":"Array index out of bounds","5403":"attempt to add with overflow","3764":"attempt to add with overflow","3441":"Array index out of bounds","3630":"Array index out of bounds","4465":"attempt to add with overflow","4788":"Array index out of bounds","2149":"Array index out of bounds","3685":"Array index out of bounds","3039":"Array index out of bounds","1692":"attempt to add with overflow","3874":"attempt to add with overflow","2582":"attempt to add with overflow","4252":"Storage slot 0 not allowed. Storage slots must start from 1.","5489":"Array index out of bounds","3661":"Array index out of bounds","2826":"Array index out of bounds","2503":"Array index out of bounds","1022":"Storage slot 0 not allowed. Storage slots must start from 1.","2235":"Array index out of bounds","4070":"Array index out of bounds","5338":"attempt to add with overflow","5015":"attempt to add with overflow","5393":"attempt to add with overflow","2510":"Array index out of bounds","4936":"attempt to add with overflow","2754":"attempt to add with overflow","2108":"Array index out of bounds","3321":"Array index out of bounds","4400":"attempt to add with overflow","4077":"Array index out of bounds","5290":"Array index out of bounds","2651":"Array index out of bounds","4888":"Array index out of bounds","4431":"attempt to add with overflow","1926":"attempt to add with overflow","3651":"attempt to add with overflow","3840":"Array index out of bounds","5510":"attempt to add with overflow","4407":"attempt to add with overflow","1713":"Array index out of bounds","2926":"Array index out of bounds","2603":"Array index out of bounds","5163":"Array index out of bounds","5407":"Array index out of bounds","1500":"attempt to add with overflow","2713":"attempt to add with overflow","3548":"Array index out of bounds","5596":"attempt to add with overflow","2256":"attempt to add with overflow","2957":"Array index out of bounds","3981":"attempt to add with overflow","2177":"attempt to add with overflow","2366":"Array index out of bounds","2665":"attempt to add with overflow","1318":"attempt to add with overflow","5414":"Array index out of bounds","4256":"Array index out of bounds","3610":"attempt to add with overflow","2775":"attempt to add with overflow","2129":"attempt to add with overflow","4555":"Array index out of bounds","1160":"attempt to add with overflow","5445":"attempt to add with overflow","5122":"Array index out of bounds","5500":"attempt to add with overflow","2160":"attempt to add with overflow","4909":"attempt to add with overflow","1514":"Not initialized","2026":"Array index out of bounds","2404":"attempt to add with overflow","3050":"Array index out of bounds","3562":"attempt to add with overflow","3483":"Array index out of bounds","3672":"attempt to add with overflow","4586":"Array index out of bounds","844":"attempt to add with overflow","1734":"attempt to add with overflow","2947":"attempt to add with overflow","2624":"attempt to add with overflow","3459":"Array index out of bounds","4806":"Array index out of bounds","820":"attempt to add with overflow","1332":"Not initialized","1844":"Array index out of bounds","2545":"attempt to add with overflow","2088":"attempt to add with overflow","3112":"Storage slot 0 not allowed. Storage slots must start from 1.","2978":"attempt to add with overflow","2844":"Array index out of bounds","2521":"attempt to add with overflow","1174":"Not initialized","3222":"SharedImmutable already initialized","3356":"Array index out of bounds","5002":"Array index out of bounds","5514":"Array index out of bounds","4868":"attempt to add with overflow","2040":"attempt to add with overflow","2741":"Array index out of bounds","4088":"attempt to add with overflow","2796":"Array index out of bounds","1961":"Array index out of bounds","3363":"Array index out of bounds","858":"Not initialized","1882":"attempt to add with overflow","2906":"attempt to add with overflow","1937":"Array index out of bounds","4497":"Array index out of bounds","4686":"Array index out of bounds","4820":"attempt to add with overflow","4741":"Array index out of bounds","3906":"Array index out of bounds","4095":"Array index out of bounds","5198":"Array index out of bounds","3449":"attempt to add with overflow","3638":"Array index out of bounds","3315":"attempt to add with overflow","5521":"Array index out of bounds","3693":"Array index out of bounds","2858":"attempt to add with overflow","4717":"Array index out of bounds","3236":"Array index out of bounds","3425":"Array index out of bounds","2456":"attempt to add with overflow","597":"SharedImmutable already initialized","2968":"attempt to add with overflow","2243":"Array index out of bounds","2487":"attempt to add with overflow","5425":"attempt to add with overflow","1518":"Function get_escrow_registry_status can only be called statically","3243":"Array index out of bounds","2408":"Array index out of bounds","2274":"Array index out of bounds","2463":"attempt to add with overflow","4377":"Array index out of bounds","4944":"Array index out of bounds","2116":"Array index out of bounds","2817":"attempt to add with overflow","1336":"Function check_dkim_key_hash_public can only be called statically","5298":"Array index out of bounds","2415":"Array index out of bounds","1257":"SharedImmutable already initialized","2982":"Array index out of bounds","4707":"attempt to add with overflow","4896":"Array index out of bounds","5030":"Array index out of bounds","5542":"attempt to add with overflow","343":"attempt to add with overflow","3927":"attempt to add with overflow","3470":"attempt to add with overflow","3714":"attempt to add with overflow","3391":"Array index out of bounds","4604":"Array index out of bounds","1721":"Array index out of bounds","2934":"Array index out of bounds","2611":"Array index out of bounds","752":"Not initialized","2989":"Array index out of bounds","3824":"Array index out of bounds","4013":"Array index out of bounds","5171":"Array index out of bounds","1886":"Array index out of bounds","1752":"Array index out of bounds","2185":"Array index out of bounds","2374":"Array index out of bounds","3398":"Array index out of bounds","3130":"DKIM key has already been registered","4666":"attempt to add with overflow","1893":"Array index out of bounds","1948":"attempt to add with overflow","5532":"attempt to add with overflow","3917":"attempt to add with overflow","4106":"Array index out of bounds","711":"attempt to add with overflow","4618":"attempt to add with overflow","577":"Initializer address is not the contract deployer","5130":"Array index out of bounds","4539":"Array index out of bounds","4728":"attempt to add with overflow","309":"attempt to add with overflow","5319":"attempt to add with overflow","1577":"Storage slot 0 not allowed. Storage slots must start from 1.","5350":"Array index out of bounds","3491":"Array index out of bounds","4515":"Array index out of bounds","5216":"Array index out of bounds","1041":"SharedImmutable already initialized","4168":"Storage slot 0 not allowed. Storage slots must start from 1.","5192":"attempt to add with overflow","3010":"attempt to add with overflow","4034":"attempt to add with overflow","1852":"Array index out of bounds","2553":"Array index out of bounds","4278":"SharedImmutable already initialized","1395":"Storage slot 0 not allowed. Storage slots must start from 1.","4412":"Array index out of bounds","5546":"Array index out of bounds","5278":"attempt to add with overflow","347":"Array index out of bounds","2395":"attempt to add with overflow","3931":"Array index out of bounds","4419":"Array index out of bounds"}},{"name":"register_dkim","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_id","type":{"kind":"field"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim"],"assert_messages":{"329":"Array index out of bounds","637":"Array index out of bounds","692":"Array index out of bounds","241":"SharedImmutable already initialized","433":"Array index out of bounds","491":"Array index out of bounds","561":"attempt to add with overflow","814":"Array index out of bounds","162":"DKIM key has already been registered","671":"attempt to add with overflow","802":"attempt to add with overflow","406":"Array index out of bounds","467":"Array index out of bounds","650":"attempt to add with overflow","449":"Array index out of bounds","830":"Array index out of bounds","507":"Array index out of bounds","629":"Array index out of bounds","50":"Sender is not the registry contract","754":"attempt to add with overflow","364":"Array index out of bounds","684":"Array index out of bounds","547":"Array index out of bounds","352":"attempt to add with overflow","221":"Storage slot 0 not allowed. Storage slots must start from 1.","864":"attempt to add with overflow","660":"Array index out of bounds","529":"Array index out of bounds","843":"attempt to add with overflow","520":"attempt to add with overflow","383":"attempt to add with overflow","700":"Array index out of bounds","441":"attempt to add with overflow","822":"Array index out of bounds","371":"Array index out of bounds","499":"Array index out of bounds","621":"Array index out of bounds","359":"attempt to add with overflow","740":"Array index out of bounds","417":"attempt to add with overflow","478":"attempt to add with overflow","609":"attempt to add with overflow","853":"Array index out of bounds","722":"Array index out of bounds","399":"Array index out of bounds","15":"Not initialized","713":"attempt to add with overflow","457":"attempt to add with overflow","137":"Storage slot 0 not allowed. Storage slots must start from 1."}},{"name":"get_participants","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"name","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"npk_m_hash","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}},{"name":"header","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::note::note_header::NoteHeader"}}],"kind":"struct","path":"types::participant_note::ParticipantNote"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_participants"]},{"name":"set_contract_registered","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["set_contract_registered"],"assert_messages":{"180":"attempt to add with overflow","369":"Array index out of bounds","14":"Not initialized","139":"SharedImmutable already initialized","206":"Array index out of bounds","238":"Array index out of bounds","357":"attempt to add with overflow","398":"attempt to add with overflow","188":"Array index out of bounds","217":"attempt to add with overflow","246":"Array index out of bounds","19":"Function set_contract_registered can only be called internally","112":"Storage slot 0 not allowed. Storage slots must start from 1.","377":"Array index out of bounds","295":"Array index out of bounds","196":"attempt to add with overflow","385":"Array index out of bounds","277":"Array index out of bounds","309":"attempt to add with overflow","172":"Array index out of bounds","230":"Array index out of bounds","259":"attempt to add with overflow"}},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow_contract_id","type":{"kind":"field"},"visibility":"private"},{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["constructor"],"assert_messages":{"768":"attempt to add with overflow","1085":"Array index out of bounds","1341":"attempt to add with overflow","1658":"Array index out of bounds","1560":"attempt to add with overflow","1646":"attempt to add with overflow","1256":"Array index out of bounds","1506":"Array index out of bounds","799":"attempt to add with overflow","153":"Array index out of bounds","787":"Array index out of bounds","915":"Array index out of bounds","1354":"Array index out of bounds","775":"attempt to add with overflow","1598":"attempt to add with overflow","1531":"Array index out of bounds","1330":"Array index out of bounds","1519":"attempt to add with overflow","745":"Array index out of bounds","873":"attempt to add with overflow","739":"attempt to add with overflow","1062":"Array index out of bounds","1117":"Array index out of bounds","1312":"Array index out of bounds","404":"SharedImmutable already initialized","660":"Array index out of bounds","142":"attempt to add with overflow","849":"Array index out of bounds","1416":"Array index out of bounds","1666":"Array index out of bounds","1398":"Array index out of bounds","1075":"attempt to add with overflow","624":"Array index out of bounds","1264":"Array index out of bounds","667":"Array index out of bounds","923":"Array index out of bounds","1362":"Array index out of bounds","1490":"Array index out of bounds","972":"Array index out of bounds","1478":"attempt to add with overflow","1539":"Array index out of bounds","1277":"attempt to add with overflow","954":"Array index out of bounds","558":"Array index out of bounds","936":"attempt to add with overflow","1125":"Array index out of bounds","1320":"attempt to add with overflow","857":"attempt to add with overflow","1046":"Array index out of bounds","1174":"Array index out of bounds","1296":"Array index out of bounds","1430":"attempt to add with overflow","1034":"attempt to add with overflow","1674":"Array index out of bounds","1156":"Array index out of bounds","833":"attempt to add with overflow","894":"attempt to add with overflow","1138":"attempt to add with overflow","815":"Array index out of bounds","620":"Storage slot 0 not allowed. Storage slots must start from 1.","108":"attempt to add with overflow","1248":"Array index out of bounds","474":"Array index out of bounds","986":"attempt to add with overflow","1236":"attempt to add with overflow","1370":"Array index out of bounds","1498":"Array index out of bounds","907":"Array index out of bounds","1096":"attempt to add with overflow","1547":"Array index out of bounds","1687":"attempt to add with overflow","377":"Initializer address is not the contract deployer","822":"Array index out of bounds","371":"Initialization hash does not match","883":"Array index out of bounds","1584":"Array index out of bounds","554":"DKIM key has already been registered","1383":"attempt to add with overflow","1188":"attempt to add with overflow","164":"attempt to add with overflow","1566":"Array index out of bounds","865":"Array index out of bounds","1054":"Array index out of bounds","536":"Storage slot 0 not allowed. Storage slots must start from 1.","1109":"Array index out of bounds","146":"Array index out of bounds","463":"Array index out of bounds","780":"Array index out of bounds","1304":"attempt to add with overflow","646":"SharedImmutable already initialized"}},{"name":"register_dkim_bulk","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim_bulk"],"assert_messages":{"326":"Array index out of bounds","573":"Array index out of bounds","762":"attempt to add with overflow","515":"Array index out of bounds","488":"Array index out of bounds","549":"Array index out of bounds","290":"Array index out of bounds","741":"attempt to add with overflow","220":"DKIM key has already been registered","930":"Array index out of bounds","854":"attempt to add with overflow","83":"Sender is not the registry contract","531":"Array index out of bounds","333":"Array index out of bounds","202":"Storage slot 0 not allowed. Storage slots must start from 1.","589":"Array index out of bounds","720":"Array index out of bounds","129":"Array index out of bounds","446":"Array index out of bounds","638":"Array index out of bounds","312":"SharedImmutable already initialized","775":"Array index out of bounds","434":"attempt to add with overflow","751":"Array index out of bounds","620":"Array index out of bounds","943":"attempt to add with overflow","964":"attempt to add with overflow","224":"Array index out of bounds","602":"attempt to add with overflow","791":"Array index out of bounds","922":"Array index out of bounds","465":"attempt to add with overflow","523":"attempt to add with overflow","712":"Array index out of bounds","453":"Array index out of bounds","581":"Array index out of bounds","840":"Array index out of bounds","700":"attempt to add with overflow","441":"attempt to add with overflow","822":"Array index out of bounds","499":"attempt to add with overflow","560":"attempt to add with overflow","48":"Not initialized","953":"Array index out of bounds","804":"attempt to add with overflow","481":"Array index out of bounds","286":"Storage slot 0 not allowed. Storage slots must start from 1.","539":"attempt to add with overflow","411":"Array index out of bounds","405":"attempt to add with overflow","914":"Array index out of bounds","728":"Array index out of bounds","783":"Array index out of bounds","140":"Array index out of bounds","902":"attempt to add with overflow","652":"attempt to add with overflow"}},{"name":"register_escrow","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"7f3dzuQ+c+WJ3ouPfcCP4FffyoYxcPf0DAwY9qDbs4ENw/e+sypLTNUjPWJliSktBteJUX+/SmVw/fJhRCyJ5H/+w//5P//7//t//x//8m//17//73/4b/+f//yHf/33//HP//Ev//5vj//6z3+w8vP/97//n3/+tx//+b//45//13/8w3+zyck//sP//Lf/88c/vfzXP/7D//Uv//o//+G/SYj/9Y+bq10Ky9UupVivtiHsXO3Fh19X+2By42prUjJLKCblVyze7l6fk1suz8W+rpa9i61dQrE2yvrif/rHf7CB0nwnTaQ030mTKM130uTz0vjs8zLYnF5Xl+c3lE9/gzPnv8E6H5erXbIrYHuaFm8WTYt3bh3Pzi/Hh7xE//gWm76Gb8cO3+2FH634Xx96fKT5x/X4I6lfkV/fYGPeuTqlGr0tr2ul7P5pee/rn5aXdN2flvMUZl8YoTD7wgQKsy9MvFoYa2Kq8awT+EOaHwEltIAyWkAFLCBv0AKyaAE5tIA8WkCCFlBAC+iGmdrFV+Zwm4ASWkDXz9QxVWTJ+Eaal9pqSVglbbt3bRG7lA8/GtvVtT8GWiYZqJhZBmoVDTQuYZS0HaibZaB+loGKooHmOtBSNgMNsww0zjLQpCm9vHxuYzYjVVQaPcZX/VvjZDNURcVRY6hBUXnUGqqmAmn1p+o2+TSgV0il/Lo4lNAaaareY0nR/9exrenzcmfxqxnsu0cndYCp5YCKWS624tJ/nbBLA3pVNzUcIZw2nJSXG7u0Lonksw8aAnr1PDUc9Iq/E5wfQ72h5g+r9w1CY6hJFoszxdedXXxyyiMHXwYOPpqRg7cjB+9GDt6PHLyMHHwYOfg4cvAjZ9g4coaNI2fYNHKGTSNn2DRyhk0jZ9g0coZNI2fYNHKGTSNn2DRyhk0jZ9g8cobNI2fYPHKGzSNn2Dxyhs0jZ9g8cobNI2fYPHKGzSNn2DJyhi0jZ9gycoYtI2fYMnKGLSNn2DJyhi0jZ9gycoYtI2dYa0ZOsdaMnGOtGTnJWjNylrVm5DRrzch51pqRE601I2daa0ZOtdYMnWvt0LnWDp1r7dC51g6da+3QudYOnWvt0LnWDp1rLXiuzXG5OKeyjR481x5H78BzbYl16431+tIf4W8vllh3v5Jk1ov59hZIqFtOYR146UGY78AEr8QI8x2Y4IUpYb4DUwhTD0zwtoUw34EJ3sUR5jswwZtawnwHJniPT5jvwAS3PAjzDZieDpAimHSAFMGkA6QIJh0gRTCFMPXApAOkCCYdIEUw6QApgkkHSBFMOkB6YAodIEUw6QApgkkHSBFMOkCKYAph6oFJB0gRTDpAimDSAVIEkw6QIph0gPTADHSAFMGkA6QIJh0gRTDpACmCKYSpByYdIEUw6QApgkkHSBFMOkCKYNIB0gMT/aBRwnwHJh0gRTDpACmCSQdIEUwhTD0w6QApgkkHSBFMOkCKYNIBUgSTDpAemIkOkCKYdIAUwaQDpAgmHSBFMIUw9cCkA6QIJh0gRTDpACmCSQdIEUw6QHpgZjpAimDSAVIEkw6QIph0gBTBFMLUA5MOkCKYdIAUwaQDpAgmHSBFMOkA6YFZ6AApgkkHSBFMOkCKYNIBUgRTCFMPTDpAimDSAVIEkw6QIph0gBTBpAOkBqYzdIAUwaQDpAgmHSBFMOkAKYIphKkHJh0gRTDpACmCSQdIEUw6QIpg0gHSA9PSAVIEkw6QIph0gBTBpAOkCKYQph6YdIAUwaQDpAgmHSBFMOkAKYJJB0gPTEcHSBFMOkCKYNIBUgSTDpAimEKYemDSAVIEkw6QIph0gBTBpAOkCCYdID0wPR0gRTDpACmCSQdIEUw6QIpgCmHqgUkHSBFMOkCKYNIBUgSTDpAimHSA9MAUOkCKYNIBUgSTDpAimHSAFMEUwtQDkw6QIph0gBTBpAOkCCYdIEUw6QDpgRnoACmCSQdIEUw6QIpg0gFSBFMIUw9MOkCKYNIBUgSTDpAimHSAFMGkA6QHZqQDpAgmHSBFMOkAKYJJB0gRTCFMPTDpACmCSQdIEUw6QIpg0gFSBJMOkB6YiQ6QIph0gBTBpAOkCCYdIEUwhTD1wKQDpAgmHSBFMOkAKYJJB0gRTDpAemBmOkCKYNIBUgSTDpAimHSAFMEUwtQDkw6QIph0gBTBpAOkCCYdIEUw6QDpgVnoACmCSQdIEUw6QIpg0gFSBFMIUw9MOkCKYNIBUgSTDpAimHSAFMGkA6QGpjd0gBTBpAOkCCYdIEUw6QApgimEqQcmHSBFMOkAKYJJB0gRTDpAimDSAdID09IBUgSTDpAimHSAFMGkA6QIphCmHph0gBTBpAOkCCYdIEUw6QApgkkHSA9MRwdIEUw6QIpgXu8AhZK/g/kzosttDPdQ4XW1bfy8rHP1x+hWXF1KO1fHx5/LErcXWf0a934wMS7S+Jji6+LdX9cjRS4XexfWF/+UUShjDxkDZewhY6SMPWRMlPGPZBRZovYS8kbGTBl7yFgo45/JmFKVsbjji13J9c6/la+7F/u81LpOjP8KyBsCuhmQhFrXS8rHFwezXBu8XQ/vJ0tLlmpYOrJUw5Lt6u0sy3JnF5w5w1LIUg1LNu53s4yVj4trQL+KU1oC4IBoNoADoo0BDogGyd2Akq8GSUrh+OLHw7T6XK3YjZsidFM00aSfMhJNZ2QZoDOrx9jvNwZC82VS8HRqJgUvBD8U+LQ8A3fWuDPg6QFNCp7eUn/w3tSgvfGNOzeeTAu9pbsBdXsCJrSh9LCkY3U7y15PwAL9Kj0s6VbdzfLY6g90lcAB0f0BByQEhA2IbsrdgDo+/wq0SDTRpJ8yEs1+zzYCzZdJwdOpmRN8pK0zFvheD7UiPaBJwdNb+gD4B5PlYuvPVd+R3hI4ICGgewF1rH9oQ+lhSRNKD0taUHpY0lW6nWW37oFGkRqWid7Pn7EMYVHk8aCr8UJczx2XEj2auwF1excy0XbRw5IOjR6WQpZ3s+z1XmuimaOHJc2cu1kev8CX6NCAA6LtAg6IXgo2oEyD5G5AHd9qzXRTNNGknzISzX5PkzLNl0nBC8HPCZ62zljgez2gzPSAJgVPb6k/+J47LmV6S3cD6vYELNOGUsOy0LG6nWWvJ2CFfpUelnSr7mZ5bPUXukrggISAsAHRpQEHRDflbkAdn38VWiSaaNJPGYlmv2cbhebLlODF0KmZFDxtnbHAd3qoJYYe0KTg6S19AHy/DX3ECAFhA6K3dDOgjvUPbSg9LGlC6WFJC0oPS7pKt7Ps1T1YGkV6WF7v/YhdJHSS3SgsvV0U996Fr+2AdZSxh4yeMvaQUShjDxkDZfwjGUVq6pKQNzJGythDxkQZ/0zGjx32frgC5SEWAd0MqNeqBbGFLLWwdIYs1bBku3o7y04rUMSxZ9bDko373SwPX7UXJwSEDYhmAzgg2hjggGiQ3A2o3/oTcXRTNNGknzISzX7vfXiaL5OCp1MzKXjaOmOB7/UqkacHNCl4Ifju4DvujSie3tLdgLo9AfO0ofSwpGN1O8teT8A8/So9LOlW3c3y2OoXukrggOj+gAOiSwMOiG7K3YA6Pv8SIU1FNOmnjESz37MNofkyKXg6NZOCp60zFvheD7WEHtCc4AO9pQ+A77j1XqC3BA6I3tLNgPrVP4E2lB6WQpZqWNKC0sOSrtLtLLt1DzSK9LCk9/NnLD932Pvxe62BHs3dgLq9Cxlpu+hhSYdGD0uaObez7PVea6SZo4elkOXNLI9f4It0aMAB0XYBB0QvBRwQDZK7AXV8qzXSTVFEM9FPGYlmv6dJiebLpODp1EwKnrbOWOB7PaBMQvBzgqe31B98zx2XEr2luwF1ewKWaEPpYUnH6naWvZ6AJfpValhmulV3szy2+jNdJXBAdH/AAdGlAQckBHQzoI7PvzItEk006aeMRLPfs41M82VS8HRqJgVPW2cs8L0eahV6QJOCp7f0AfAdN/Qp9JbAAdFbuhlQv/qnCFmqYUkTSg9LWlB6WNJVup1lt+6BRpEeltd7P9HWq6Mvv7F8RBSMgYvo+m455Mo3itlG5OAiur4fSt6/rJOdiAQuogAXUYSL6PI64WG7/bq42NLKLMbX8B//lte9vd03EVI1EXJ5Tb5e9i62donE2lWx9bj4pzKZynyjzOU57JFz4ysgt/kVWwMX0eU5zMa636RNq/Ua+78f8UtdJWH1a7B715balJQQfrv250jdNCP104xUFI00LmGUtDPSMM1I4zQjTYpGmutIS9mONE8z0jLLSJ3RlGWWMOx6oXEdqqIi6THAaoIZJ9uxKiqTmmNVVCg1xyo6/1zdNq869FqpLJZZKKE11FRb3JKib3TPvppxsvK3d3vnxwCrde5Tq9EWs1xsxaVTXblDr+8g6KRcF8ikdfKVD3smDr0mnZsOeh3dic7Psd5QSYeaQtPqUdv+WJMsxlqKrzs/HoL8jN6boaO3Q0fvho7eDx29DB19GDr6OHT0aejo89DRD51rZehcK0PnWhk618rQuVaGzrUydK6VoXOtDJ1rZehcK0Pn2jB0rg1D59owdK4NQ+fa609s7xr90Lk2DJ1rw9C5Ngyda8PQuTYOnWvj0Lk2Dp1r49C59voDNbtGP3SujUPn2jh0ro1D59o4dK5NQ+faNHSuTUPn2jR0rr3+4KKu0Q+da9PQuTYNnWvT0Lk2DZ1r89C5Ng+da/PQuTYPnWuv39a+a/RD59o8dK7NQ+faPHSuzUPn2gKea3NcLs6pbKMHz7WN6MFzbYl1a4jfjleNeysTJNZdPySZ9fqyvcUU+pZeFPDSgzDfgSmEqQcmeGFKmO/ABK/TCfMdmOBtC2G+AxO8iyPMd2CCN7WE+ecwowHv8QnzHZjglgdhvgOTDpAimHSAFMEUwtQDkw6QIph0gBTBpAOkCCYdIEUw6QDpgWnpACmCSQdIEUw6QIpg0gFSBFMIUw9MOkCKYNIBUgSTDpAimHSAFMGkA6QHpqMDpAgmHSBFMOkAKYJJB0gRTCFMPTDpACmCSQdIEUw6QIpg0gFSBJMOkB6Y6CdOEuY7MOkAKYJJB0gRTDpAimAKYeqBSQdIEUw6QIpg0gFSBJMOkCKYdID0wEQ/B50w34FJB0gRTDpAimDSAVIEUwhTD0w6QIpg0gFSBJMOkCKYdIAUwaQDpAdmoAOkCCYdIEUw6QApgkkHSBFMIUw9MOkAKYJJB0gRTDpAimDSAVIEkw6QHpiRDpAimHSAFMGkA6QIJh0gRTCFMPXApAOkCCYdIEUw6QApgkkHSBFMOkB6YCY6QIpg0gFSBJMOkCKYdIAUwRTC1AOTDpAimHSAFMGkA6QIJh0gRTDpAOmBmekAKYJJB0gRTDpAimDSAVIEUwhTD0w6QIpg0gFSBJMOkCKYdIAUwaQDpAdmoQOkCCYdIEUw6QApgkkHSBFMIUw9MOkAKYJJB0gRTDpAimDSAVIEkw6QGpjJ0AFSBJMOkCKYdIAUwaQDpAimEKYemHSAFMGkA6QIJh0gRTDpACmCSQdID0xLB0gRTDpAimDSAVIEkw6QIphCmHpg0gFSBJMOkCKYdIAUwaQDpAgmHSA9MB0dIEUw6QApgkkHSBFMOkCKYAph6oFJB0gRTDpAimDSAVIEkw6QIph0gPTA9HSAFMGkA6QIJh0gRTDpACmCKYSpByYdIEUw6QApgkkHSBFMOkCKYNIB0gNT6AApgkkHSBFMOkCKYNIBUgRTCFMPTDpAimDSAVIEkw6QIph0gBTBpAOkB2agA6QIJh0gRTDpACmCSQdIEUwhTD0w6QApgkkHSBFMOkCKYNIBUgSTDpAemJEOkCKYdIAUwaQDpAgmHSBFMIUw9cCkA6QIJh0gRTDpACmCSQdIEUw6QHpgJjpAimDSAVIEkw6QIph0gBTBFMLUA5MOkCKYdIAUwaQDpAgmHSBFMOkA6YGZ6QApgkkHSBFMOkCKYNIBUgRTCFMPTDpAimDSAVIEkw6QIph0gBTBpAOkB2ahA6QIJh0gRTDpACmCSQdIEUy5HGYo+TuYPyO63MZw3rnX1bbx87LO1R+jW3F1Ke1cHb2zS9xeZPVr3PvBxLhI42OKr4t3f13eLj8v711YX/xTxkgZe8iYKGMPGTNl7CFjoYx/JKPIErWXkL/ImI2hjD1ktJTxz2RMqcpY3PHFruR659/K192LfV5qXSfGbwA5AroZkIRa10vKxxcHs1wbvF0P7ydLT5ZqWApZqmHJdvV2lmW5swvOnGHJnlkPSzbud7OMlY+La0C/ilNaAuCAaDZgA7K0McAB0SC5G1Dy1SBJKRxf/HiYVp+rFbtxUyzdFE006aeMRNMZWQbozOox9vuNgRWCnxM8nZpJwdPWGQt8Wp6BO2vcGfD0gCYFT2+pP3hvatDe+MadG0+mLb2luwF1ewLmaEPpYUnH6naWvZ6AOfpVeljSrbqb5bHV74SAsAHR/QEHRJcGHBDdlLsBdXz+5WiRaKJJP2Ukmv2ebXiaL5OCp1MzKXjaOmOB7/VQy9MDmhS8EHx/8A8my8XWn6u+Pb0lcED0lm4G1LH+oQ2lhyVNKD0saUGpYSl0lW5n2at7EBpFeljS+/kzliEsivgQGy/E9dxxSejR3A2o27uQImSphiUdGj0saebczrLXe61CM0cPS5o5d7M8foFP6NBgAwq0XcAB0UsBB0SD5G5AHd9qDXRTNNEU0hyIZr+nSYHmy6Tg6dRMCp62zljgez2gDPSAJgVPb6k/+J47LkV6S3cD6vYELNKG0sOSjtXtLHs9AYv0q/SwFLK8meWx1R/pKoEDovsDDoguDTgguil3A+r4/CvSIlFEM9FPGYlmv2cbiebLpODp1EwKnrbOWOB7PdRKQvBzgqe39AHwHTf0SfSWwAHRW7oZUMf6hzaUHpY0odSwzLSg9LCkq3Q7y17dQ6ZRpIfl9d6P2EVCJ9mNwtLbRXHvXfjaDmShjD1kDJSxh4yRMvaQMVHGP5JRpKYuCXkjY6aMPWQslPHPZPzYYe/HK1CKIaCbAXVbtVAsWaph6chSDUu2q7ez7LUCpQhZqmHJxv1ulsev2hdaAuCAaDaAA6KNAQ6IBsndgPqtPymGboommvRTRqLZ7b2PYmi+TAqeTs2k4IXghwLf6VWiYugBTQqe3lJ/8B33RiyG3tLdgHo9ASuGNpQelnSsbmfZ6QlYsfSr9LCkW3U3y0Orv1i6SuCA6P6AAxICwgZEN+VuQB2ff1laJJpo0k8ZiWa/ZxuW5suk4OnUzAne0dYZC3yvh1qOHtCk4OktfQB8v633iqO3BA5ICOheQB3rH9pQeljShNLDkhaUHpZ0lW5n2a17oFGkhqWn9/NnLD932Pvxe62eHs3dgLq9C+lpu+hhSYdGD0shy7tZ9nqv1dPM0cOSZs7dLI9f4PN0aMAB0XYBB0QvBRuQ0CC5G1DHt1qFboommvRTRqLZ72mS0HyZFLwQ/JzgaeuMBb7XA0qhBzQpeHpL/cH33HFJ6C3dDajbEzChDaWGZaBjdTvLXk/AAv0qPSzpVt3N8tjqD3SVwAEJAWEDoksDDohuyt2AOj7/CrRINNGknzISzX7PNgLNlznBRzo1k4KnrTMW+F4PtSI9oEnB01v6APiOG/pEISBsQPSWbgbUsf6hDaWHJU0oPSxpQelhSVfpdpa9uodEo0gPy+u9n2jr1dGX31j+jMjBRXR9txxy5RvFbCMSuIiu74eS9y/rZCeiCBdRgosow0V0eZ3wsN1+XVxsaWUW42v4j3/L697e7psIqZoIubwmXy97F1u7RGLtqth6XPxDmWyozDfKXJ7DHjk3vgJym19xdnARXZ7DbKz7Tdq0Wq+x//sRv9RVEla/Brt3balNSQnht2t/jlSmGWmYZqRR0UjjEkZJOyNN04w0TzPSomikuY60lM1Ii5lmpHaakTpNWcbUGnW10LgOVVGR9BhgNcGMk+1YZaKxKiqUmmPVVCqt/lzdNq8W9FqpLJZZKKE11FRb3Idz5Rvds69mnKz87d3e+THAap371Gq0xSwXW3HpVFde0Os7CDop1wUyaZ185cOeSUGvSWem86M4mQPPc7A31NKhJtG0eti2P9gki7WW4uvOj8cgv8J3Y4fvxw5fxg4/jB1+HDv8NHb4eezwy9DhWzN2+GNnXTt21rVjZ107dta1Y2ddO3bWtWNnXTt21rVjZ103dtZ1Y2ddN3bWdWNnXTd21nVjZ103dtZ1Y2ddN3bWdWNnXT921vVjZ10/dtb1Y2fd689j7Rv+2FnXj511/dhZ14+ddf3YWVfGzroydtaVsbOujJ11rz9bq2/4Y2ddGTvrythZV8bOujJ21g1jZ90wdtYNY2fdMHbWvf5Mg77hj511w9hZN4yddcPYWTeMnXXj2Fk3jp11I3jWzXG5OKeyEz541m2FD551S6x7S/x2PuuPhQubiyXWbUMkmVfY+6sxFK7diOBFCGm+RRO8JiPNt2iCl6ik+RZN8IqdNN+iCd7AkOY7NBN4P0eab9EEb29J8y2a4N0+ab5FE9z8IM23aAppKqJJL0gTTXpBmmjSC9JEk16QJpr0ghTRzPSCNNGkF6SJJr0gTTTpBWmiKaSpiCa9IE006QVpokkvSBNNekGaaNILUkSz0AvSRJNekCaa9II00aQXpImmkKYimvSCNNGkF6SJJr0gTTTpBWmiSS9ID01r6AVpokkvSBNNekGaaNIL0kRTSFMRTXpBmmjSC9JEk16QJpr0gjTRpBekiCb6adqk+RZNekGaaNIL0kSTXpAmmkKaimjSC9JEk16QJpr0gjTRpBekiSa9IEU0Hb0gTTTpBWmiSS9IE016QZpoCmkqokkvSBNNekGaaNIL0kSTXpAmmvSCFNH09II00aQXpIkmvSBNNOkFaaIppKmIJr0gTTTpBWmiSS9IE016QZpo0gtSRFPoBWmiSS9IE016QZpo0gvSRFNIUxFNekGaaNIL0kSTXpAmmvSCNNGkF6SIZqAXpIkmvSBNNOkFaaJJL0gTTSFNRTTpBWmiSS9IE016QZpo0gvSRJNekCKakV6QJpr0gjTRpBekiSa9IE00hTQV0aQXpIkmvSBNNOkFaaJJL0gTTXpBimgmekGaaNIL0kSTXpAmmvSCNNEU0lREk16QJpr0gjTRpBekiSa9IE006QUpopnpBWmiSS9IE016QZpo0gvSRFNIUxFNekGaaNIL0kSTXpAmmvSCNNGkF6SIZqEXpIkmvSBNNOkFaaJJL0gTTSFNRTTpBWmiSS9IE016QZpo0gvSRJNekB6aztAL0kSTXpAmmvSCNNGkF6SJppCmIpr0gjTRpBekiSa9IE006QVpokkvSBFNSy9IE016QZpo0gvSRJNekCaaQpqKaNIL0kSTXpAmmvSCNNGkF6SJJr0gRTQdvSBNNOkFaaJJL0gTTXpBmmgKaSqiSS9IE016QZpo0gvSRJNekCaa9IIU0fT0gjTRpBekiSa9IE006QVpoimkqYgmvSBNNOkFaaJJL0gTTXpBmmjSC1JEU+gFaaJJL0gTTXpBmmjSC9JEU0hTEU16QZpo0gvSRJNekCaa9II00aQXpIhmoBekiSa9IE006QVpokkvSBNNIU1FNOkFaaJJL0gTTXpBmmjSC9JEk16QIpqRXpAmmvSCNNGkF6SJJr0gTTSFNBXRpBekieb1XlAo+Tuaz5AuNzScd+51tW38wH5sgLYMwK3IupR2ro7e2SVuL7L6Pe79ZGJctPExxdfFu78vb5cfmPcurC9+6pipYxcdC3XsoWMy1LGLjpY6/pGOIkvUXkLe6uioYxcdPXX8Mx1TqjoWd3yxK7ne+bcydvdin5ea14nxW0JCQjcTklALfEn5+OJglmuDt+vhPWEGwtQDMxKmHphsXG+HWZY7u+DMKZjsnhXBZAt/N8xYAT2e7thNiZppDqATou2AToiGBjohWiV3E0q+WiUpheOLH4/X6pO2Yre+Shbi1ISTzspIOJ2RZYDOrB5t/0V/kGnDzEqens2s5GnwjEU+LU/FnTXuFHm6QZOSL3SZ+pP3pgbtjW/cufWoutBluptQvwdihYaUIpj0rm6H2e2BWBHC1AOTvtXdMBu+f6G/hE6IPhA6Ifo16IToq9xNqOPjsIeLQ5yacNJZGQlnvycdjxhJflLy9GxmJS8kPxT5Xs+4vKEbNCt5ukwfIP+Aslxs/dkanC4TOiG6TDcT6lkE0ZDSA9PSjlIEk2aUIpj0l26H2a2JsLSMFMEUwvwjmCEsivgQG6/J9dyayVu6NXcT6vaKpLc0YBTBpFejCCZtndth9nrf1VvaOnpgOto6d8M8fq3vMSISAidEAwadEF0VdEJCQjcT6vm2q6OvogonnZWRcHZ8uORow8xKnp7NrORp8IxFvtsDS083aFbydJn6k++5NZP3dJnuJtTvgZinIaUIphDm3TC7PRDzdK4UwaRvdTfMhu/v6S+hE6IPhE6Ifg04IaGvcjehno/DhGaJKpx0VkbC2fFJh9CGmZW8kPyk5GnwjEW+2zMuoRs0K3m6TB8g33PjH6HLhE6ILtPNhDoWQYGGlCKYtKMUwaQZpQgm/aXbYXZrIoIQph6Y17tAYhcNnWQ3CkxvF8m9d2HTFYRIHbvomKhjFx0zdeyiY6GOf6SjSM1fEvJGx2ioYxcdLXX8Mx0/dmh8Y31KdCR0M6F+SxqiJ0w9MIUw9cBk43o7zG7rUyK7Z0Uw2cLfDbPxGn6kOYBOiLYDOKFEQwOdEK2Suwn1XJ2S6KuowklnZSScHV8GSULyk5KnZzMreRo8Y5Hv9oJRohs0K3m6TP3Jd91KMdFluptQvwdimYaUIpj0rm6H2e2BWKZzpQgmfau7YTZ8/ywkBE6IPhA6Ifo16IToq9xNqOfjsEyzRBVOOisj4ez4pKPQhpmVPD2bWcnT4BmLfLdnXIVu0KzkheT7k++5UV+hy4ROiC7TzYR6FkE0pBTBpB2lCCbNKDUwxdBfuh1mryZCDC0jRTDpAv0ZzM8dGn/8vuvj/0VCNxPq9oqkGCFMPTDp1SiCSVvndpi93ncVQ1tHEUzaOnfDPH6tTwy9GnBClgYMOiG6KuiEaJXcTajj265i6auowinEORDOjg+XLG2YWcnTs5mVPA2esch3e2Bp6QbNSp4uU3/yPbdmEkeX6W5C/R6IORpSimDSu7odZrcHYo7OlSKYQpg3w2z4/o7+Ejoh+kDohOjXoBOir3I3oZ6PwxzNEk04PZ2VkXB2fNLhacPMSp6ezazkafCMRb7bMy4vJD8pebpMHyDfceMf8XSZ0AnRZbqZUM8iiIaUIpi0o/TAFJpRimDSX7odZrcmQmgZKYJ5vQsUbb06+vIbzGdIghfS9X1zyBVxFLMTUsQL6frOKHn/8lH2Qsp4IRW4kILBC2m/YnCy/ASjW33JfkjW2OVLrAmrtOHyry9xHb7k8WdRs01Kv33Jnrlga24q5TUde7N/79fVLr8IPJLFXiZLC4C8shS92c2RxpVYtfl5Tb33rikipo5S3GuUXvYutnZJOdauCsfHxU/ZPWW/Q3aZV3bvXzOBl9SSPadqAeZ13H8le6Dsd8gewWW3K9lLS3YbXFUy+dS6+lbh0+XCJ5FqVJim8L5ebcPK3/cmwUmZKWUvKUtnKXPe1pNxv44WW78krsbx3ZeoLD6ixZbmxp9mdJTmO2l8B2m0JtooFOd7cfarbl/fu3n8DTTFGSe9xf1qN/nqbafkfhvu82P7tVqJi0rJuKZKj7m9quRXLkuwe8ZPKab63C62NLpV00xxvhendBAnVIPRhuQb4sT6W052VcY+fL2fASWDFpC9OqDHj8C9/M78W0g7z4XqNhuhvEpBt18EhFh/DWFVXvy4+jlYN9Ng/UyDFU2DrU+wbFy/2lcHG2YabJxpsEnRYGN9HcJGn3cGm2cabJlosNmoSj3yGmzZGSx4BRVl2Z8lrk9e2x1sSbWeLin6Rqnu62wmqxeYdgt1l3Jdcp9Wmu9X9T1bgAxe8/XC8xzsDTWfqSnNFNMYbJIaSHw1Iy4urGTs8MPY4cexw09jh5/HDr8MHX4xY4dvxw7fjR3+2Fm3jJ11y9hZt4yddcvYWbeMnXXL0Fk3mKGzbjBDZ91ghs66wQyddYMZOusGM3TWDWborBvM0Fk3mKGzbjBjZ107dta1Y2ddO3bWtWNnXQuedXN92JRT2QkfPOu2wgfPuq9A7G9HP8W9B08S0/IwRpJZv5QapniyFix4EUKab9EEr8lI8y2a4CUqab5D04FX7KT5Fk3wBoY036IJ3s+R5ls0wdtb0nyLppCmIprg5gdpvkWTXpAmmvSCNNGkF6SJJr0gRTQ9vSBNNOkFaaJJL0gTTXpBmmgKaSqiSS9IE016QZpo0gvSRJNekCaa9IIU0RR6QZpo0gvSRJNekCaa9II00RTSVESTXpAmmvSCNNGkF6SJJr0gTTTpBSmiGegFaaJJL0gTTXpBmmjSC9JEU0hTEU16QZpo0gvSRJNekCaa9II00aQXpIhmpBekiSa9IE006QVpokkvSBNNIU1FNOkFaaJJL0gTTXpBmmjSC9JEk16QIpqJXpAmmvSCNNGkF6SJJr0gTTSFNBXRpBekiSa9IE006QVpokkvSBNNekGKaGZ6QZpo0gvSRJNekCaa9II00RTSVESTXpAmmvSCNNGkF6SJJr0gTTTpBSmiWegFaaJJL0gTTXpBmmjSC9JEU0hTEU16QZpo0gvSRJNekCaa9II00aQXpIdmNPSCNNGkF6SJJr0gTTTpBWmiKaSpiCa9IE006QVpokkvSBNNekGaaNILUkTT0gvSRJNekCaa9II00aQXpImmkKYimvSCNNGkF6SJJr0gTTQv94JKCN/BfEZ0vZ8huf5kgt8Jye025cnKwiHZmBshFWfrT+cVvo1lN/zlWlvSC9mPX/MMv0lnKfeVcrvzclsj9U/IGt8UPOX6B5dD496xSA1kjTL/Ct+PHb6MHX4YO/zYDL+0wnc+mOUv1+f025dsr0614Cj29VduZXeoxvuax4yX1Jhu+k4L6WpprHGv30F0v4nzDCnjhVQuDymmtISU1n8tuz8h8csfi4TVD8LuXVuk5swQfrv251C9mWeodp6hOkVDjabWZntD9fMMVeYZalA01FyHum4B6lDjPENN8ww1a0o2Zs98e41VUbn0GKHUwTrZDlYUFUztwSoqmdqD1VQ0rf5k3U5+FfSqqSweWyihNdaPuXc+5DrA1Oq8xVQHQ1w616aLEA+wuSro1enkeNAr6k54noO9oaYONZEmHxqDTdUGTvF15x8Pbp/h57HDL0OHH8zY4duxw3djh+/HDl/GDj+MHX4cO/yxs24YO+uGsbNuHDvrxrGzbhw768axs24cO+vGsbNuHDvrxrGzbhw768axs24aO+umsbNuGjvrprGzbho766axs24aO+umsbNuGjvrprGzbh476+axs24eO+vmsbNuHjvr5rGzbh476+axs24eO+vmsbNuGTvrlrGzbhk765axs24ZO+uWsbNuGTvrlrGzbhk765ahs24yQ2fdZIbOuskMnXWTGTrrJjN01k1m6KybzNBZN5mhs24y4Fk3x+XinMpO+OBZtxG+Bc+63Lrst4uP124kC16EkOZbNMFrMtJ8iyZ4iUqab9EU0lREE7yBIc23aIL3c6T5Fk3w9pY036IJ3u2T5ls0wc0P0nyHpqMXpIkmvSBNNOkFaaJJL0gTTSFNRTTpBWmiSS9IE016QZpo0gvSRJNekCKanl6QJpr0gjTRpBekiSa9IE00hTQV0aQXpIkmvSBNNOkFaaJJL0gTTXpBimgKvSBNNOkFaaJJL0gTTXpBmmgKaSqiSS9IE016QZpo0gvSRJNekCaa9IIU0UQ/85Q036JJL0gTTXpBmmjSC9JEU0hTEU16QZpo0gvSRJNekCaa9II00aQXpIhmpBekiSa9IE006QVpokkvSBNNIU1FNOkFaaJJL0gTTXpBmmjSC9JEk16QIpqJXpAmmvSCNNGkF6SJJr0gTTSFNBXRpBekiSa9IE006QVpokkvSBNNekGKaGZ6QZpo0gvSRJNekCaa9II00RTSVESTXpAmmvSCNNGkF6SJJr0gTTTpBSmiWegFaaJJL0gTTXpBmmjSC9JEU0hTEU16QZpo0gvSRJNekCaa9II00aQXpIdmNvSCNNGkF6SJJr0gTTTpBWmiKaSpiCa9IE006QVpokkvSBNNekGaaNILUkTT0gvSRJNekCaa9II00aQXpImmkKYimvSCNNGkF6SJJr0gTTTpBWmiSS9IEU1HL0gTTXpBmmjSC9JEk16QJppCmopo0gvSRJNekCaa9II00aQXpIkmvSBFND29IE006QVpokkvSBNNekGaaAppKqJJL0gTTXpBmmjSC9JEk16QJpr0ghTRFHpBmmjSC9JEk16QJpr0gjTRFNJURJNekCaa9II00aQXpIkmvSBNNOkFKaIZ6AVpokkvSBNNekGaaNIL0kRTSFMRTXpBmmjSC9JEk16QJpr0gjTRpBekiGakF6SJJr0gTTTpBWmiSS9IE00hTUU06QVpokkvSBNNekGaaNIL0kSTXpAimolekCaa9II00aQXpIkmvSBNNIU0FdGkF6SJJr0gTTTpBWmiSS9IE016QYpoZnpBmmjSC9JEk16QJpr0gjTRFNJURJNekCaa9II00aQXpIkmvSBNNOkFKaJZ6AVpokkvSBNNekGaaNIL0kRTSFMRTXpBmmjSC9JEk16QJpr0gjTRpBekh2Yx9II00aQXpIkmvSBNNOkFaaIppKmIJr0gTTTpBWmiSS9IE016QZpo0gtSRNPSC9JEk16QJprXe0Gh5O9oPkO63NBw3rnX1bbxA7PO1Z+jW5F1Ke1cHb2zv66OXmT1e9z7ycS4aONjiq+Ld39f3i4/MO9dWF/81FGoYxcdA3XsomOkjl10TNTxj3SUqoiXkLc6ZurYRcdCHf9Mx5SqjsUdX+xKrnf+rYzdvdjnpeZ1YvyGkDMkdDMhCbXAl5SPLw5muTZ4ux7eE6YlTD0wHWHqgcnG9XaYZbmzC86cgimEqQcmW/i7YcYKyMU1oaVEpTmAToi2AzohGhrohGiV3E0o+WqVpBSOL/6xbH6R4/FYaoPT01dRhZPOykg4nZFlgM6sHm3/RX/gacPMSp6ezazkheSHIp+Wp+LOGneKPN2gWcnTZepP3psatDe+cefWo2pPl+luQv0eiHkaUopg0ru6HWa3B2JC50oRTPpWd8Ns+P5CfwmdEH0gdEJCQuCE6KvcTajn4zChWaIKJ52VkXB2fNIhtGFmJU/PZlLygQbPWOS7PeMKdINmJU+X6QPkH1CWi60/WYMHukzohISE7iXUswiiIaUIJu0oRTBpRimCSX/pdpj9mghaRnpgRrpAfwYzBL9cHGLjNbmuWzNFujV3E+r3imSkAaMIJr0aRTCFMO+G2e1910hbRxFM2jp3w2y81hfp1aATogGDToiuCjihRKvkbkI933ZN9FVU4aSzMhLOjg+XEm2YWckLyU9KngbPWOS7PbBMdINmJU+XqT/5rlszJbpMdxPq90As0ZDSAzPTu7odZrcHYpnOlSKY9K3uhtnw/TP9JXRCQkLghOjXoBOir3I3oZ6PwzLNElU46ayMhLPjk45MG2ZS8oWezazkafCMRb7bM65CN2hW8nSZPkC+58Y/RUgInBBdppsJ9SyCaEgpgkk7ShFMmlGKYNJfuh1mpybCGUPLSBHM610gsYuGTrIbBaa3i+Teu/ClK3jo6KhjFx09deyio1DHLjoG6vhHOkpVxEvIWx0jdeyiY6KOf6bjxw6NP1yf8iCUSehmQr2WNDxgFsJUA9MawtQDk43r7TA7rU95wGT3rAgmW/i7YR6+hv8gJCQEToi2AzohGhrohGiV3E2o3+qUB076Kqpw0lkZCWe3l0GccbRhZiVPz2ZW8jR4xiLf7QUjRzdoVvJC8t3Jd9xK8UGILtPdhPo9EHM0pBTBpHd1O8xuD8QcnStFMOlb3Q2z4ft7+kvohOgDoROiX4NOiL7K3YR6Pg7zQpyacNJZGQlnxycdnjbMrOTp2cxKngbPWOS7PePydIMmJS90mT5Avt9GfT+mdxICJ0SX6WZCHYsgoSGlCKYQph6YNKMUwaS/dDvMfk0ELSNFMOkC/RnMzx0a33jfVejW3E2o3yuSgQaMIpj0ahTBpK1zO8xu77sG2jqKYAph3gyz8VpfoFeDTogGDDohuirohGiV3E2o59uugb6KJpyRzspIODs+XIq0YWYlT89mVvI0eMYi3+2BZRSSn5Q8Xab+5LtuzRTpMt1NqN8DsUhDShFMele3w+z2QCzSudIDM9G3uhtmw/dP9JfQCdEHQidEvwadkJDQzYR6Pg5LNEtU4aSzMhLOjk86Em2YWcnTs5mVPA2esch3e8aV6QbNSp4u0wfI99z4J9NlQidEl+lmQh2LoCyEqQcm7ShFMGlGKYJJf+l2mP2aCFpGimBe7wJFW6+OvvwG82dIxeCFdH3fHHJFHMXshOTwQrq+M0rev3yUvZAEL6SAF1LEC6lHxRBc/cGGYBshBbe8bRdWaeDh5f0KKKMFVLACssagBWTRAnJoAXm0gAQtoIAW0P5c7ezyqeR8+i2g58f251Nvl+cQya8K6/1xSEhLqSyhvKrfYveGURd7RfcyUR+1+a94cod4oltSjsTYiMeGWJaIbCj2VeUV+RVSgQvJmstDKiG9QsqyDcniheQ6hJTqX7SkaI9DKvXvuazq4LzbXmZbJ4q4vvQZuceNPMU6o6z2Fd691Luw3NZ79xqmDbsPWIwry/geGci8fvbe7l4vpv6ViHvNbV72LrZ2aXetXZlWfvmtyJSK+1puP/4tqaV4TvURWC72pOKBil+seARWXOK+4s/I96sUcfVDEvO2uLH7xUQItUgLeacmsvsJP9YqJyVrtx9z+0k5Z/8amWnIa1311q3LYVUSml9fYq/4EnfFl/grvkSu+JLQ4Usec8HyJT6b375kp3NwebGynVv1GTbuVkq2GnSP33Zc9Q5u7+pSJzRbVld/c+9cZw+b3Stlu19zjovU5lttErX5Vps8sza+PqjKqxKhalOozXfaeENtvtXGTqxNqufhPLTJW22cJm2csfUxignu5FzsPbX5VhuhNt9qo6ouflebxlysqi7urI2qurizNqrq4je1aeVwbXVxfmnjf7v3z+GKtlK3MVxV1euPjbSWez8eep7MtKKseu2qjbLqtas2MrM2x5lWlFWvXbVRVr121UZZ9fqWNo0KTbS5uvmlTdkpWdQWpLvDDaoK0h/P9epw41kvJOiqXvtqo6t67auNrur1TW2OM23QVb321UZX9dpXG13V63vaNCq0oO2dhFfJEndMpaC3IN0d7vUFqZc6XPGhNdw7XwGOhuJ8L46lON+L4yjO9+J4ivO9OEJxvhcnUJzvxYkU53txEsX5XpxMcb4XhxXy9+IkVsgH4rBCPhCHFfKBOKyQD8QRdHFuXNGZ4CvkO8WBqpCfIXWpS6vf+/hDa4VkXyE9nkH6lYGY4HhlivO9OF3q0tezxq/i/PySbw4AKPXg5WxManxJ9sug149e9qcHX7c5kdV+jN7u3bekKlBJK297X3tfbfPf7rynvEu5Pj9JpTQw9WT6za77pS5Pz8Y2maa4bJny+OfrcUL6NePs7xufTVoiy9aE1ndEqeOIZTWt5b0/qlS3Sc/2NebdPTal3lekrEPfudTU7Y/ErDaGc+XXOL2ScVpff7l29QOr45RJeIZJeMZJeKZJeGYd4/Spbnrh02qTlOU9gf39gT85zlx3zPpRiB0PNNZ9kNPq6PrHw/Rn8Ps7CX8yeGukpmmzekljN/qw2upvvddf2S1f/GtHPeejTevLn6O1U422XfC41saMvm7/5Fc/n+z3/qSyr3sfFrPasu7XfFA8VjiCFU7ACidihZOwwslY4RSkcJwxWOFYrHCgZmVnoGZlZ6BmZWegZmVnoGZlZ6BmZWegZmVnsGZlizUrW6xZ2WLNyhZrVrZYs7LFmpUt1qxssWZlizUrW6xZ2WHNyg5rVnZYs7LDmpUd1qzssGZlhzUrO6xZ2WHNyg5rVvZYs7LHmpU91qzssWZljzUre6xZ2WPNyh5rVvZYs7LHmpUFa1YWrFlZsGZlwZqVBWtWFqxZWbBmZcGalQVrVhasWTlgzcoBa1YOWLNywJqVA9asHLBm5YA1KwesWTlgzcoBa1aOWLNyxJqVI9asHLFm5Yg1K0esWTlizcoRa1aOWLNyxJqVE9asnLBm5YQ1KyesWTlhzcoJa1ZOWLNywpqVE9asnLBm5Yw1K2esWTljzcoZa1bOWLNyxpqVM9asnLFm5Yw1K2esWblgzcoFa1bGWtvnsNb2Oay1fQ5rbZ/DWtvnsNb2Oay1fQ5rbZ/HWtvnsdb2eay1fR5rbZ83ULOyx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX0ea22fx1rb57HW9nmstX2CtbZPsNb2CdbaPsFa2ycGalYWrLV9grW2T7DW9gnW2j7BWtsnWGv7BGttn2Ct7ROstX2CtbZPsNb2CdbaPsFa2ydYa/sEa22fYK3tE6y1fYK1tk+w1vYJ1to+wVrbJ1hr+wRrbZ9gre0TrLV9grW2T7DW9gnW2j7BWtsnWGv7BGttn2Ct7ROstX2CtbZPsNb2CdbaPsFa2ydYa/sEa22fYK3tE6y1fYK1tk+w1vYJ1to+wVrbJ1hr+wRrbZ9gre0TrLV9grW2T7DW9gnW2j7BWtsnWGv7BGttn2Ct7ROstX2CtbZPsNb2CdbaPsFa2ydYa/sEa22fYK3tE6y1fYK1tk+w1vYJ1to+wVrbJ1hr+wRrbZ9gre0TrLV9grW2T7DW9gnW2j7BWtsnWGv7BGttn2Ct7ROstX2CtbZPsNb2CdbaPsFa2ydYa/sEa22fYK3tE6y1fYK1tk+w1vYJ1to+wVrbJ1hr+wRrbV/AWtsXsNb2Bay1fQFrbV8wULNywFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ba21fwFrbF7DW9gWstX0Ra21fxFrbF7HW9kWstX3RQM3KEWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vZFrLV9EWttX8Ra2xex1vYlrLV9CWttX8Ja25ew1vYlAzUrJ6y1fenqtX3FxRpOsOtwthdblyT/uvrx7xhel8vO5c6HvFzufLRpfflzsGmmwWbkwZZUlsF64xuDFbdcHOzrztYtI91PVlJ/+Tk8Lj0eafFl0aWIM6947M7FL+mj86t43DOeb9Y8vhePeFPjSeE4HlskL/d+/Lvks7+db5ZJjjQCd/EInDFFlpCMN/JbSI//+O//61/+9V//5f/+P/713//HP//Hv/z7v/3vHx82P/7P/nqjx0OtX7dLPq5+ZOnnAP37H5H3PxLe/0h8/yPp/Y/szm0pLbNVytuPlLc/sr8e4/gj9v2PfPNLjfWHGjYf8e9/RN7/SHj/I/vVRFz+MHLym4+k9z+S3/9Iefsj37z3nReUuWxQfvNu9uFH3Psf8e9/RI4/Usx2+OH9j8T3P7JLv9jlN1bc5je2/17s8UfK2x/Zf7/0+CO79B9JZMlrxtnfPvOP71z84wvcp7/Af/oL5NNfED79BfHTX5A+/QX5019QPvwF+28Z9vyCT/8lx0//JcdP/yXHT/8lx0//JcdP/yXHT/8lx0//JcdP/yWnT/8lp0//Jafzv6JQu4OQS73WPR26dB5BNEsXG1cG4K/7Z/Ph+9sP3999+P7ls3xLB/2t33GjlvvbD9/fffj+/sP3lw6/n1LvL5v7hw/fP374/unD988fvn/57P2tMZ/+gg/PoNa4T3+B//QXyKe/IHz6C+KnvyB9+gvyp7/gw5WQtebTX/Dpv2T76b9k++m/ZPvpv2T76b9k+9G/5Md/2R9X7v9WbYj1qepvtWbY+ZZcXPVlw/Glj6e19WlbKasUtffULJhabwXj7frin/qMGrgbNXA/auAyauBh1MDjqIGn04EXXx9TBXNd4HnUwMuggTszauB21MDdqIH7zwX+T9+9kNPv9uGzt4+fvX367O3zZ29fPnp7f16cRxsSakfi5csXyPlJ0rr4ep01+69f4D89Avn0F/RgUOo7jw//5OsX5E9/QfnwFwTz6S+wHb4g+9cXlK9f4D79Bf7TXyCf/oLw6S+In/6C9Okv6PCXbH2sXxDd1y8oH/6CaD79BfbTX+A+/QX+018gn/6CDn/Jtr4Db539WrbE+OkvKB8uW9Kn66JkP/0F/tNfIJ/+gvDpL4gf/YLHf7h/+NbCT6m+Xm8ane5rVZSIu6wptnbMsN2YYfsxw5Yxww5jhh3HDDudDTstzxokfZ3Ebf7kzcsHb+7MJ29+dvZ+IK1EvxaQzn3y5v6TNz87X4W6+Dm49F9/YsT2unn85M3TB2/uT2suiz0XZHPzs5HHUJd4J/v15vmDNxf3QVnk9B9RrEBT/K8/sVx73Tx88ubxkzdPn7x5/uTNywdvHky/m+fwX39iDPe6+em/0Fj/Qsvm5qf/QuvcsnNz+eTNwydvfvYvNLqlKIpu8xghffLm+ZM3Lx+8eTz7Fxqt1Jt/9cSj/eTN3Sdv7j95c/nkzcMnbx4/efPU7+Z+8zvPn7z56b/Q1+ol+XrzdPov1ITvb24/eXP3yZuf/gs9qM+TfPLm4ZM3j5+8+ScbrvS5huvxH/7Hhd+8UB9DfWAWUzr+EitueWXHit94RtLhC5KpX1AaF0O9+qxtlHGKUaYpRpmnGGWZYZTOTDFKe+0ood4a1zZKP8UoZYpRhilGGacYZQIZ5T99u1bhnlgKTizeAMWCkpP/6bsNZW+KBSW//dO3i1o+Fktj/cjFyjTW40QobRJSNOHy381frHm5KxoHFY2HikaujuYv1uncFU2EiiZBRZOhoilI0UQDFc3Vc/HfLHG6KxoPFY1ARROgoolQ0SSoaK6ei/9mfdtN0SSH1MEkqH4qCVQ0ESqaBBVNhoqm4ETz+A/5can95hSopfWJq9O6fhwp90/fPSA//kh6/yP5/Y+Utz+y/1Dx4COP/wo/rtx/TudsPUPG2fyaU6033z/2an3I/82H5G8+FP7mQ/FvPpT2P5Trh9zqHZsfH9rx+Et97SeaxrW2vP7GSlrVAaZ8b8LfF06BCmffir8vHIsVjsMKx2OFI1jhBKxwIlY4WLOyx5qVPdasLFizsmDNyoI1KwvWrCxYs3K4+Kd8eGZPuBjV4YbzQZCCCUjBRKRgOiTOWJaL0+p101/9Usif/oLy4S+IHf7Gk18My1TaU455TTk2fJ1yosUKx2GF468Ox9cHcUU2+SEKVjgBK5x4dTirZB63v52EFU7GCqdAhZPMjeFsC8FkscJxWOF0mJWzXcqYEvJfX/tP3z0DuyuYgBRMRAomIQWTkYIpQMFkgxSMRQrGIQWDNANnpBk4I83AGWkGzkgzcEaagTPSDFyQZuCCNAMXpBm4XPzXdGgVf3M89OeiaZyha6GicVDReKhoCtKv2F79K35teuX8NhoLFY2DisZDRSNX/02VGo1sowlQ0USoaBJUNBkqmoIUjTNQ0UBVFA6qonBQFYUTqGgCVDQRKpoEFU2GiqYgReOhujsPNRd7qLnYQ83FHmou9lBzsYeai69+pfe4D7/6jd7j7u7qF3ob0TioaDxUNHJxNIc9gwSoaCJUNAkqmgwVTUGK5upX0hvRXD0XH2bN4KCiQXpf30K9sG+h3ti3UK/s25CgoslQ0RSkaKKBigZqLo44c/Hjv+KPK/dbvMeTtLoL4yODvL7Gue+XnrY+lP/mQ+XtDz3+K/249pv9JfLS1OW0akftwab1xx+x73/Evf8R//5H5P2P7CagEuo+rqu3nH98ZPuD8/U4PZ/WhVHaudbVwzFdTL9d+0/f7VNxTygJJ5SME0rpGMp6t5vn7ffd3H63t5+9/e5feClL12DNagev/fsfir/voHa8v3z4/uGT93/8V/6ZAHa/JYflg3nl6j0eLD8z9PsfSe9/JL//kfL2R/aT2cFHHv9Vfly5n9LEL7ssSV5n3IOtko4/4t//iLz/kfD+R+L7H9n9DYRQTzWI24/k9z9S3v7I/jR6/JFd+iFWL3x1fPDyEff+R/z7H5H3P7JLP9SdouPqsLrlI/H9j6T3P5Lf/0hpfSR//cj+I4rjj9j3P7JfztbFcXG1kHH5iH//I/L+R8L7H9nfLK/u4hdT2Xwkvf+R/P5Hytsf2TdFY91GNBm/+Yh9/yPu/Y/49z8ijY9Yu/lIeP8j8f2P7J+1GZZKJsXN38s3p1AffqS8/ZFvTow+/Mg3p8wuySJtE993pzsffcS//xF5/yP7p7eW2v2aTbL45tTkw4+k9z+S3/9IaXzEytePfHMa8eFH7Psf2aWf4zIp5biZlPZXRR9/RN7/SHj/I/uVf5JaLW+Hn97/SH7/I+Xtj+yvT821vSpmM/z9VaTHH3Hvf8S//xFpfMSmzUfC+x+J739k3xaqZxSUssli++v5jj9S3v7I/tq4g4/81z/+PHL5P/9hNzypvzTJKxHss9H+sf7jP7+psx+P16pLG/1qWrP5+0r78EM/vtD9uDh8d8iXqVsoxxWyh+G9dRCsq+9pPHzjVTaMdudqqReLe93Y73tDZrnWr+7rnyZr+O5MsI+F7usTA/GmEXpJNlQPLPrV1XtbVvtc9u4se36Nq7Ovcyvreffi6JbDXNdv0Dwu/amfp36n9BPqd0q/QP1O6Rep3yn9EvU7pV+mfqf0K9TvjH7fnX1K/f5QP0v9TunH/uOcfuw/zukn1O+Ufuw/zunH/uOcfuw/mvq9njGHtNGP/cc5/dh/nNIvsP84p5+lfqf0Y/9xTj/2H7/r91MUoShbUdgp7IjC8n9HFNb0O6KwUN8RhdX3VpTIknpHFNbJO6Kw+N0RhRXtjihCUbaisKLdEYUV7Y4orGh3RGFFuyMKK9qtKIkV7Y4orGh3RGFFuyMKK9odUYSibEVhRbsjCivaHVFY0e6Iwop2RxRWtFtRMivaHVFY0e6Iwop2RxRWtDuiCEXZisKKdkcUVrRbUcqcE62vu/I6v9pRaBFlzj+flOt+jqmUv774p4Jz/q29o6B9bQRlU9q8YljmbDV7KjhnX9pPwWjmbE3eUjCnZZ2OzcUeX5x93fjVl43YQrF7im2Nr8qZYDdyM8f3ldva13kAUTZysyC4VG5WD5fKzVLjUrnnNNfvktvOadvfJjer7kvlntMBu03uOR9idJL7p4JCBU8qyN7vrIJs55oOualiOOO2CrJDO6sgm66zCu73UY/nX1VBZ44VTLIcS5PKaqfwH8dibq6N9YzNJKv9z3cVkXpGVlif+PG49kfg++dqjRC4HTVwN2rgftTAZdTAw6iBR9jAg61HrIXcuNY+HnfUBmx1Yox7Hucb90/K0zfMPMcwv/FCXazDLHI8zOyWIiiH1qVxKVTyqvZ4Hq0dvcEJxeKEEq8Mxb9+Wz6sK75nLOXaWHyssax+6M9Y5PyvpdTqvTj5qrvYD9/fnb6/NXE52Mea3JiMpB7KI/L6kSX7DMYjBSNIwQSkYCJSMAkpmIwUTAEKJhikYCxSMEgzcECagQPSDByQZuCANAMHpBk4IM3AAWkGjkgzcESagSPSDBxRZuCdS1/HUYq3r4vd3qOD4GqLFZzY9cU/h4kyt394mChZ48PDRMlHHx4mSqb78DBRcuiHh4mSnT87zISS9z88TJSK4sPDRKlVPjzMKaqghOSKJKSmMiG1TqlH62RlWatt3eoorP0ndmV5+pHd6omd2X2dx5nlFTfvrGlcLWmRRPLrrSJr03OcFnicPi1/SV5Mc5zGLbcWk15Xu90w0jK+vLqx23307uorTuKOL3Ul1beWykq2/XnC1Ic0wfjNPNGjQyWYT4DxBIMJRggGE0wgGEwwkWAwwSSCaYCpqzwk+fWlP+XLlO+MfIXynZAvIbeOEPI9Zr86+bmNfOxIT8nHvvGUfOzuWvJVKYJLG/mE8p2Rj53SKfnYz5yRL7NwaclXHxkE2crH1NGQL4alQ47JbuRj6jgln57UYUN92mpXOzi48hyonkm+MVA9JpCVdDRQPXaN9eVooHqMleOBFj2VRGOgyGbFI+A6UJHWQCUvbbEEuzK19rbn8K8Fxj6t3ipw8lQF2YO4TxXk+vA+VYSq7KiCXM3dpwpy6XefKsh14n2qIBeV96mCXIHepcqj8aYqO6qwtt1ThbXtniqsbfdUEaqyowpr2z1VWNvuqcLadk8V1rZ7qrC23VHFsrbdU4W17Z4qrG33VGFtu6eKUJUdVVjb7qnC2nZPFda2e6qwtt1ThbXtjiqOte2eKqxt91SZtLbNr22183qh4S9VJq1tG6oIVdlRZdLaNr82g8/BbFSZtLZtqDJpbdtQZdLaNsdQVUllo8qkte2xKn7S2rahyqS17VqVbW3rZ61tj1WZtbY9VkWuVaX4RZUSXWuc5bW8brV5X965dLUSb7XPnw35/c7QByryRZFIRb4okqjIF0UyFfmiSKEivysihop8UcRSkS+KOCryRRFPRb4oIlTkiyKsWb8qwpr1qyKsWb8qwpr1qyKsWb8oElizflWENetXRVizflWENetXRYSKfFFkwpr1+I2KMGHN2lBkwpq1ociENevxWxRhwpr1WJE4Yc3aUGTCmvX4zYk4Yc3aUGTCmrWhiMytyLZmjTPWrMeKzFizHiuio2aNZok3+tBQ5PEr+HVtzq+K1fr4FERHydpREB0Vaz9Bko6C9R1BSj2ZtqwnHL93OljH84Zz0lEJDyG1jhJ7CKl11O5DSC2U+iqpdXQbQ0ito40ZQur5+qPbpJ6v87pN6vl6urukzuwW/1Lqn+qxATyjHnu6M+qxTfvd+Lr6kDt8QdjyfBGEjckXQdg+fBGERf4XQeYrxe0j2y7xSoiNLB29s/XWq90GdotxH+NyzKiP6XXr3SNJvcsLGe+NHF+80i00jjp1JS1BuFIaEQdja/tg/KZ9KPO1D/x5vPHzmK8/4s/jjZ/HfA0gfx5v/Dzm63D583jj5yH8efDn8f3PYz73Q9fP4yfE+RwbhRDnc5kUQpzPGVMIkW7e8BCLoec2PERrDK2xISha4xYxrPGy5SjkOARHV+9sXfZbjmwX1xyfmrBc2GhiJ8y+2bol3rzaIv2lyYS5LJvw0kR2NJnw2UZTkwkN/aYmMrcmzu5oMmEubmoyoRPa1GRCY7GpyYQ+XXOOnbCObWniZqxjW5qwjt1qwjp2qwnr2K0mQk02mkxex+5qMnnNtquJkpotL7ddh/tDk+colVRhx6P0SuqqxiiVVEqNUSqpfRqjVFLNNEYpU4xSScXRGKUSL6wxSiWVUmOUU9Q+Ss6vbIxSyZmUrVFOUfsoOTuyNcopah8lZzy2Rqmj9kmyvGyRbWv3bBtNfTMjrpwF/+ulJiUHN3aVREdV1VUSHSVYV0l01Gs9JVFyeGNXSXRUD+9IEtISQsirLcke4T4VmS/hRLOE+3gmsKPIfPmmpch86aalyHzZpqGIklPXvlfkOUodTkJrlDqchNYoddQC2S7x5rDTYys5xaw1Sh1OQmuUOmq11ih11F+tUeqoqVqj1FEnNUap5ACv1ih11D65LHsQleZ7YK4edehSXpsJexEsxUaw6fhSF6pJ8fin35gUSk7OGkBoJRUgvtBCoa8RWkkdjC+0klIcX2gl3QC+0EoaEnyhlfRE8EIrOSlrAKHZGV4kNDvDi4RmZ3iR0EKhrxGaneFFQrMzvEhodoYXCc3O8CKh2RleI7SSQ9AGEJqdYSeho6vnrESft0KzM7xIaHaGFwktFPoaodkZXiQ0O8OLhGZneJHQ7AwvEpqd4SVCWyVH9QwgNDvDi4RmZ3iR0OwMLxJaKPQ1QrMzvEhodoYXCc3O8CKh2RleJDQ7w2uEVnKM3ABCszO8SGh2hhcJzc7wIqGFQl8jNDvDi4RmZ3iR0OwMLxKaneFFQrMzvEZoJQczDiA0O8OLhGZneJHQ7AwvEloo9DVCszO8SGh2hp2ETr6uYUneb4VmZ3iR0OwMLxKanWEfocXERTJ5WHXHF/84tmWRzEjZUFFyDq02Kuw5EamwQUWkwm4WkYqQCiAVFrt3UAm5ShaK3VBRclLsaFSOT22zSk62BaDyUkFs3BGaCfwioYVCXyM07ehOQpd6/tvjU2krNO3oi4SmHX2R0KzQ+wgdHmOv10rYCk07+hqhlRwIPYDQbCMvEpqd4UVCszO8SGih0NcIzc7wIqHZGV4kNDvDi4RmZ3iR0OwMOwntzDKysFZhETqyM7xIaHaGvYTOVWjvQuti5ysVeT32dfEXFbaRiFTYcyJSEVIBpMJuFpEKW19EKuyTb6DinJQlBhe2r95FNtWIVNiBA1JJbNc/TuUpNNv1i4RmB36R0GyqLxJaKHQfoX3yr2i37+kltr59hI6mXhutNVuh2c1eJDQb1GuE5tGHvYS2IlXo2LhvlCWEKHHLhLMMHhNOSHhM6JfhMaFbhsbE8URHQCY0Ie5gkhbFYnJbJqy7bmCSvf11bRbZMmHd9XEmT6FZTPUS2tWJ3+7NMqyQrhGax5VdJTQfEV4kNB8RXiQ0q/OLhBYKfY3Q9PkvEppN5EVCszO8SGh2hhcJzc7wGqF5XNlVQrMzvEhodoa9hC65Cl3KVmih0NcIzYblIqHZsHQS2snyJCt6448vDsbWV3qN36zQczxyC5IKWyFEKuybAKnwMC9IKuzIEKmw2L2BSipmufjxz81OVY77vNxBJRtZ9H38M22psDK+hUrIlUoKWyqsjBGpsDIGpMK9KyCpsDL+OJWn0HxWcZHQfIvtIqGFQl8jNPvkTkLnVJ8nF7NdnsaNLnoJXVxdclaC+euLn1TY+iJSYeuLSIWt7w1U8uOxz9JkOb/ZttFltr6IVNj6IlJhn4xIhU01IhUhFUAqbNcRqbC3R6TC3h6RCnt7RCrs7QGpFPb2iFTY2yNSYW+PSIW9PSIVIRVAKuztEamwt0ekwt4ekQp7e0Qq7O3voOL9cuPsQ2zc+Whnc8/d5kcHSMdgcIA0FwYHSB9icIBCgGMDZMcGD/DoLBfPzf/hAR4e/OJ5qAAYwCcVlpa3UKnbx2Qfd/5WWC8iUhFSAaTC51aIVPjcCpEKuyBEKnxuhUiFz60AqfCkB0gq7O0RqbC3R6TC3h6RipAKIBX29ohUWBnfQUVcdfLFbbZSe/j8pHIDlfB6vhKC3VIBzvYhlkWT9BuVZ+TAGbEROXDWaEQO7Jo2Igd2FhuRA7tvjciB8/Bx5ALs4jQiB3Y6GpED1weNyIfNoTJsDpVhc6gMm0Nl2Bwqw+ZQGTaHhmFzaBg2h4Zhc2hAzqFliTyanciRc+hx5Mg59Dhy5Bx6HDlyDj2OHDmHHkYegefz6OpZ2X4ncuC5JYXlvimHdeQ75qY3i2kq3pZ6sYt7LB9RLonCyeboSh+BZ63bNAGeD2/TBHimvU0T4Dn8Nk2AO6y7NEE+MPA2TYCriNs0Ae43b9MEuJO9TRMZUJNn5CNWm8/IkWvCslybVzsy1ciRK7fjyJHrq+PIkaugw8iRT3hqRI5cURxHjpz3jyNHzs7HkSPn0OPIkXPoceTD5lDk0z0akQ+bQ5FPiTiOHPkkhUbkw+ZQ5B35V5G33oe2KS7X2pRfN46/XjBG3uK+5zDHyM6nhzlGKj89zDHyfnOY2S47Xtn1FFSHOUaRcHqYY1QUp4c5RvlxcpiCvN1zz2GOUdicHqaSKqg1TCVVUGuYMscwlVRBrWFOUQUJ8ta7PYc5RRUkZo4qCHm74Z7DnKMKQt7ltucw56iCkPdh7TnMOaog5N0P3xpmqJZXDnkzTOQt0t4aZvJ1mHlL8+o9x6xxyx4g1qw26zi9D0mox0mEvLrt7j4kPsnyE/cpv7YXcfJLFE9RtqIIRdmKEijKVpRIUbaiJIqyFSVTlK0ohaJsRPGGomxFsRRlKwor2h1RWNHuiCIUZSsKK9odUVjR7ojCinZHFFa0O6Kwot2KIqxod0RhRbsjCivaHVGmrGizXZx/v342U0URirIVZcqKtiXKlBVt9rGKsgqiijJlRdsSZcqKtiXKlBVtruc3+JzKRpQwZUXbEmXKirYlypQV7VqUnYo2zFnRNkQRirIVRUtFG80ScWweHpTjcu36PSbr4y9NtBS0PTXRUs/21ERLOfuOJiXKr2vLevLxe3uX9dzoTIKWOnkItaOWAnwMtbVU9mOoraVlGENtLb3IGGoL1b5Q7Rm7p/vUnrEvu0/tGTu++9RmL/nXaj8FZHt4TsDEju+kgGziNhZZYqu11YQN0VYToSYbTdhcbDVhC7DVZMZC/ceKtSWIxwO7RuqO3tl6a5HjUt3HuBwc6GN63dqFvYtdXuB4b+T44tXGDOsXgfYudSUtQbhSGhEHY2tzYfy2uUgzNhf8hbzzC5mxe+Iv5I1fSJ6xPeQv5J1fyIz9L38h7/xCZnQD+At55xcyozei6xfy5CjkqILjjB6URo4z+mYaOdLr08GRjpwKjoU97yAcf1POy5akkOQgJF29s3XZb0myZv2d5FMVZpw9VaZ87pGtW4LI1m9UCWZKrz+b8FJFdlSZMtc3VZnS022qMqWPuVbF2R1VhKrsqDJlvdJUZUrHqqnKlP5Pc7adsrZtqjJnbdtQxbK23VOFte2eKqxt91SZvrbdVUWoyo4q01dxu6qoqeLy8nBkHfAPVZ7jVFOXNcapptI6HqfTUjslWQzQbE3rrzma6pbG1V+zD79E0VI6dRVFS+XUVRQthVNXUYSibEXRYgl2FUVLNfGOKCEtGTnk1ZYDj4B/aqLm2L53NIlmCfhRle9oMmPuaWkyY+ppaTJj5mlpoj/xPMepxZdojVOL09Aap5baINu65XTY6cDVHH/XGKeaE+1a49RSv7XGqaUma41TS53VGqdMMk4t9VAuy7rb0nx+4eqRIS7ldRu+F8GSlh8PNY4vdaG2949/+k17r+YYuQGk1lIVDiC1msIUX2o1tTG81GqO5xtAajUdwv1SR1d3Kok+b6VW06TgS62mT8KXWij1VVKzW7xManaLl0nNbrGb1MnXYi/5nWKP3eJlUrNbvEpqNWdJ3i+1mHokrVgbjy+2RupGGUbKlgtbS0wu7EMxubBpxeQi5ALJhe0wJhd2GfdwCbmKFordcFFzgNxoXBoLD9QcYgfA5aWD2LgjNUusy6QWSn2V1CyEukld6gKGx6fSVmo+F7hMaj4XuExqVuy9pA6P0ddrJWyl5nOBq6RWc6TcAFKztbxManaLl0nNbvEyqYVSXyU1u8XLpGa3eJnU7BYvk5rd4mVSs1vsJrUzdaujtQ6L1IXdYj+p6z6PwbvQutjVI3udbI7sDWqOQNPGhX0oJhc2rZhchFwgubAdxuTC3vkWLs5JWWJwYfsWWWGjjcmFXTkmF7bwF3D5IXVUc67oAFKzK79Majbal0nN3rmb1D75V7RpK7VQ6k5SR1OvjXa1e3GVmh3uZVKzCO8mtRWpUsfGfaMsIUSJWyoswQGpqDkpVRcVFvaIVNgDIFJhu4BIhQ8O7qGS6tE/yW2psAa7hUr29te1WTYrR6OaE1ehqTylZmHVT+o6tGh35ho1p8MOIDVLoMukFkp9ldR0TC+TmtX6ZVLzzZ3LpOZzgMukZmN5ldSe3eJlUrNbvExqdouXSc1u8TKphVJfJTW7xX5Sl1ylLmUrNVuYy6RmC3OZ1GxhukntZHne9WhX/PHFwdj6jqrxmyVoUdjvYHJhc4TJhZ0UJhe2XZhchFwgubDLuIVLKma5+PHPzRZNkQdo38MlG1kUfvxzu5aL5xLfxSXkyiWFLRc+W8fkwvyCyYWWFyYX+mMXcPkpNc9Svk5quliXSc3G4TKp6TV1kzqn+ty5mO1CN55L3E/q4uritRLMX1/85MJ2GJML22FMLmyHb+GSnV8ufvzTbrmwHcbkwnYYkkti74zJhY02Jhd25Zhc2MLfw8X75cbZh9i48+EeOEmIcHSEdBGGR0jDYXiE9CaGR0gbY3SEPF5+BISH+//xgO8BEB5vFsiDw+EQPrmwzLyJS11GkH3c+Xth7YjJhQUhJhc+14LkwpPRQbmwK8LkwudamFz4XAuTi5ALJBf2+5hc2O9jcmG/j8mF/T4mF/b7iFwSD5y+iYu46vOL81surMfu4RJez19CsFsu0PVYiGVRJf3G5Rk7dM3SiB06rzdih859x7FjH9zbiB3aM23EDp2XQ1lij2YndmjvrRG7DBw7dM3QiB07rx7Hjp1XD2PHPhQ0urqXtt+JHXqeSWG5c8rhvw5rZPFmKZLF21IvdnGP5yPOJXE42WxombCPDrxNFei58TZVoGfd21SBns9vUwW6A7tNFeje7i5VsA+Pu00V6H70NlWgO93bVBmztn3GLgPHjl0nlrSY06u1/DV27GruOHbsmus4duzK6Dh27PrlMHbsI5sasWPXAsexY2fs49ix8+px7Nh59Tj2gfOqDJxXsY+3acQ+cF6VgfNqGDivhlHyauu9GZvicq1N+bXGPv56EQX7fKSeAx0lY58eqGgZaLbL1gJ2/TdaBzpKLXB6oKMUDqcHOkqVcXqgo5Qkpwc6Sv1ydqDYx4W8NdBQ00sOeTtQPbNu8nWgeYfo1bOurSdZWrsSfn+gPtarfZTW1aFulRXySsLdt6d9qqe1+JRfL0U7+aVLoi67umTqsqtLoS57uly+9fsouljqsquLoy67unjqsquLUJddXQJ12dVl1no326Vn8OvOruoya73b0mXWerely6z1bvax6rJq1Bdd8qz1bkuXWevdli6z1ru5Ll/3OZWtLrPWuy1dhLrs6jJrvbvWZafezdPWuw1dpq13G7ooqnejWYKOzd1UclyuXT8lsf7XCoOsqNztKEtRVO32lEVRsfuOLCXKr2vLeiLye2t6ui4AKoqq6DEEV1SejyG4UPBrBVfUUIwhuKJOZQzBFbVAYwg+aW91n+CTdm13CZ7NpP3gfYKz0zwj+FNDNo/nNWQ/eF5DoYZmY6Zlw0ZsVxa2S7uysKnZlYWtx64sbBD2ZLGTlvFW6jHfVlbnSe/n8+idrbdenQq+W8j7GHMNOr1u7fbOVfAuL3y8N3J8cfHLi3rr8xp2L3UlLUG4UhoRB1MPQwnGb1sPO2nrwR/JOz+SSXsr/kje+ZFM2jzyR/LOj0T4I+GPpPUjmdQr4I/knR/JpM6Jrh/JE+Wkbo9GlJM6VBpRTuqqKUTp6ASqQUm/Tg1KIcphUP62tZuXLUzWsAPBdPXO1mW/hckqdgPzpzCe2ecbYWZ9QvJ4NrTE8XgCsCPMrE8FsgkvYWRHGKEw+8LM6v42hZnV8VwL4+yOMLPWXk1hZq1jmsLM6m21hJFZnaLW5CuzVr5NYaatfFvCsPL9RhihMPvCsPL9RhhWvt8Iw8r3G2FY4O0LEzQVeHl5vLKO+ce3PIeqqWRrDFVTEdYYqqKyKslinmbb2vLPRlOd1rj6y/a/nllcfpTeKLooKqq66qKopuqqi6KSqqsuirzEnrpERVXGO7qEtKTpkFe7IDxifsoyaTqKZon5UbbvyDJpNmrJMmkyaskyaS5qyTJFKnoOVZGP0RiqpjMGW0NVVDNkWzfRDjvtuqaTAFtDVeRMtIYq8wxVUcXWGqqiKqw1VEWVVWuoiqqlXJY1waX5KMTVI1Jcyuu2fXuplCVdB5uOL3Wh2gGPf/qNHaDpRD18tTWd0zeA2prKVny1NVXO+GprKt7x1Raq3VHt6Oq+KtHnrdqaWhh8tTV1Ufhqa2rk8NVmL3ml2uwlL1Rb0ymYAGonXyvA5LcVoKbDNQdQm73klWqzl+yotph6TK9YG48vtkbqzh5GyhaNEA0qGnapsGjY0sKiYf8Li4bNMiiaounAxdHQhFx1C8Vu0QjR3IXmeKlD0XSGHwCalxRi447aLLquVJt11JVqszTqqXap6yUen0pbtfkc4UK1NR27OIDarOQ7qh0eAtRrJWzV5nOEK9Xmc4Qr1RaqfaHa7CWvVJu95JVqs5e8Um32kleqzV7yQrU1Hdw1gNrsJa9Um71kT7WdqfsxraWoarOX7Kp23aQyeBdaF7t6krGT1xPPXycZF03nwGlDwy4VFg1bWlg07H9h0bBZhkXDzvouNM5JWWJwYftOmmcbDouGPTssGjb416B5qs0G/0q1hWpfqDbb8CvVZmfdU22fatkvZvsCm6bDa+9XO5p6bbSrrZer2ux/L1Rb06GpAGpbkap2bNw3yhJClLgFw9IcFAyreFAwQjCYYNgbgIJhGwEKhg8abgOT6sFGyW3AaDrFdTAw2S9jy7JdrqrpzFloME+1hWr3VNvVZGD3Jh3WT1eqzaLoSrXprV6pNr3VK9VmFX+h2pFvAF2pNp8bXKk2284r1WYveaXaQrUvVJu95JVqs5e8Um32kleqzV6yq9olV7XLdjvkxO7mSrXZ3VypNrubnmo7WeKN/veDPbcXB2Prq6/Gb1e8JbZCsGiEaFDRsMmCRcOODBYN2zdUNJndx11oUqmDe/xzu2sUTw6/DU02soj8+Od23RiPYr4RTcgVTQpbNHw0j4qGhzzjoqEtBouGHto1aJ5q0xa7Um2h2heqzYbiSrXpR/VUO6f6zLqY7bo6HsXcVe3i6lq5EsxfX/xEw2YZFg2bZUw0zhg2y3ehyc4vFz/+abdo2CzDomGzDIuGnTUsGiEaVDTs2WHRsMG/DY33y42zD7Fx54MNeR4UaRxooEiPQQNF2hEKKFo6Fxoo0uTQQFFIcQiKB3sTPiiyRh2C4tFGhg+KrFEBKT7RsPC8D01doJAfo9ug4SnsuGhYIsKi4XMwWDR8DgaLRogGFQ2fg8Gi4XMwWDQ0DmDR0A2ARUM3ABUND4PHRUM3ABYN3QBYNOxrbkMjrj4UEOe3aFih3YYmvJ7XhLB99dKDV2j11PHHP+W3q3+GL+BVTCt88EzfCh88G7bCB/ePW+HL2OGD5+tSlvCTMTvhg3t1rfDB/axW+OAVRSt88KzbCD+AZ91W+NjzfnJSw3dxJ3zsmSelWk2ntBc+9szTDB975skmLeFnCTvhY888rfDBD7Brho9d7zfDx673m+Fjz/vN8GXs8LHr/Wb42Fm3GT521m2GP3bWjWNnXfCDlZrhj511wY/+aYY/dta9/AgZF+qd3RffbOcJQ8hLr+uisa2rXagPJFwq9Wq3+0TCLXcWcceXupKWjXddWanxo3vdXHx8jsJD8EDBrxU8UvBrBU8U/FrBMwW/VvBCwS8V/PLDh2AET8vrDZL8+tKnLJay7MniKMueLH5SWULtmIJxW1mEsuzJMmuf0pBl1m4i1BEGl7ayzFrzN2SZtTI/lqXMWreEugdTkB1ZZs1EsR5sFZPdyjJrJmrIcnkmMi9ZSmug4kusreLq0JtqPF9+Dkvn8PPY4ZeRw7eXn3nROXw7dvhu7PD92OHL2OGHscMfOutaM3TWtWborGvN2FnXjp117dhZ146dde3YWffy/ZE7hz921rXYWVdqUy/yZVHF3mDN8qxTvF1ZALsPRh+hViNNNg9GrcXO5zcKg10p3CgMdg1ynzAOu7q5URjsuulGYbArshuFwa71bhRGKMy+MNj16Y3CYFe+oe6MJEH8pcJgV743CoNd+d4oDHble58wHrvyvVEY7Mr3RmGwK98bhcGufG8URijMvjDYle+NwoBXvrkKE61cKgx45XufMOCV733CgFe+twkj4JXvfcKAV773CQNe+d4nDHjle58wQmH2hQGvfO8TBrvyjUGqMCU0rs5xuXXOqzv7ZajYtWzXoWJXp12Hil1vvjXUEpeLSza/DfXDs0DArk0HERG7jh1EROyadxARsevjQUQUinheROy6exARFdXo94moqPq/T0RFfcV9Ik7Rsfwcapyir3gOdYrq/znUKWr051CnqKSfQ5V5hqqoKn08DKl7dEuIjUQWvVuujl4aO2X6GJdNYXxcvYq8u4GMd7meteSNHF9c/LJT+PrUzY/v7Wmjokqa4N8Br6j6J/h3wCvqWAj+HfCKuiyCfwN8UtRzEvw74BV14LrAP/Eocg004lHkdGjEI8SDjIeOEjQe+j7QeNir3YvHGrdsOmGNlw2gzNrtZkCu3tm67LeAJqnenoOdZDZ/DlaTc53tss7h8U+/M1hNbm024TVY2RmspqzXGmzR5Mo1B6vJiVoP1tmdwWqqDZqD1ZRnm4OVmQarqYNvTlCaKqjmYFVVUK3BzlRBgZ8s1HWwDvwcos6D1VpB7Q5WawW1O1iZabDYqSfZOthkf99q9mf44Odo5NeuCTnLTvjQVU4wfrl1sMm0fmrm8YS2WrRuZZ54G34NF/rH1n+40JVO/+FC1zrdh4t9QkL/4ULXO/2HC13x9B8udB7tP1yZa7jQzlH/4c5VVWHv/d9/uHNVVdj79HcfLvbu+/2HO1dVhb1Tfv/hzlVVYe9q33+4c1VV2DvQ9x/uXFUV9m7x/Yc7V1WFvbN7/+GqqqoexupruN79Nty9wG194mPja5RefmmjqgTrrI2qeq2zNjKxNlJPZH/8M221UVUJdtZGVdnYWRtVNeab2rxWotiY81YbVQVpZ21UVa99tcHeKP5mbWaui1vazFwXt7SZuS5uaSPU5lttZq6LW9rMXBe3tGFd/L02rIu/14Z18bfaYG90frM2rIu/14Z18ffa6Kpv1o9VcvhNm+dwVaUe71/D9ZIaPwWX8mKPu/Qj2q8/BVWp5z1tbAr1ryqlrc2Jvd/pzdqoSj2dtZGJtcnptRHNKpYfW19tLs5+mZuy305NSVU39UEZHzes6d4EuxVy4vz3npCNZ8nYu+kNJGSeObN2FXLmNNxVSFXt4p1CqnrmcqeQQiH7CKnK7bhTSFWPfroJ+dSGzcr32szsvxlTz2ExbkebiVuKljbYO5verM04hX92jat7ngHtsDdNvVOYcQrzi4URCrMvzDiF88XCjFMIXyzMOFXwxcKMUwJfLMw49e+lwnjsTWnvFAa78nW2CuPs71c/w8euT5vhY1eRzfBl7PCxK7Jm+Nh1UzN87OrG+VjD92knfOwapBk+dqXQCt9i5/Nm+OBZtxU+eNZthQ8+70dbw49+J3zsmcdXqzV4uxc+9szTCh98w+dm+Ngzjxep4aeyEz72zNMMH7veb4YvY4ePPe83w8eu95vhY9f7zfDBs24rfPCs2wgffEPgZvhjZ13wDXub4Y+ddcE31G2GP3bWBd/wthn+OFl3tbT2m7d+UkzLvdPqMUkMv8Y6Too+P9Zx8vnpsYLvW9t3rONUCu2xZrs4WTZ7ux3rOGXF+bGOU4OcH6tMNNZxqpvzYx2nFDo/Vk11U2usmuqm1lg11U2NsYJvgtp3rBPVTeCblPYd60R1E/gmon3HOlHdBL7JZ9+xTlQ3gW/C2XesE9VN4Jtk9h2rqvwaqreWQ96OVdU8/NqnMecdrlfPw4/HVMvFj0c+v0X/DCijBVTAArp8g8RmQBYtIIcWkEcLSNACCmgBRbSA0GbqhDZTJ7SZOqPN1Bltps5oM3VGm6kz2kyd0WbqjDZTX74rlZi6g5i41OgIclzCWPcD1v9a6Hv5tlFdgy8DB3/5xktvBV/i8qMv2fwW/PbarivPL99zaRBZHGXZk8VTlj1ZhLLsyRIoy54skbLsyQJd190nC3TFeJ8s0LXoXbKImaHKfY50hsL1OdIZatHnSActL5/By8jBD1qqPYMftKB6Bj9o2fMMftDi5Bk8dAlhHzNkvTrExswavVuujl7kuIjwr6M0fUyvW7u9Tbu9y4uK3hs5vrj45dWPEszxpa6kuhl4KY2Ig7G17DF+W/ZY6LKHKN9BCV3XEeU7KKELV6J8ByV0ZU6U76AUotSCErpr04XyKTh0p6lRcOjuWKPg0B29RsHpQlwruKNXcLHg7B16C26Nq0M0XraSs07pLrmrd7Yu+63kw1YqP8P3w86Kz/CxXcNsX4fJrvcDr+FjO2X5dXW2shM+9gzfDF/GDh/bBViH7+xO+Ni5qhk+9rzfDB+732uGj909tf50BTvrNsMHz7qt8MfOujJ21r18f8rO4Y+TdXfDHyfr7oY/TtraC//yffIeP9cavmwP45LLN8cK9T3mxz+3qzwlXj03x1w7zJhlJ6Cr/95zKPU3VPYUimgBJbSAMlhAl++cUupmRo9/5p2Arv5Rl5dCJfudgDr8qN1r0C41Ln7FU1ZbQ3m7++g+LnOoSy8t/d6lUha/J9h0fKkLZrn28U+/vvipSKIiXxTJVOSLIoWK/K5Ij71hlCliqcgXRdx0ikRXXz6LPm8V8VTkiyJCRb4oEqjIF0Xmq1lbisxXs7YUma9mTb5m3+R3su98NWtDkTJfzdpSZL7sm17LA1LeziNlupn18aRieblQZB3Dosh0M+vDrK+7KIRcvioSzHSdnkS73Pbxz7hVZLq+5pFMFlf28am0VWS6mbWpyHR9TXj49fVaCVtFputrmopMl32bikyXfZuKTNfXtBSx0/U1TUWmq9CaikznxTcVma5mbSoiVOSLIqxZvyrCmvWrIqxZvyrCmvWrIqxZvyjiWLN+VWS+mtWZxXkO6zcbqyLz1awtRearWVuKCBX5osh8NWtLkflqVperIt6F1sWHW94HN1+B21W++arhrvLNVzr3lM/PV2d3lW/CorynfBNW8G/Il1xYXkZKLm1fq/ATlvsd5RP+8R7K59MSb/I7rzn12D9As3xilrEl2XknSlj3HV3snCzxuodBupWPdd8Z+QLrvlPyMXV8VYSl3FdFWJ19VUSoyBdF5jNjfaotoZjta8BhOjM2mnpttNZsFZnOX20pEqcrXqKt4UYbG/eNda+pKNu+I05XuvQUb7oqp6d40xVEPcUTivf34k1XZvUUbzqj6j3x0rKsLSa3ES8x2x5dnOuxAnl1skQVj9n2qyITptB60kq0e39gE+bFhiITJruGIvN5Ci1F5vMUWopMWOU0FJnuCVtLkfk2tWwqMmF521Bkwpq1oQhr1q+KCBX5oghr1q+KsGb9qsiENWvJVZGyfQNvvi0cW4rMt4VjU5H5KjQnr/Nqf992fHtxMLa+jmD89g31Ml8511W++Wq/rvIJ5Tsj33xVZVf55itBu8o3X3X2jnypmOXixz83q7LjfKuy35IvG1mEePwzbeXjr+9Yvro2LJsUNvLNty62r3zsOk7Jx67jlHzsOr4qIlTkiyLsDb4qwoLrqyLzOc45VQ++mLhVZL63JIqr73eWYP764qd88xXlPeWT+YryrvLNV5S/I192frn48U+7lW++oryrfPMV5V3lE8p3Rr75yv2u8s3XG3SVb75G4i35fD2GMvsQG3c+WqwW59tV6Tal2ctcpPR8ezXdpjQ7pKuUZjN1ldKsfPspfbTWOwbWHt2UPlwYHgNrj79U+qd8E+6f9J589cWu7OP21zfhDkpd5WPqPyUffdRT8gnlOyMfq8lT8tFHPSUffdRT8rFBOSUfu44z8iV2HafkY9dxSj52HafkY9dxSj7WfYfyST37+PHP7Yu4E25F9ZZ84eX3he1pJfHqfaussYt+1oTSEDCauoGBeV3rUvoVvB05eDdy8B46+PrKTRSzE7yMHHwYOfgIHXx8PcLbCz6NHHweOPiCPdvkUtOx3Qke+jef0zLPlx//+yZ46N98iUttU5LfCR76N98KvowbfDLQVeUq+Ox2goeuKlvBQ1eVJdoafNoJHnqeLyEcBi8jBw9dVbaCh86w1hhTrzZ5J3zsHFvkMHqL3cYe1mbJQk84KddTokvYCR56wmkFDz3htIKHnnBawUNPNynFGnzcCR66pG8FD13SN4J30CV9K3jokr4VPHSGbQWPnWEbwWNn2PTa5W9nnnfYGbYRPHaGrTvhZGt2gsfOsLEcBo+dYRvBY2fY4+A9dIbNbrlz9judlIfOsK3goTNsK3joDJurfVDM3m8eOsO2gofOsK3gsR9LNYKHzrA5xxr83h8sdIZtBQ+dYRvBC3aGbQSPnWEbwWNn2Ebw2Bm2ETx2hn0Fv1cSC3aGzfWx1M67E0kGfvEjCXaGbQSPnWEbwWNn2OPgA3aGbQSPnWEbwV88z+taRpC4FU5DvlhNCIllKx8XsZySj4uXT8nHxcun5OMSqmP5XkfKSNrsnZ64ZdI5+bh4+ZR8XLx8Sj4uXj4ln1C+M/Kx6zglH7uOP5dvW/dxy6SWfKnKV9zxxa5Ue8aVlWou7lzcOB44cTMmVDDslDDBcAMpVDDs7kDBsG8EBcOe4BBMsPXN8S93fsrH2ulYvsP9oBK30zolX2Ydcko+Vgun5BPKdyJ1ZGbeY/mkbmQZtqcJpUw37pR8dONOyce675R8rPvOyFdY952Sj3XfKfno5ZySj+8ANLqOfCifUL4z8rHrOCUfu45T8rHr+GP5wvYNlMKu45R87DpOyJcNu45T8rHrOJYv1GUDYXtwTTbsOk7Jx67jlHxC+c7Ix67jlHzsOk7Jx67jlHzsOhp139Fj8mzYdZyRz7LrOCUfu45T8rHrOCUfu45T8gnlOyMfu45T8rHrOCUfu45T8rHrOCUfu44z8jl2HafkY9dxSj52HafkY9dxSj7WfYfy+Zd8PsTji5NdbpzsjtIsEa9SmtXkRUp7pv5+SvvlTeLkt89lrj7NRLXS9ajovPebppHUTensXzsd+K3SrD2uUpq1x1VKs/a4SmmaXhcpLfTH+iktVem4ozTr6auUput2ldI06DrO07VzkW2PePV5XBMrzR7xKqXZI16lNHvEq5Rmj3iV0uwRL1I6sEe8Smn2iFcpzR7xKqXZI16ltFDpi5Rmj3iV0uwRr1KaPeJVSrNHvEhpHhLZT+njd5h4nmRHpes7TCnFrdKsp/spXarSZUdpodIXKc16+iqlWU9fpTTr6X5K51yVTlulWU9fpTSfuVykNE+mvExp9ohXKc0e8Sql2SNepbRQ6YuUZo/YUWl/pDR7xKuUZo94ldLsEa9Smj3iB5TOZruamacGX6Y0e8SrlGaPeJXS7BH7KZ1KVdptlRYqfZHS7BGvUpo94lVKs0e8Smn2iFcpzR7xIqV5wvhHlN7ZW4yHkXdU+nAXN55bfpnS7BGvUlqo9EVKs0e8Smn2iFcpPV897WQRJHrjG0obibVGls0jqzLhgdjvyRfrgdgmyVa++SrfrvLNV852lW++GrWrfEL5DuVLL/mK2co3XzXZVb75SsSu8s33bKCrfPMZ/l3lY9dxRr4JD8TuKh+7jmP5wqruC1v52HWcko9dxyn5hPKdkY9dxyn52HWcko9dxyn52HWcko9dxxn5JjwQu6t87DpOyceu45R87DpOySeU74x87DpOyceu45R8rPuOLk7FvHajM5uj2opn3Xcsn5Uqn4tb+Vj3nZKPdd8p+Vj3nZJPKN8Z+Vj3nZKPdd8p+eg2n5KPbvMp+dh1nJFvwuPlu8rHruOUfOw6TsnHruOUfEL5zsjHruOUfPPVfbaGG21s3DfZZaFm2q6nLBOeLd1PvAmPi+4o3nw59y3xjg6hKxMeFvqWeEdryMuE53++I172aRFPtk/XJjzSs6N4zLZ/L15ktj0h3nz+Skfx5nNX3hJPqnhxRzzWeSfEE4r39+LN56u8N+cdHCheJjw+taN47DBOiMcO44R47DD+XrwJjyLtKB47jBPiscM4IR47jBPiCcX7e/HYYZwQjx3GCfHYYZwQjx3GCfHYYfy9eBMeZNlRPNZ5RxcfvzEw4dF8f/fGQErbV8wmPG3vLfHKa0Hujnis806IxzrvhHis806IxzrvULycq3jbczYmPIyuo3h0kk+IRyf5hHjsME6IJxTv78Vjh3FCPHYYJ8Rjh3Esnj8Sjx3GCfHYYfyteN5MeJJfR/HYYfyZeNnYrXjsME6Ixw7jhHhC8f5ePHYYh+KlUsVzW/HYYZwQjx3GCfHYYZwQjx3G34s34al9HcVjh3FCPHYYfyie3dZ5E57X12trkId4QvH+Xjx2GCfEY4dxQjx2GCfEY4fx9+LNd0pacHnZdCF4Fxri+VqrJJ/LVr7pKr335BOzjC2JjVv5pqv1+sonlO+MfNPVe33lm67i6yvfdDVfX/mmq/r6yjeds9xVvvnO6OsrH7uOU/Kx6zglH7uOU/IJ5TsjH7uOU/Kx6zglH7uOM/LNd0qay7beNrutAzrfwWdNRaarzpqKTFdwNRURKvJFkenKoqYi01U6TUWmK16aikzngrpillO5fhxgdnyxfQi0jM3IjnzTuaBd5Zvv/Li+8s1XOneVb746u6t88xXlXeUTynckn63xWpu3752F+cr9rvLN1xt0lW++RqKrfOw6/li+sjWR5ztR7j35XD132brNTsAP+Tj3HconpcoX7I58nPtOyce575R8dFzOyDffyQ/vyRfyS76yLVwyHZdD+aJxVYidX1+e0HFJvsq3sxHXfBvrNxWZsDprKDJhwdVQZMIsdqzIfPute5+XdaleTNgqMl2T3FRkulzjQ16u9dFsjZT59k1uKjJdrvHR1r+a6Hdm1ulyzeM3slIkf1XEzrd5bFOR6foaH9MyNp9Moy2MsoQQJW7Fmy9RdxRPKN7fizdfQdRRvPlqp47iTVhmdRNvvn053xMvLYZtTG4rHrPt0cVHB/A+xGO2/arIhCk0pJciO7+RCfNiQ5EJk11Dkfk8hZYi0z3WbyniJqxyGorM5zu1FJnQd2ooMmF521BEqMgXRVizflWENetXRVizflWENesXRebbw6+pCCu0r4qwQvuqCCu0r4rwScrRxamu5knb8wfsfPuR9RRvwpzeTbz5Ni57TzxfD6DersGz8+1f9Z54R2eu2Pm2unrzGd6SbrP4rXjMtifEY7Y9IR6z7QnxJnxA1E28+fbZek88qeLFHfFY550Qj29GnxCP72odz3lH72rNt79WT/HYYZwQjx3GCfHYYZwQjx3GCfHYYfy9eJEdxgnx2GGcEI8dxgnx2GGcEE8o3t+Lxw7jhHjsME6Ixw7jhHjsMP5evMQ67+ji4zcGEuu8Q/HqGwMpbZdMJ9Z5h+KVKl7ZEU8o3t+LxzrvhHis806IxzrvULycq3hpKx7rvBPi0Un+e/EyneQT4rHDOCEeO4wT4rHDOCGeULy/F48dxrF4/kg8dhgnxGOHcUI8dhgnxGOH8WfiZbNdPjXhWQkdxWOHcUI8dhgnxGOHcSheKlW87bavRSje34vHDuOEeOwwTojHDuOEeOwwTojHDuOvxXOGHcYfirfd3cJNeLxQt61BHE8iOiMeO4wT4gnF+3vx2GGcEI8dxgnxpqvzeh4I7+Y7i+jNA+GdrUJsX+p2drpar69801V7feWbrt7rK59QvkP5bHrJF7byTVfz9ZVvuqqvr3zTOct95ZvOW+4rH7uOM/LNdzZYX/nYdRzLZ1wVwm7rvvlOHesrH7uOU/IJ5TsjH7uOU/Kx6zglH7uOU/Kx6zglH7uOM/LNd95dX/nYdZySj13HKfnYdZySTyjfGfnYdZySj13HKfk61H1W6nsgDwencXF5aV3kJYo19hmQmKsDSqEGlN1OQBYtIIcWkEcLSK4OKC93dsb6nYACWkARLaCEFlBGC6iABRQMWkAWLSCHFpBHCwhtpg5oM3W4fKauBe4jtr2AElpAGS2gAhZQNGgBWbSAHFpAHi0gQQsooAWENlNHtJk6os3UEW2mTmgzdUKbqdPV81DMrzf9s+wEdPU8lGwNKNkdBy1FtIASWkAZLaCr56HkqiucpGwDygYtIIsWkEMLyKMFJGgBBbSArp6pYwmveWgvoIQWUEYLqIAFVAxaQBYtIIcWkEcLSNACCmgBoc3UBW2mLmgzdQGbqb0Bm6m9AZupvbl6Hgpu2VX38c+wE9DV81AItWIMIe8EFNECSmgBZbSArp6HQnwFtHpFrQZkDVpAFi0ghxaQRwtI0AIKaAFdPlP7+JqHdpKrTWgBZbSAClhAzqAFZNECcmgBebSABC2ggBYQ2kzt0GZqhzZTO7SZ2l/e26+2cXGyE5BFC8ihBeTRArp6po4u1zuHtBNQQAsoogWU0ALKaAEVsIAuX1/WDOjymdq8XmjaMz0vX1/WDMijBSRoAQW0gCJaQAktoIwWUAEL6PL1Zc2A0GbqgDZTB7SZ+vLVUyL1EafITra/fPWUpLreXrLZCSijBVTAArp89VQzoKvnIcmvgMqO+3H56qlmQB4tIEELKKAFFNECSmgBXT5Th/yah3YecV6+eqoV0OWrp5oBWbSAHFpAHi0gQQsooAUU0QJKaAGhzdQJbabOaDN1RpupM9pMndFm6stXT4l59fbu995+72pfrQkJ8XW1jztXR1/PE4sPe7le7fYuftTKizI/Trt8Xby3AeCPdXjLxd7I8cXWuDpE43+7+Cl5ouQXS375+q4ZJC81aGvyVnJLya+W3FHyqyX3lPxqyYWSd5c8+5fkZSt5oORXS866/HLJWZdfLnmm5FdLXij5tZKLYfd5ueTsPrtLbl/LNx5CbiVn93m55Ow+L5dcKPnVkrP7vFxydp+XS87u83LJ2X32l7y8ToGzZis5u8+rJbesy7tL7uqdrVvtr14lZ11+ueRCya+WnEXi5ZKzSLxcchaJl0vOIvFqyS/fAsyZemf3Zee/7dXB1/OOg8+5BSiHukdMXm0mGpexek1jfa13yqt717HKRGMNE401TjTWNNFY80RjLfOM9fKt7e4cq51orKrqpsZYJ6qbLt9G8M6xqqqbUn0vKOedsaqqmxpjVVU3Ncaqqm5qjFVV3XQ8VlFVNzXGqqpuaoxVVd3UGKuquqkxVplorBPVTTJR3SQT1U0yUd0kE9VNYaK6KWDnVxeXB4CPf/rfrn6Gj50yXU41/JJ3wsfOgs3wsRNbM3zsXNUMHzv9NMPHziit8CN2kmiGj90vu7oB8WMkshM+dgvcDB8867bCB8+6rfDBs24rfPCs2wofPOu2wgfPuq3wwbNuI/wEnnVb4Y+dddPYWTeNnXUv3xe6c/hjZ900dtZNY2fdBG611h1Ug/d2J3xw97QRfgY3RFvhgz8bboUP/rjXxlf4bid88Ce4rfCxs24zfPDnrK3wwR+dtsIHfxraCh8867bCB8+6Jtfw7c6zrQKedVvhg2fdVvjgWbcVPnjWbYUPnnVb4YNn3Vb44Fm3FT541m2FD551W+EPnXWDGTrrBoM97xu/3DrYZBpXW+N9fXnJ+NVhxt7urtPPyS2Xr9fq/DjTZnNx9kvXnX1ZX/qUETv/4MhojamjNHZHSOy5eCAhsbPCQEJi5yckIX3d9sQEuxHSYmfKgYTE7pQHEhK7Zx9ISFaRnYQUCtlHSGxHZSAhsb2dgYRkZ/OnQobX+bIxb4VkZ9NJSHY2fYR07Gw6CcnOppOQ7Gw6CcnOppOQQiHfryP3hGRn06cgB9/WdSAh2dl0EpKdTSch2dn0ERJ8K92BhGRn00lIdjadhGRn00lIoZB9hGRn00lIdjadhGRB3klIFuR9hATfo3kgIVmQdxJSVAlpXy+D+vXboDb8Gq6uIqU5XF2lRHO4uqzM5nB11TfN4eqqQlrDBd+XuPtwdWX05nB1GWHN4eqyq5rDlbmGO1dVBb4RdvfhzlVVgW+03X24c1VV4Bt5dx/uXFUV+Ebh3Yc7V1UFvhH5m8N1Jb6Ga34f7l7gtr6gaaNsfDzwXc4/q41zpcaytk8XbVTVa521UVXcddZGVSXYWRtVZeO72tRzqux6/+JFG/CN0z+rjbwul7L93YDvyn6vNkJtvtVm5vom2joXR4lbbWaub1razFzftLSZub5paTNzfdPQBvyAgHu1UWW4ddZm5rq4pc3MdXFLG6E232rDuvh7bVgXf68N6+LvtWFd/L02U9fFsb5LHfN2bwfwIzzu1WbqurihzdR1cUObqevihjZCbb7VZuYcLvXYCCvuNy99e/HhyQjRzDxtvyNjY51VNFM/E+wp5NQPEN8R8viNoWhmzh5dhZzZgukq5Mx+TVchZzZ3ugrJKrKTkDPbRj2F1HUMz51CsrPpJCQ7m05CsrPpJKRQyB0hn9qwWfleG/Yf32vDluJ7bdglfK8NC/9vtdF18My72kjd80xC3GozdXne0GbqiruhzdRFdEMboTbfajN1XdzQZuq6uKHN1HVxQ5up6+KGNlPXxcfa6Dq2pLM2rIu/14Z18ffacN39U5vt2vKo6wiQztpMXRc3tJmm9nsOd5py7jncaSq0n8PVdTRFe7h82LrnS28vPn4/XNfxER99rdnUURq7IySfr3USkg/jOgnJJ3d/KuTxigVdBzncKSRf2eskJF/Z6yQkq8hOQgqF7CMk3+/rJCRfBuwkJDubPxUy1NeaTcxbIdnZdBKSnU0fIXUdpnKnkOxsOgnJzqaTkOxsOgkpFPL9OnJPSHY2fQryqY/D6SokO5tOQrKz6SQkO5s+QiZ2Np2EZGfTSUh2Np2EZGfTSUihkH2EZGfTSUh2Np2EZEHeSUgW5H2EnPrMqa5CsiDvJKQgCyk5u19XP/4pv139DB+66JBiavjF5J3woVN9O3xo67AdPnR90A4fOitLsa/wxWzDxz5nph0+dAZqhw9txLTDh7Y/2uFjZ91m+OBZtxU+dtbNJbzm/bITPnbWbYaPnXWb4WNn3Ub4yWBn3Wb42Fm3GT521m2Gj511m+FjZ91m+NhZtxn+0Fk3YZ9G0g5/6KybsE/eaIaPfd5FO/yxsy72TvryiG8JP9m4Ez72vJ98qeFH2Qkfe95vho897zfDx573m+Fjz/ut8LH3Rm+Hjz3vN8PH7raSSzV8vzPvY28C3g4fPOu2wgfPuq3wwbNuK3zwrNsKHzzrtsIHz7qN8LF3Xm6HD551W+GPnXWxtxhuhz921sXeqLcd/thZF3sr4Hb4Y2dd7K16m+Fjb70rKdsafk474YNn3Vb44Fm3FT541m2FD551Sw0//3ileBM+eNZthQ+edVvhg2fdVvjgWbcVPnjWbYSPvS1vO3zwrJtej+Zy3gkfPOu2wgfPuq3wwbNuK3zwrNsKHzzrtsIHz7qt8MGzbit88KzbCB97y8h2+GNnXeztESX715pFvxc++Fu0rfCxs24zfPC3aFvhg79FK6/ww1744G/RtsIHf4u2FT74W7SN8LG3M2uHD/4WbSt88KzbCh8867rwmvd33mHG3qaqHT541m2FD551W+GDZ91W+OBZtxU+eNZthI+9Z1E7fPCs2wofe96PobbqsYTG1Vb88jTgt9Pd7Y/XCTZXR++Wq6OX1xjd3sU/dl/+dfGPDfReF+9toORdXqL23sjxxda41874/reLn4CwMxsBge/yMwOg+hDQ2tVGRhUQdn4kIPCdmggIfC8qAgLfbWsGQNm/AJUtIGx3iIDAd0wjIPA94QgIfNc7AgLf14+AwHcuJCDwvRknAPSIrgKK7iugDL77JAGB769JQOA7iBIQ+B6pBGSEgLAB0UkAB0Qn4W5ARaog1mwB0UnABgS+H/AEgFy9s3XZbwGxDwIHxD4IHJAQEDYgltnggFhmgwNimY0N6Prt18MLUJKG5C7kZf9yF00Lp3Nhec3ZuVSOhQmyXBskbWWxs8oSlzjC77/DpyyOsuzJ4inLnixCWfZkCZRlT5ZIWfZkSZRlT5ZMWXLYylIoy44sftoqN9Yqt+zIMm2VG/KRLNNWuceyTFvlHssik8oS3bKdTHR5K8usVW5Dllmr3IYss1a5DVlmrXJjPfA1urKVZdYq91gWmbXKbcgya5XbkGXWKrchy6xVbkMWoSx7skxb5b5k8du6Raatco9lmbbKtcuixCg7skxb5ZpwJMu0Ve6hLGHaKvdYlmmr3OrOxWS3skxb5R7LMm2VeyyLUJY9Waatco9lmbbKPZbl6rrlMaLlYvtlX/vt1T65+vZkcttDevPlBxe9GX4wNfxod8K3Y4fvxg7fjx2+jB1+GDv8OHb4CTt8n2r4knbCz2OHD551G+En8KzbCh8867bCB8+6rfDBs24rfPCs2wofPOu2wgfPuq3wx866aeysm8bOunnsrJvHzrp57Kybx866lx8b9Wb4ua4ITkV2wgfPuq3wwbNuK3zwrNsKHzzrpvIKP+yED551G+EX8KzbCh8867bCB8+6rfDBs24rfPCs2wofPOsmW8NPO8+2CnjWbYUPnnVb4aNn3Ub46Fn3MPxi0LNuI3z0rNsIHz3rNsJHz7qN8NGzbiP8obNuMUNn3WKw5/1Yr/br92L3r36Uz78uLn5V3v34ls21ru6d4NLrvn7vhSgpyyrOYNPxpbG4RYpYgjm+OEtdHvr4p19f/BONxc5putFEqWhi2aLBztdTo8GuRaZGg11nTY1GiOY2NPWF6yzJbNFg18dTo8Gu/adGg+0mTo0G2ymdGg3dAFQ0jm4ALBq6ARhotn2NoxtwI5pU0RR3fLEraeHoyorI7oEawdQdR4Lxdn3xEzp9hgmhC6HPB53eyITQ6bpMCJ1+znzQPXve26AHu4icv9z5iYY19n1ofH1vJAS7RSNEg4qG9SosGlaVsGj4VAK1DBBWaPehEV/RSNyi4VMJWDR8KgGLhn0NLBohGlQ07Gtg0bCvgUVDTxsWDd9RvNENyIdo6Aagogl0A2DR0A2ARUM3AAJN2L7ZG+gGwKIRokFFQzcAFg3dgPvQhLoEO0TZoqEbAIuGbgAsGroBqGjAz1qbGg3dAFg0dANg0dANQH1FEPxsw6nR0A2ARUM3ABYN3QBYNHQDYNHQDUBFA34G7NRo6AbAoqEbAIuGbgAsGiEaVDR0A2DR0A2ARUM3ABYN3QBUNOAniKtG419ofIjHFye73DjZHYpsgTRQZLekgSJLxDEo+mVsyW/fYwA/YZ0UF4pxESLv/C2CHzRPivXi1+6Z20MeC2tUDRRZo2qgyBpVA0UhRQUU+ZxgDIpSKcYdiuwXNVDk0wcNFPmgYpC8WLt+2Xo3hd7N8BTFGHo3GijSu9FAkd6NBor0bjRQFFJUQJHejQaK9G40UKR3o4EivRsNFOndKKBo6d1ooEjvRgNFejcaKNK70UCR/eLw74Y/KLJfHOzd8JTiliL7xTEolkqx7FBkv6iAomO/qIEi+0UNFNkvjkEx50oxbSmyX9RAUUhRAUU+69dAkd6NBor0bjRQpHejgSK9GwUUPb2bQSj6I4r0bjRQpHejgSK9Gw0UhRTHopiN3VKkd6OBIr0bDRTp3WigSO9mDIqpVIpuS5HejQKKQu9GA0V6Nxoo0rvRQJHejQaKQooKKNK7GY2i3faLQu9m+JMYHhTp3WigSO9GA0V6NwooBno3GijSu9FAUUixI0UnS7zRG9+g+GgQag8o29cwApvA+9DEXNGk7T4KgZ0dLBq2a7Bo2IPBomFjdR+a9EJTzAZNZLcEi4YtECwaPpOGRcMHzbBohGhQ0dANgEVDN+A+NGHV14QtGroBsGjoBsCioRuAiibRDYBFQzcAFg3dAFg0dANg0QjRoKKhGwCLhm4ALBq6AbBo6AbAoqEbgIom0w2ARUM3ABaNEM1NaFKpg3v802/RsK+5D42VisZtT1fJ7Gtg0bCvgUXDvgYWDfsaVDSFfQ0sGvY1sGj4lBMWDZ9ywqIRokFFQzcAFg3dAFg0dANg0dANgEVDNwAUjTV0A2DRsK/picbKona0sXHfZBfZ0nZfJ2uEYDDBsKcBBcPa7DYwvh5H5zd701hLx/k2MEd7B1pLv/kuMNmnBYz4LRhWZaBghGAwwbAqAwVDnxkUDF3m28BIBRN3wLCPAQVDhxkTjKO/fF+OqQ2mbDt/x84fFAw7f1Aw7PxBwQjBYIJh5w8Khp0/KBh2/qBg2PmDgmHnjwnGs/MHBcPOHxQMO39QMOz8QcEIwWCCYecPCoZ9DOabmJ59zP1vYqa0XYYh7GNuA1MqmLIDhn0MKBj2MaBg2MeAghGCuQtMzhVM2oJhHwMKhk8wQcHwCSYoGHb+oGDY+WOCCez8QcGw8wcFw87/PjD+CAw7f1AwQjCYYNj5g4Jh538/mGy2W5YEdv6gYNj5g4Jh548JJrLzvw1MKhWM24Jh5w8Khp0/KBh2/qBghGAwwbDzBwXDzh8UDDt/ADA7u8hGdv6Y2/tGdv6YYBI7f1Aw7PxBwbDzBwXDzh8UDPuYjmDExEW3H1taH1/8CKzqFsoOGnYyt6GJNlWRVwFXNOxlYNGwm0FFk9nPwKJhRwOLhj0NLBp2NbBohGhuQ2NcFdlud5fJfKYJi4ZuACwaugGwaOgGwKKhG4CKptANgEVDNwAWDd0AWDR0A2DRCNGgoqEbAIuGbgAsGroBsGjoBsCioRsAisYZRX1NkmWo2ZoGmpCWx1ghl3qte8T8lEVRT/GOLNEsS0mikx1ZhLLsyaKolu4pi6I6tqcsimrInrIoqt96yqKoduooi1X0FOM9WZaYo4k7sih6gtBTlkmr3JYs01a5x7IIZdmTZdoq91iWaavcY1mmrXKPZZm2yj2WZdoq91AWxyp3VxZWubuysMrdlYVV7q4sQln2ZGGVuyuLorrlMcBlqM1HeFbqUdpWwksY6+Penb2z9dark7dd3A065hr06tBht/ccz7u8bD3hvZHji61xy4NHa/xvFz9hKqq2pofpFWX9CWCWl3gmb2EqqlUIUwhTD0xFdSFhKvJsJ4BZz+l46Fi2MBU5zYTJPlMRTPaZemCKomcRhKnoCQph0gFSBJMO0EAwH9FV8aLbwhTC1AOTDpAimHSAFMGkA6QIJh0gRTDpAOmBGegAjQSzSFV69fZXhUkHSBFMIcxxYLp6Z+uy38Jkn6kIJvtMRTDZmiiCydZED8zI1kQRTLYmimDKxTDXyyWCaeBJZdkGLsvr2rJLJ4d68lFe/UriMtCgZqAVv82r81HrQOMsA02zDDTPMtAyyUCTmWWgdpaBulkG6mcZqMwy0FkqozRLZZT0VEapvo2Z885A9VRGjYHqqYyOB5r1VEaNgeqpjBoD1VMZNQaqpzJqDFRmGaieyqgxUD2VUWOgs1RGeZbKKM9SGZVZKqMyS2VUZqmMCnQejW55Qhb9bwN9xg6dGmOosceyjR062zVih05gjdihc9Jh7N5Ap5lG7NCZoxE7dDJoxA7d+UZZLo4hbGOXgWPHzqvHsWPn1ePYsfPqcezYefU4duy8ehi7xc6rx7Fj59Xj2LHz6nHsA+fVy09p6hn7wHnVDpxX7cB51Q6cV+3AedVh26L12Ia0Orahxo7tdB7Hjm1eHseO/aT2OHbsvFo3dk4mbWPHzqvHsWPn1ePYsfPqcezYefU4duy8ehi7x+5Xj2PH7lfrDpMx523s2P3qcezY/epx7Nh59Th27Lx6HDt2Xj2OHTuvHseOnVePY8fOq4exC3ZePY594LwqA+dVgZ7fpSwXh9aLQrkswyzN5fYuLrd16SWJD7sRLAdpBpuOL43F1YM0y2pouxdncfWETlmJ5sMvLtC5SzOXKJXL6n2EygU6L0/MBbrmmJgLdD01L5cAXStq5lJfd8uSzJYLdB08MRfoGn9iLtC+4MRchFwgubDfx+TCfh+TC/t9AC47/Qv7/bu4vNZuFnd8sStpgehKaWxUGoxdlAjG2/XFT+J0EiYjHulRzEac7sdsxOmrzEacjs1sxNnb3kM82EXh/OXOTy6sqG/i4uu7HyHYDRfsLbwn5sLqFJMLa0hMLnzWAJn3sTcr18xFfOUiccuFzxowufBZAyYX9i+QXLA32p+YC/sXTC7sXzC50KnG5CLkclO/nw+5sN/H5MJ+H5ML+31MLuz37+cStu/iYp/HMi8X7ONjJubCfh+TC/v9m7iEuiY6RNlyYb+PyUXIBZIL+31MLuz3Mbmw38fkwn4fkwv7/bv6l6P3+gT7HL+JubDfx+TCfh+TC/t9TC5CLpBc2O9jcmG/j8mF/T4mF/b7mFzY70NywT5feGIu7PcxubDfx+TCfh+Ti5ALJBf2L/dw8S8uPsTji5NdbpzsDkK2OsMjZFc0OkLsA82J8InQL2NLXrYI6X0PgDAuRzfnvb9C2uT4CLN/bVLptwhZkQ6PkBXp8AhZkY6O0NPSHx4h3f8BEEpFGHcQsi8cHiGfKQyPUIhwgFxYW3vZujOe7szwCOnODI+Q7szwCOnODI+Q7szoCIXuzPAI6c4Mj5DuzPAI6c4Mj1CIcHSEdGeGR0h3ZniEdGeGR0h3ZniEdGdGRxjYF+IjPH6bO7AvHABhfZs7pbhFKESIj7BUhGUHIfvC4RGyLxweIfvC4RGyLxwAYc4VYdoiZF84OsLIp/bDI+RT++ER0p0ZHiHdmeERChGOjpDuzPAI6c6MgNAfIaQ7MzxCujPDI6Q7MzrCRHdmJITZbDfwSnRnhkdId2Z4hHRnhkcoRIiPMJWK0G0R0p0ZHiHdmeER0p0ZHiHdmeER0p0ZHWGmOzM8QrozQyHc2SE/050ZAOHhIQeZ7szwCIUIR0dId2Z4hHRnhkdId2Z0hIV9YTeEThaloze+gdBIrL2ebN+mKGz2buISc+WSthsbFHZwmFzYlmFyEXKB5MIG6iYu6cWlmC0XdkWYXNjqYHLh02VMLnxkjMglGPb7mFzY72NyYb9/E5ew6l/Clgv7fUwuQi6QXNjvY3Jhv4/Jhf0+Jhf2+5hc2O9DcrHs9zG5sN/H5MJ+H5ML+31MLkIukFzY72NyYb+PyYX9PiQXx/7lFi6pmNeBGL9f/OTC/uUmLlYqFxe3XNi/YHJh/4LJRcgFkgv7F0wu7F8wubB/weTC55WYXPi8EpKLZ7+PyYX9PiYX9vuYXNjvY3IRcoHkwn4fkwv7fUwu7F+6cbGySB1tbNw32UWztN1N6TFYUgGkwt4FkYqQyi1UfD3FzcuWCn3ke6gc7dIXhC7yLVSyTwsV2b4DI6zBAKkE1mCIVFiDIVKhe4xIhd7xPVSkUok7VIRUAKnQN0akQtf4prxSu0jZ9vaBvT0iFfb2iFTY2wNSieztEamwt0ekwt4ekQp7e0QqQiqAVNjbI1Jhb49Ihb09IhX29ohU2NsDUkns7RGpsLdHpCKkcgeV43cnE/uVe6jUdydT2q6USOxX7qFSXhuI7VBhv4JIhf0KIhX2K4BUMvuVe6jkXKmkLRX2K4hU+CwSkQqfRSJSEVIBpMLeHpEKe3tEKuztEamwt7+Jij+iwt4ekEphb49Ihb09IhX29jdTyWa7Y0hhb49IRUgFkAp7e0Qq7O3voZJKpeK2VNjbI1Jhb49Ihb09HpVo2NsjUmFvj0iFvT0iFfb2d1PZ7tEajZDKLVSOds6Nhr09IhX29ohU2NsjUmFvj0iFvT0gFct+pRcVMXERTayNxxc/AquiPR7Tb7mwY7mHS7SpKrwKuHIRcoHkwq4Fkwv7Fkwu7FwwubB3weTC7gWSi+OzyZu4GFcVtrLlwqeTmFzY72NyYb+PyUXIBZIL+31MLuz3Mbmw38fkwn4fkwv7fUgunv0+Jhf2+5hc2O9jcmG/j8lFyAWSC/t9TC5a+pckyzizNQ0uIS3PpEIu9Vr3CPipiZbe4R1NolmWejw8060moqVu76mJlpq5pyZa6tWemmipFXtqItRko4mWGqmnJlqeR7ynyRJwNHFHEy3PAnpqMmMd29Jkzjr2UJMwZx17rMmcdeyxJnPWsceazFnHHmsi1GSjyZx17LEmrGO3mrCO3WrCOnarCevYjSaRdexWE9axW01EiSaP0S3jbD53s1LPkrYSXqpYH/fu7J2tt14dPe32LvYxLkeO+Lg6e9ftPXzzLi/7PHhv5Pji35Tzv138JKmlqiJJLTl+ApL1QFRrTd6S1FKZTE8yaamnSFJLFUiSWjzYCUjWgy0eJMuWpBbnmCSFJJWQZD+phaSWZwskqeWJCEnS49FCkh7PKCQf0VWS0W1IZno8WkjS49FCkh6PFpL0eLSQFJJUQpIejxaS9HiGIVmkyrx6fauSpMejhGRhPzkKSVfvbF32W5LsJ7WQZD+phaSQpBKS7EK0kGQXooUkuxAdJJO5uAspftk8rax8in2OqSzX5hZHm0M9KCiH18ugcRmmVTLMit7m1bmhdZhujmH6OYYpcwwzzDHMOMcw0xzDzHMMs0wxTKulCmoMc44qyM5RBVktVVCqb1DmvDNMmWOYWqqgxjC1VEGNYWqpghrD1FIFNYappQo6HqbTUgU1hqmlCmoMU0sV1BjmHFXQ1SfR3jXMOaogN0cV5OaogtwcVZAHzpvRLU+5ov9tmM/IgVNhDDXyWLaRA2e3RuTACasROXAOakQOnFYakQNnikbkwJN/I3LgrjbK8gpHDGETuQA3qo3IkXPoceTIOfQ4cuQcehw5cg49jhw5hx5HjpxDjyNHzqHHkSPn0OPIh82hYdgcGobNoWHYHBqGzaFXH7HTMfJhc2hAtjfriQdpdeJBjRzZsTyOHNmEPI4c+enqYeQROYfW3ZGTSdvIkXPoceTIOfQ4cuQcehw5cg49jhw5hx5HjtyHHkeO3IfW3RpjztvIkfvQ48iR+9DDyBNyDj2OHDmHHkeOnEOPI0fOoceRI+fQ48iRc+hx5Mg59DjyYXNoGjaHZuD5/I0l7bksgyzNJe0uLrd16SWID7sRLKdKBpuOL43F1VMly2q1/u7FWVw9rlJWkvlfbx1l4FylmUqUSmX17kClApyHJ6YipAJIBbh+mpgKcG2omUp9JS1LMlsqwHXvxFSAa/qJqQB7fvNSKcB+5sRU2NsjUmFvj0iFvf3tVLb9ytUbGpPKLyqv9ZPFHV/sSloQulIaW34GYxclgvF2ffGTN12DuXjTj5iLN52OuXjTQ5mLN92ZmXhn5K23FfMOdtE3f7nzkwqr6Fuo+PpORwh2S4W1LiIVVqSIVFg3AlJB3kl73myPvPG3ZiriKxWJWyp8noBIRUgFkAr7FUQq7FcQqbBfQaTCfgWRCt1oQCrIBy6o7u3zIRX29ohU2NsjUmFvj0hFSOVmKsFsqbC3R6TC3h6RCnt7RCrs7W+hEupK5hBlS4W9PSAVz94ekQp7e0Qq7O0RqbC3R6QipAJIhb39Pf3K4Vt6yOfhTUyFvT0iFfb2iFTY2wNSQT5/cmIq7O0RqbC3R6TC3h6RipAKIBX29ohU2NsjUmFvj0iFvT0iFfb2gFSQz8WemAr7lTuo+BcVH+LxxckuN052B6AQ4NgA2QUNDpBFIDxAv4wt+e07BshndhPgE2BcDkbOO3+ByEeXE+Cvi1/bR/otQFahgwMUAhwbIKvQwQHSth8cIB1+eIBSAcYdgOwDBwfI5wZjA0x8xICfA2sjL1snJtGJGRwgnZjBAdKJGRygEODYAOnEDA6QTszgAOnEDA6QTszgAOnEjA0w04kZHCCdmMEB0okZHCCdmMEBCgGODZBOzOAA2QeiAzx+MzuzD4QHWN/MTml7YEJhHwgPsFSAZQcg+8DBAbIPHBwg+8DBAQoBogPMuQLcnn5e2AcODpBP5AcHyCfygwOkEzM4QDoxQwMshk7M4ADpxAwOkE4MPkB/BJBOzOAAhQDHBkgnZnCAdGLGAZiN3QKkEzM4QDoxgwOkEzM2QEsnBh5gKhWg2wKkEzM4QDoxgwOkEzM4QCHAsQHSiRkcIJ2YwQHSiRkIoN3pA+nEwAM8OnagWDoxYwN0dGIGB0gnZnCAdGIGB0gnZnCA7AM7AXSy6By98Q2ARmLt7WT7noRjc3cLlZgrlSRbKuzYEKmwDQOk4tlbIVJhw3QLlfSiUsyWCrsgRCpsbRCpCKkAUuHjYEQq7O0RqbC3R6TC3v4WKmHVr4QtFfb2gFSEvT0iFfb2iFTY2yNSYW+PSEVIBZAKe3tEKuztEamwt0ekwt4ekQp7e0Aqgb09IhX29ohU2NsjUmFvj0iF/coNVFIxr6Mpfr/4SYX9yi1UrFQqLm6psF9BpMJ+BZBKZL+CSIX9CiIV9iuIVNivIFIRUgGkwmeRiFTY2yNSYW+PSIW9PSIV9vaAVBJ7e0Qq7O0RqbC3R6TCfqUTFSuL0NHGxn2TXRRLOzseJXYreEzYq8Axyay+7mDi6/lpfrt/S6ZXfAeTwx30spDJ9UxyVSHL9r2WzLoLjwnrLjwmrLvwmNAhxmNCf/gOJlKZxC2Twv4Ejwm9YTwmdIZvySe1Z5RtH1/Yx+MxETKBY8I+Ho8J+3g8Juzj8Ziwj8djwj4ejEkwhn08HhP28XhM2MfjMWEfj8dEyASOCft4PCbs4/GYsI+HY2LZn9zA5Og9yAcT9id3MKnvQaYUt0zYn9zBpLw2+Nphwv4Ej4mQCRwT9id4TNif3MEk58okbZmwP8FjwueMeEz4nBGOiWMfj8eEfTweE/bxeEzYx+MxETK5g4k/YsI+Ho8J+3g8Juzj8Ziwj7+VSTZ2y4R9PBwTzz4ejwn7eDwm7OPvYJJKZeK2TNjH4zERMoFjwj4ejwn7eDwm7OPxmLCPx2PCPv5eJnbbnwj7+DuYHOxl+2DCPh6PCft4PCbs4/GYCJnAMWEfj8eE/UkfJmLiIplYG48vfgRWJQtlhwo7lDuoRJuqvquAFyqBPQoiFXYpiFTYpyBSYaeCSEVIBZAKuxVEKnzueAsV46q+drsDS+CTR0Qq7O0RqbC3B6QS2dsjUmFvj0iFvT0iFfb2iFSEVACpsLdHpMLeHpEKe3tEKuztEamwtwekktjbI1Jhb49IRVRQSbKMMlvToBLSEkLIpV7rHuE+FdHRK7yjSDTLUo3oZEcRHXV6T0V01Mg9FdFRn/ZUREdt2FGRrKMu66mIjpqopyI6njW8p8gSbjRxRxEdPn9PRYSKfFFkxpr1WJEZa9ZjRWasWY8VmbFmPVZkxpr1UJEyY816rMiMNeuxIqxZvyrCmvWrIkJFvijCmvWrIqxZvyrCmvV3RazRUY88xraMsvkUzUo9odlKeGlifdy7s3e23np1oLPbu9jHuBzy4ePqVFu39yjNu7zswuC9keOLrXGLGNb43y5+ctRRRZGjkOMYHOtxo9aavOWooxohRx01FDnqqPzIUYfHOgHHepzEg2PZctThDE/P0bJ/1MGR/aMOjjqeHZCjjice5CjkqIIj/ZwxOD6iqxxXylWO9HN0cKSfo4Mj/RwdHOnnqODo6Ofo4Eg/RwdH+jmDcCxSRV69lFU50s/RwZH94xgcXb2zddlvObJ/1MGR/aMKjp59hw6O7Dt0cGTfoYMj+w4dHC/uO1JZOGYXGxy9T8uzUy/GtKgbt9xaTFp1WLthpGV82ZhjBYO8fk1pq1+ifg396i6A4fdf9lO/TP1O6Veo3xn9xFC/U/pZ6ndKP0f9Tunnqd8p/YT6/bF+OWz1C9TvlH7sP5r61f6j7OjH/qOlX8hH+rH/OKcf+49T+gX2Hw39ols2pYluu243sP84px/7j3P6sf84p59Qv4Z+Vqp+2/VDgf3HOf3Yf5zTj/3HOf3Yf5zTj/3HKf0i+49z+rH/+HP9/Lb+i+w/zunH/qOp3xJElB39hPo19DPhSD/2H+f0Y/9xTj/2Hy39qv8ck93qx/7jnH7sP07pl9h/nNOP/cc5/dh/nNOvQ/1nYl0aa7I5vljq29gir278EdgzmggVTYKKJkNFU5Ci6XHib8doLFQ0DioaDxWNQEUDNRdnqLk4Q83FGWouzlBzcYGaiwvUXFyg5uKCMhfvXOrNUjqLt6vHNnurL8Ojav91cXBi1xc/x4kyy396nCj549PjRMlMnx4nSs779DhRsumnx4mSpz87TmdQKoBPjxOltvj0OFGqlk+PE6n/cgapx3AGqcdwFqnHcBapx3A9TpboGA3U35RF8jScRfI0nIWabyzUfOOg5hsHNd84JE/DOSR/2TmoudhBzcUOai52UHOxg5qLHdRc7KHmYg81F3uoudhDzcUeai72UHOxh5qLPdRc7KHmYg81FwvUXCxQc7FAzcUCNRcL1FwsUHOxQM3FAjUXC9RcLFBzcYCaiwPUXByg5uIANRcHqPkmQM03AWq+CVDzTYSabyLUfBOh5psINd/0WLHbMRqo2i9CzcURai6OUHNxhJqLE9RcnKDm4gQ1FyeouThBzcVQa9Ec1Fo0B7UWzUGtRXNQa9Ec1Fo0B7UWzUGtRXNQa9Ec1Fo0B7UWzUGtRXNQa9Ec1Fo0B7UWzUGtRXNQa9Ec1Fo0B7MW7RkN1FwMs67rGQ3UXAyzRuoZDdRcDLPe6Ec0HmZV0DMapLnYm/PzTa5rW3JoXOqDXXaa8cG91sH4X8EEpGAiUjAJKZiMFEwBCqbD6qCOwVikYBxSMB4pGKQZ2CLNwBZpBrZIM7BFmoEt0gzskGZghzQDO6QZ2CHNwO7iGVjq3owh5FUwO7eNZbltKevbPuO+eLL2cT/uZzARKZiEFExGCqYABeMNUjDfTEkm12BsavTlrp4YYN3qyLLHJ/fiKcudxb96+EfVs3NtSXbp4kuKfnX13sarPpe9O8vOpY8HqsuNH08zy/HFNqflRDabiz2+OPvlxtn/dt+n2kK1e6ptjalbCRu7o3ei3pfqnan3pXoX6t1Xb1+VM8Fu9P5u/R31/pDelnpfqrej3pfqzer7Wr2Fel+qd6Del+odqfelerO/7Kx3CFXvmLd6s7+8Vm/2l5fqHdhfXqs3+8tr9WZ/ea3e7C+v1Vuo98fq7z292V9e2u8E9pfX6s3+8lq92V9eqzf7y0v1juwvr9Wb/eW1erO/vFZv9pfX6i3U+1K92V9eqzf7y2v1Zr9zrd7sdy7VO7HfuVZv9jvX6i1T6u3dcq3zO6ts0pyuqa8/LOez2aoyZ65vqTJnRm6okufMmy1V5sxuLVXm9NxaqszpjLVUEaqyo8qcLlNLlTm9oJYqrG33VGFtu6cKa9sdVQpr2z1VWNvuqcLadk8V1rZ7qghV2VFl0to25KpKapm8tkZhbZSthJMWwu9I6KojbJ2krYSTVs09JZy0xO4p4aT1eD8JxUxavL8lYbR1fFm2Ek5avb0joZS6F6OUnV+hUMKzErIuPC0h68KmhNHWdBIlbiVkXXhaQtaFpyVkXXhWQsu68LSEkzrAPSWc1C7uKSG7k9MSCiU8KyG7k9MSsjs5LSG7k9MSsjs5LSG7k7MSOnYnbQnjS4yctxKyOzktIbuT0xKyOzktoVDCsxKyOzktIYua9uOnlxji0vHFh8eeiWfm6ap2Y1mwTHqo3316M6f11fv4jUjxTIDX6k0v71q9afxdqzddwmv1ZvV9qd6THlt5n940K6/Vm/3ltXqzv7xWb6Hel+rN/vKE3k8J2TKelpBd4GkJ2didlpC92lkJJz3VsauE7KjaEkodn4TtS0iTnr3YVUL2PaclFEp4VkJ2J6clZHdyWkJ2J6clZHdyWkJ2J2clnPRMwK4Ssjs5LSG7k9MSsjs5LaFQwpO70kx6ZF5XCdmdnJaQpXXavqc86fFzDVUmPSSupQpr2j1VhKpct24osZbovI7FmOViY3f0Zta8Vm/m40v1nvVYu7vWxc16YN5tetNEu1ZvOm7X6i3U+1K9WX9fqzeNv2v15jsM1+rN/rKz3qGuYzFxu8vNrAdA3qX3rEdL3qY3+8tr9WZ/ea3e7C+v1Vuo96V6s7/8XP29pzf7y0v7HR47erHe7C+v1Zv95ZV6B55+erHe7C+v1Zv95bV6s7+8Vm+h3pfqzf7yWr3ZX16rN/vLa/Vmv3Op3jzV92K92e9cqzf7ncv0fvzHj7OF//PHMrh91X19dzwZeQnplpf13/7Uj6+UHxd/c36Cda9dSINbfdb9+MZvDgFofCj/zYfK2x/6MbTw4+L9AzajLL+GLHb1Sfv45OM//7///L/+5Z//+7/+z//9+MiP//X//bf/8R//8u//9us//+P/9/88/5fHxf9/","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_contract_instance_internal","get_nullifier_membership_witness","pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","get_public_keys_and_partial_address","random","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_integer_quotient","directive_invert"]},{"name":"check_dkim_key_hash_public","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["check_dkim_key_hash_public"],"assert_messages":{"308":"Array index out of bounds","20":"Function check_dkim_key_hash_public can only be called statically","177":"Array index out of bounds","113":"Storage slot 0 not allowed. Storage slots must start from 1.","145":"Array index out of bounds","296":"attempt to add with overflow","337":"attempt to add with overflow","156":"attempt to add with overflow","185":"Array index out of bounds","316":"Array index out of bounds","234":"Array index out of bounds","324":"Array index out of bounds","216":"Array index out of bounds","248":"attempt to add with overflow","15":"Not initialized","169":"Array index out of bounds","198":"attempt to add with overflow"}},{"name":"check_dkim_key_hash_private","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":22,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"get_escrow_class_id","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRAAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAAgrAAADCEM5AAAACEMAAAABHgAAAAQeAAAABTAAAAAABAAAAAUAAAAGJAACAQQKAAIGBAUhAAAPAAU6AQAAHgALAAQkAAcBBgoABwQGBSEAABQABToBAAAqAAAEJAAEBAUAAAQABQAkAQQBBAAABAQCBSoABQckAAcACCoCCAcAAAQHAgcqAggHAAAEBwIHKgIIByoBBAUAAAQFAgUqAgUEKgAABQAABAACACoCBAUkAAQBCCQABAMEJAAEAAcqAAcDIAArDAAEAwQHIQAANAAHIAAuKgEFBCQABAIFAAAEBAIGAAAEBgUHKgEHAyMqAQUHHAAHAwkAAAcGCQosAAAAAAoAAAAJJAAEAwsMAAQDCwwhAAA8AAw6AQAAKwAABwgDJQAEAAQIBCIAAABKKwAIBQAKAAAECgIMAAAEDAMLKgIJCwAABAMICQ4ABAMJByEAAEcABzoBAAAqAgoFKgAJAyAAKysBCAMIBgsABAgGAAIIByEAAE4IByAAUCsACAMIBSAAXisAAAAIBQEABAAACAQAACUABAAACAkNAAQICQgECAoXAAgKCAohAABcCAoBAAQIAwgJCAsrAQgLCAgBAAQIBQgJCAsrAggICAsBAAQICQACCAkgAFMlAQQAAQgFIABeIysAGMoYyg==","debug_symbols":"1ZrRbuowDIbfJddcJLGd2LzK0dFUNpgqVWUCdqQjxLuv3dqs61DQ2NDiG0TgT/yROPmD1aN5WK+eH+/qdrPdm+Wfo2m299Wh3rZd63hamNWubpr68W76sbH9C7/K909V27f2h2p3MEsXPS7Mun3o3wJ2A2zqZm2WSOG0+KQWiINYKCatIzyjRe9kEKP3nNQCZ8SBHQziwF6m4r8LI98nd9YltZ2ob87u7A9MexwDiFyadudxFDsvkkfnboxBzG4y9IDufhK9m/aP7H0Ef/MIcPMIePMI9P0IRDKGoGAvpEVkT4M4MvI8LcJXcfpO8ZpOfE0nuaKTP79LPXqbNhOSvXTIdPs/BbGTdQx8bkkkjIcMidj8klAEN4oj+NmSeKcb3+vGB934qBufdOMH3fhRNz7rxhfV+KDbdUG364Ju1wXdrgu6XRd0uy7odl3Q7bpY/tYlTvg0L+lg+ckTMeGzneP/SvKkQlOwli6UH1Kpgu176iD6V3pWTS+a6cmqpi//vpM7daj4Q5NdOvPZuzk+Fj/7EjL45d93GN7xfV4sCGOmCcZPv1W3v1H5l6MsfvkliSx++SWJHH4ovySRxS+/JJHFL9+is/jl/6/J4pdv0Vn88i06i6/bdYNu1w26XTfodt2o23WjZtc9da1/1a6uVs16eIZs89zeTx4pO/x/evumE78A","brillig_names":["get_escrow_class_id"],"assert_messages":{"14":"Not initialized","59":"Array index out of bounds","70":"attempt to add with overflow","19":"Function get_escrow_class_id can only be called statically"}}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000f518d98e"},{"kind":"string","value":"EntitlementNote"},{"fields":[{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_start","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_end","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"destination","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"spot","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000b3dd3286"},{"kind":"string","value":"ParticipantNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000f518d98e"},{"kind":"string","value":"EntitlementNote"},{"fields":[{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_start","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_end","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"destination","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"spot","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseEscrow"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"entitlements","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseRegistry"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"escrow_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"dkim_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"managed_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"participants","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"participant_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}},{"name":"verifier_id","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::DKIMKeyHashRegistered"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_registry_status_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_registry_status_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_id","type":{"kind":"field"}},{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::check_and_register_participant_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseRegistry::check_and_register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseRegistry::get_escrow_class_id_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_class_id_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_public_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_bulk_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_bulk_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::set_contract_registered_parameters"}}],"kind":"struct","path":"ZImburseRegistry::set_contract_registered_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow_contract_id","type":{"kind":"field"}},{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseRegistry::constructor_parameters"}}],"kind":"struct","path":"ZImburseRegistry::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::register_escrow_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_escrow_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_private_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::register_participant_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_participant_abi"}]}},"file_map":{"101":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes, encrypted_logs::{header::EncryptedLogHeader},\n    keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::{OvpkM, IvpkM}}\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P]\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe {\n        random()\n    };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(plaintext: [u8; P], eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field\n    ).to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::{compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext},\n        keys::public_keys::{OvpkM, IvpkM}\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41, 2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239, 247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118, 183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183, 12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78, 101, 153, 0, 0, 16, 39\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_log(contract_address, ovsk_app, ovpk_m, ivpk_m, recipient, plaintext);\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239, 95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25, 244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91, 68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76, 26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178, 143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189, 117, 147, 101, 230, 132\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(recipient, recipient_ivpk, sender_ovsk_app, eph_sk, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n"},"111":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr","source":"use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse dep::protocol_types::{traits::Serialize};\n\nfn emit<Event, let N: u32, let M: u32>(\n    context: &mut PublicContext,\n    event: Event\n) where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; M];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_unencrypted_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32, let M: u32>(context: &mut PublicContext) -> fn[(&mut PublicContext,)](Event) -> () where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    | e: Event | {\n        emit(\n          context,\n          e,\n        );\n    }\n}\n\ntrait LensForEventSelector<let N: u32, let M: u32> {\n    // N = event preimage input in fields\n    // M = event preimage input in fields + event selector as field\n    fn output(self: [Field; N]) -> [Field; M];\n}\n\nimpl LensForEventSelector<1, 2> for [Field; 1] {\n    fn output(self) -> [Field; 2] {\n        [self[0] as Field; 2]\n    }\n}\nimpl LensForEventSelector<2, 3> for [Field; 2] {\n    fn output(self) -> [Field; 3] {\n        [self[0] as Field; 3]\n    }\n}\nimpl LensForEventSelector<3, 4> for [Field; 3] {\n    fn output(self) -> [Field; 4] {\n        [self[0] as Field; 4]\n    }\n}\nimpl LensForEventSelector<4, 5> for [Field; 4] {\n    fn output(self) -> [Field; 5] {\n        [self[0] as Field; 5]\n    }\n}\nimpl LensForEventSelector<5, 6> for [Field; 5] {\n    fn output(self) -> [Field; 6] {\n        [self[0] as Field; 6]\n    }\n}\nimpl LensForEventSelector<6, 7> for [Field; 6] {\n    fn output(self) -> [Field; 7] {\n        [self[0] as Field; 7]\n    }\n}\n"},"114":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"115":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"116":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"117":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\nunconstrained pub fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"118":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(storage_slot, note_type_id, serialized_note, note_hash, counter)\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter)\n    };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"119":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"120":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"121":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe {\n        notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter)\n    };\n}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"122":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_oracle_wrapper(args)\n    };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_array_oracle_wrapper(args)\n    };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"124":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(contract_address: AztecAddress, randomness: Field, encrypted_event: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(contract_address, randomness, encrypted_event, counter)\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\nunconstrained pub fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n"},"127":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"128":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"130":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: u32 = 24;\n\npub struct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"132":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N> where T: Eq {\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe {\n        get_collapse_hints(input)\n    };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>\n) where T: Eq {\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(collapsed.len(), collapsed_to_input_index_mapping.len(), \"Collapse hint vec length mismatch\");\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(collapsed.get_unchecked(i), input[input_index].unwrap(), \"Wrong collapsed vec content\");\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(collapsed.get_unchecked(i), std::mem::zeroed(), \"Dirty collapsed vec storage\");\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(input: [Option<T>; N]) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"135":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr","source":"struct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum {\n    EQ: 1,\n    NEQ: 2,\n    LT: 3,\n    LTE: 4,\n    GT: 5,\n    GTE: 6,\n};\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::compare;\n    use super::Comparator;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LTE, rhs), \"Expected lhs to not be less than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n    }\n}\n"},"136":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n"},"149":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"151":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/contract_inclusion.nr","source":"use dep::protocol_types::{\n    header::Header, address::AztecAddress, hash::compute_siloed_nullifier,\n    constants::DEPLOYER_CONTRACT_ADDRESS\n};\n\ntrait ProveContractDeployment {\n    fn prove_contract_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractDeployment for Header {\n    fn prove_contract_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonDeployment {\n    fn prove_contract_non_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonDeployment for Header {\n    fn prove_contract_non_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        // docs:start:prove_nullifier_non_inclusion\n        self.prove_nullifier_non_inclusion(nullifier);\n        // docs:end:prove_nullifier_non_inclusion\n    }\n}\n\ntrait ProveContractInitialization {\n    fn prove_contract_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractInitialization for Header {\n    fn prove_contract_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonInitialization {\n    fn prove_contract_non_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonInitialization for Header {\n    fn prove_contract_non_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_non_inclusion(nullifier);\n    }\n}\n"},"152":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use dep::protocol_types::merkle_tree::root::root_from_sibling_path;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::{NoteInterface, NullifiableNote}}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = unsafe {\n            get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier)\n        };\n\n        // 2) First we prove that the tree leaf in the witness is present in the nullifier tree. This is expected to be\n        // the leaf that contains the nullifier we're proving inclusion for.\n        assert(\n            self.state.partial.nullifier_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n\n        // 3) Then we simply check that the value in the leaf is the expected one. Note that we don't need to perform\n        // any checks on the rest of the values in the leaf preimage (the next index or next nullifier), since all we\n        // care about is showing that the tree contains an entry with the expected nullifier.\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, let N: u32>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N> + NullifiableNote;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, let N: u32>(\n        self,\n        note: Note,\n        context: &mut PrivateContext\n    ) where Note: NoteInterface<N> + NullifiableNote {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"154":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"155":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"158":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"160":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"161":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"168":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"169":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"180":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"209":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\npub struct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self { nullifier: 0, next_nullifier: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable<ScopedReadRequest> for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.next_nullifier == other.next_nullifier)\n            & (self.next_index == other.next_index)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"222":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"231":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"264":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"277":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n"},"297":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"299":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"300":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"302":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"303":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"306":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"307":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"309":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"310":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"315":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"316":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"319":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"330":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/z_imburse_escrow/src/types/entitlement_note.nr","source":"use aztec::{\n    encrypted_logs::encrypted_event_emission::encode_and_encrypt_event,\n    keys::getters::get_public_keys,\n    macros::notes::note_custom_interface,\n    note::utils::compute_note_hash_for_nullify,\n    oracle::{random::random, notes::check_nullifier_exists},\n    prelude::{NoteHeader, NullifiableNote, NoteInterface, PrivateContext},\n    protocol_types::{\n        address::AztecAddress,\n        traits::{Serialize, Deserialize},\n        constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::{poseidon2_hash_with_separator, poseidon2_hash_bytes},\n        utils::field::field_from_bytes,\n    },\n};\nuse compressed_string::CompressedString;\nuse generators::GENERATORS;\nuse std::{embedded_curve_ops::multi_scalar_mul, hash::from_field_unsafe};\nuse crate::ZImburseEscrow::{SpotReimbursementClaimed, RecurringReimbursementClaimed, EntitlementNullified};\n\nglobal ENTITLEMENT_NOTE_LENGTH: u32 = 8;\n\n#[note_custom_interface]\npub struct EntitlementNote {\n    // the user that is allowed to use this entitlement\n    recipient: AztecAddress,\n    // the type of receipt verifier that this entitlement can be used for\n    verifier_id: u8,\n    // the maximum value that can be withdrawn from the escrow using this entitlement\n    max_value: U128,\n    // date range that verified emails can be used for\n    date_start: u32,\n    date_end: u32,\n    // destination if used for travel\n    destination: Field,\n    // whether or not the entitlement is a spot entitlement\n    spot: bool,\n    // blinding factor & nullifier secret for the note\n    randomness: Field,\n}\n\nimpl NoteInterface<ENTITLEMENT_NOTE_LENGTH> for EntitlementNote {\n\n    fn serialize_content(self) -> [Field; ENTITLEMENT_NOTE_LENGTH] {\n\n        [\n            self.recipient.to_field(),\n            self.verifier_id as Field,\n            self.max_value.to_integer(),\n            self.date_start as Field,\n            self.date_end as Field,\n            self.destination,\n            self.spot as Field,\n            self.randomness\n        ]\n    }\n\n    fn deserialize_content(serialized_note: [Field; ENTITLEMENT_NOTE_LENGTH]) -> EntitlementNote {\n        EntitlementNote {\n            recipient: AztecAddress::from_field(serialized_note[0]),\n            verifier_id: serialized_note[1] as u8,\n            max_value: U128::from_integer(serialized_note[2]),\n            date_start: serialized_note[3] as u32,\n            date_end: serialized_note[4] as u32,\n            destination: serialized_note[5],\n            spot: serialized_note[6] as bool,\n            randomness: serialized_note[7],\n            header: NoteHeader::empty()\n        }\n    }\n\n    fn to_be_bytes(self, storage_slot: Field) -> [u8; ENTITLEMENT_NOTE_LENGTH * 32 + 64] {\n        let serialized_note = self.serialize_content();\n        let mut buffer: [u8; ENTITLEMENT_NOTE_LENGTH * 32 + 64] = [0; ENTITLEMENT_NOTE_LENGTH * 32 + 64];\n        let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n        let note_type_id_bytes: [u8; 32] = EntitlementNote::get_note_type_id().to_be_bytes();\n        for i in 0..32 {\n            buffer[i] = storage_slot_bytes[i];\n            buffer[32 + i] = note_type_id_bytes[i];\n        }\n        for i in 0..serialized_note.len() {\n            let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n            for j in 0..32 {\n                buffer[64 + i * 32 + j] = bytes[j];\n            }\n        }\n        buffer\n    }\n\n    fn get_note_type_id() -> Field {\n        comptime\n        {\n            let bytes = \"EntitlementNote\".as_bytes();\n            let hash = poseidon2_hash_bytes(bytes);\n            let hash_bytes = hash.to_be_bytes::<4>();\n            field_from_bytes(hash_bytes, true)\n        }\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn compute_note_hash(self) -> Field {\n        let serialized = self.serialize_content();\n        std::embedded_curve_ops::multi_scalar_mul(\n            [GENERATORS[0], GENERATORS[1], GENERATORS[2], GENERATORS[3], GENERATORS[4], GENERATORS[5], GENERATORS[6], GENERATORS[7]],\n            [\n            from_field_unsafe(serialized[0]),\n            from_field_unsafe(serialized[1]),\n            from_field_unsafe(serialized[2]),\n            from_field_unsafe(serialized[3]),\n            from_field_unsafe(serialized[4]),\n            from_field_unsafe(serialized[5]),\n            from_field_unsafe(serialized[6]),\n            from_field_unsafe(serialized[7]),\n            // do not use slot so it can be used for the nullifier\n        ]).x\n    }\n}\n\nimpl NullifiableNote for EntitlementNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = self.randomness; // use as nullifier_secret so that admin and recipient can nullify\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = self.randomness; // use as nullifier secret so that admin and recipient can nullify\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for EntitlementNote {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient)\n            & (self.max_value == other.max_value)\n            & (self.randomness == other.randomness)\n            & (self.verifier_id == other.verifier_id)\n    }\n}\nimpl EntitlementNote {\n    \n    /**\n     * EntitlementNote constructor for recurring entitlements\n     *\n     * @param recipient - the address of the recipient of the entitlement (NOT THE OWNER OF THE NOTE)\n     * @param verifier_id - the type of verifier that the entitlement can be used for\n     * @param max_value - the maximum value that can be withdrawn from the escrow using the entitlement\n     * @param randomness - blinding factor for the note (inputted since must be same between the two notes)\n     */\n    fn new_spot(\n        recipient: AztecAddress,\n        verifier_id: u8,\n        max_value: U128,\n        date_start: u32,\n        date_end: u32,\n        destination: str<31>,\n        randomness: Field\n    ) -> Self {\n        let destination_compressed: CompressedString<1, 31> = CompressedString::from_string(destination);\n        Self {\n            recipient,\n            verifier_id,\n            max_value,\n            date_start,\n            date_end,\n            destination: destination_compressed.value[0],\n            spot: true,\n            randomness,\n            header: NoteHeader::empty()\n        }\n    }\n\n    /**\n     * EntitlementNote constructor for recurring entitlements\n     * @todo: allow destinations on recurring?\n     *\n     * @param recipient - the address of the recipient of the entitlement (NOT THE OWNER OF THE NOTE)\n     * @param verifier_id - the type of verifier that the entitlement can be used for\n     * @param max_value - the maximum value that can be withdrawn from the escrow using the entitlement\n     * @param randomness - blinding factor for the note (inputted since must be same between the two notes)\n     */\n    fn new_recurring(\n        recipient: AztecAddress,\n        verifier_id: u8,\n        max_value: U128,\n        randomness: Field\n    ) -> Self {\n        Self {\n            recipient,\n            verifier_id,\n            max_value,\n            date_start: 0,\n            date_end: 0,\n            destination: 0,\n            spot: false,\n            randomness,\n            header: NoteHeader::empty()\n        }\n    }\n\n    /**\n     * Determine if the entitlement is a spot entitlement by checking if date_start is set\n     *\n     * @return true if entitlement can only be used once, and false if it is recurring\n     */\n    fn is_spot(self) -> bool {\n        self.date_start != 0\n    }\n\n    /**\n     * Return the destination of the entitlement\n     *\n     * @return the utf8 bytes of the destination\n     */\n    fn destination(self) -> [u8; 31] {\n        CompressedString::<1, 31> { value: [self.destination] }.to_bytes()\n    } \n\n    /**\n     * Constrain a given timestamp to be within the date range of the entitlement\n     *\n     * @param timestamp - the timestamp to check\n     */\n    fn check_date_range(self, timestamp: u32) {\n        assert(\n            (timestamp >= self.date_start) & (timestamp <= self.date_end),\n            \"Receipt is out of entitlement date range\"\n        );\n    }\n\n    /**\n     * Determine the amount to reimburse for a given claimed amount (lesser of the two)\n     *\n     * @param claimed - the amount claimed by the user\n     * @return the amount to reimburse\n     */\n    fn amount_to_reimburse(self, claimed: U128) -> Field {\n        if self.max_value >= claimed {\n            claimed.to_field()\n        } else {\n            self.max_value.to_field()\n        }\n    }\n\n    /**\n     * Derives the nullifier for recurring notes\n     * @dev recurring notes are nullified for a scope (month) without destroying the ntoe\n     *      prove nullifier non-inclusion to use\n     *\n     * @param timestamp - the timestamp (month/ year) from the email receipt verifier\n     * @return - the month nullifier for the note\n     */\n    fn derive_recurring_nullifier(self, timestamp: Field) -> Field {\n        poseidon2_hash_with_separator(\n            [self.randomness, timestamp],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    /**\n     * This check is not safe but simulates desired behavior of check_nullifier and can be used in txe\n     */\n    fn check_nullifier_txe(self, context: &mut PrivateContext) -> Field {\n        let nullifier = self.compute_nullifier_without_context();\n        let nullifier_exists = unsafe { check_nullifier_exists(nullifier) };\n        assert(!nullifier_exists, \"Entitlement has already been claimed\");\n        nullifier\n    }\n\n    /**\n     * Ensure that the note nullifier has not been used before\n     *\n     * @param context - the private context to use for the oracle call\n     * @return - the nullifier for the note\n     */\n    fn check_nullifier(self, context: &mut PrivateContext) -> Field {\n        let nullifier = self.compute_nullifier_without_context();\n        context.historical_header.prove_nullifier_non_inclusion(nullifier);\n        nullifier\n    }\n\n    /**\n     * Assert that a recurring nullifier has not been used before and emits it\n     * @dev uses oracle check_nullifier_exists which is technically unsafe but will be caught by kernel\n     *\n     * @param context - the private context to use for the oracle call\n     * @param timestamp - the timestamp to check\n     */\n    fn check_and_emit_recurring_nullifier(self, context: &mut PrivateContext, timestamp: Field) {\n        // derive recurring nullifier for the month\n        let recurring_nullifier = self.derive_recurring_nullifier(timestamp);\n        let recurring_nullifier_exists = unsafe { check_nullifier_exists(recurring_nullifier) };\n        // check the nullifeir has not been emitted via oracle call (rely on kernel to actually constrain)\n        assert(!recurring_nullifier_exists, \"Entitlement has already been claimed for this month\");\n        // emit the nullifier\n        context.push_nullifier(recurring_nullifier);\n    }\n\n    /**\n     * Emit an event to the admin notifying them of a recurring claim\n     *\n     * @param context - the private execution context\n     * @param admin - the address of the admin of the escrow to notify\n     * @param amount - the amount claimed\n     * @param timestamp - the timestamp of the claim\n     */\n    fn emit_recurring_claim(self, context: &mut PrivateContext, admin: AztecAddress, amount: Field, timestamp: Field) {\n        RecurringReimbursementClaimed {\n            claimant: self.recipient,\n            amount,\n            verifier_id: self.verifier_id,\n            timestamp\n        }.emit(\n            encode_and_encrypt_event(\n                context,\n                get_public_keys(self.recipient).ovpk_m,\n                get_public_keys(admin).ivpk_m,\n                admin\n            )\n        );\n    }\n\n    /**\n     * Emit an event to the admin notifying them of a spot claim\n     *\n     * @param context - the private execution context\n     * @param admin - the address of the admin of the escrow to notify\n     * @param amount - the amount claimed\n     */\n    fn emit_spot_claim(self, context: &mut PrivateContext, admin: AztecAddress, amount: Field) {\n        SpotReimbursementClaimed {\n            claimant: self.recipient,\n            amount,\n            verifier_id: self.verifier_id,\n        }.emit(\n            encode_and_encrypt_event(\n                context,\n                get_public_keys(self.recipient).ovpk_m,\n                get_public_keys(admin).ivpk_m,\n                admin\n            )\n        );\n    }\n\n    /**\n     * Admin or recipient notifies counterparty that note has been nullified\n     * @dev admin emits event when revoking entitlement, recipient emits when claiming spot\n     * @dev clients must scan for these events to prune notes that are no longer valid\n     *\n     * @param context - the private execution context\n     * @param to - the address of the counterparty to notify\n     * @param from - the address of the notifier who nullified the entitlement note\n     */\n    fn emit_nullified(self, context: &mut PrivateContext, to: AztecAddress, from: AztecAddress) {\n        EntitlementNullified { randomness: self.randomness }.emit(\n            encode_and_encrypt_event(\n                context,\n                get_public_keys(from).ovpk_m,\n                get_public_keys(to).ivpk_m,\n                to\n            )\n        );\n    }\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"341":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::random::random, keys::getters::get_nsk_app,\n    macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"342":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94, 24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154, 60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213, 165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97, 103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186, 55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253, 179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9, 236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214, 72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107, 218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198, 149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126, 32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36, 137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59, 245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97, 3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180, 170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216, 116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70, 86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246, 215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193, 104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74, 134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210, 188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210, 186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69, 79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22, 121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175, 169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53, 101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200, 157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86, 119, 30, 63, 129, 143, 32, 96\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"442":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/z_imburse_registry/src/types/registry_definition.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\nglobal REGISTRY_DEFINITION_LENGTH: u32 = 3;\n\npub struct RegistryDefinition {\n    admin: AztecAddress,\n    usdc: AztecAddress,\n    escrow_contract_id: Field\n}\n\nimpl Serialize<REGISTRY_DEFINITION_LENGTH> for RegistryDefinition {\n    fn serialize(self: Self) -> [Field; REGISTRY_DEFINITION_LENGTH] {\n        [self.admin.to_field(), self.usdc.to_field(), self.escrow_contract_id]\n    }\n}\n\nimpl Deserialize<REGISTRY_DEFINITION_LENGTH> for RegistryDefinition {\n    fn deserialize(fields: [Field; REGISTRY_DEFINITION_LENGTH]) -> Self {\n        RegistryDefinition {\n            admin: AztecAddress::from_field(fields[0]),\n            usdc: AztecAddress::from_field(fields[1]),\n            escrow_contract_id: fields[2]\n        }\n    }\n}\n\nimpl RegistryDefinition {\n    /**\n     * Create a new definition for a Z-Imburse escrow registry contract\n     *\n     * @param admin - The address that can add dkim keys to the registry\n     * @param usdc The address of the USDC token\n     * @param escrow_contract_id The ID of the escrow contract\n     * @return The new escrow registry definition\n     */\n    pub fn new(admin: AztecAddress, usdc: AztecAddress, escrow_contract_id: Field) -> Self {\n        RegistryDefinition { admin, usdc, escrow_contract_id }\n    }\n}\n"},"443":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/z_imburse_registry/src/types/participant_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash_with_separator, traits::{Serialize, Deserialize}\n},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext, macros::notes::note\n};\nuse dep::compressed_string::CompressedString;\n\nglobal NAME_LENGTH: u32 = 60;\nglobal NAME_SERIALIZED_LENGTH: u32 = 2;\n\n#[note]\npub struct ParticipantNote {\n    address: AztecAddress,\n    name: [Field; 2],\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n\nimpl NullifiableNote for ParticipantNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for ParticipantNote {\n    // does not check for participant name\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl ParticipantNote {\n    pub fn new(address: AztecAddress, name: str<NAME_LENGTH>, npk_m_hash: Field) -> Self {\n        let randomness = unsafe {\n            random()\n        };\n        let name_serialized: CompressedString<NAME_SERIALIZED_LENGTH, NAME_LENGTH> = CompressedString::from_string(name);\n        ParticipantNote { address, name: name_serialized.value, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_name(self) -> [u8; NAME_LENGTH] {\n        CompressedString::<NAME_SERIALIZED_LENGTH, NAME_LENGTH> { value: self.name }.to_bytes()\n    }\n}\n"},"456":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/z_imburse_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\nmod test;\nmod types;\nmod verifiers;\n\npub global BULK_KEY_LENGTH: u32 = 4;\n\n#[aztec]\ncontract ZImburseRegistry {\n    use dep::aztec::{\n        prelude::{AztecAddress, PrivateImmutable, PrivateSet, SharedImmutable, Map},\n        macros::{storage::storage, events::event, functions::{private, public, view, initializer}},\n        note::{\n        note_viewer_options::NoteViewerOptions, note_getter_options::NoteGetterOptions,\n        note_getter::{get_notes, view_notes}, constants::MAX_NOTES_PER_PAGE\n    },\n        protocol_types::{\n        contract_instance::ContractInstance, address::partial_address::PartialAddress,\n        contract_class_id::ContractClassId, abis::function_selector::FunctionSelector, traits::Serialize\n    },\n        oracle::{get_contract_instance::get_contract_instance, header::get_header_at_oracle},\n        keys::getters::get_public_keys, utils::comparison::Comparator,\n        encrypted_logs::encrypted_note_emission::{encode_and_encrypt_note_unconstrained, encode_and_encrypt_note},\n        unencrypted_logs::unencrypted_event_emission::emit\n    };\n    use std::{meta::derive, collections::bounded_vec::BoundedVec};\n    use dep::address_note::address_note::AddressNote;\n    use dep::z_imburse_escrow::ZImburseEscrow;\n    use crate::{\n        types::{registry_definition::RegistryDefinition, participant_note::{ParticipantNote, NAME_LENGTH}},\n        BULK_KEY_LENGTH\n    };\n\n    #[event]\n    #[derive(Serialize)]\n    struct DKIMKeyHashRegistered {\n        dkim_key_hash: Field,\n        verifier_id: Field,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        definition: SharedImmutable<RegistryDefinition, Context>,\n        escrow_registry: Map<AztecAddress, SharedImmutable<bool, Context>, Context>,\n        dkim_registry: Map<Field, SharedImmutable<Field, Context>, Context>,\n        managed_escrows: PrivateSet<AddressNote, Context>,\n        participants: Map<AztecAddress, PrivateSet<ParticipantNote, Context>, Context>,\n        participant_escrows: PrivateSet<AddressNote, Context>,\n    }\n\n    /**\n     * Initialize the Z-Imburse registry contract\n     *\n     * @param usdc - The address of the USDC token\n     * @param contract_class_id - The class ID of the escrow contract that all escrows must be instances of\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys to add to the registry\n     */\n    #[public]\n    #[initializer]\n    fn constructor(\n        usdc: AztecAddress,\n        escrow_contract_id: Field,\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        // initialize the registry definition\n        let definition = RegistryDefinition::new(context.msg_sender(), usdc, escrow_contract_id);\n        storage.definition.initialize(definition);\n        // add any DKIM key hashes that were passed in at initialization\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(\n                    &mut context,\n                    DKIMKeyHashRegistered { dkim_key_hash: dkim_key_hashes[i], verifier_id: verifier_ids[i] }\n                );\n            }\n        }\n    }\n\n    /**\n     * Bulk registration of DKIM keys\n     *\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys\n     */\n    #[public]\n    fn register_dkim_bulk(\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        // check that the sender is the admin\n        let admin = storage.definition.read_public().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // bulk insert up to 50 dkim key hashes\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(\n                    &mut context,\n                    DKIMKeyHashRegistered { dkim_key_hash: dkim_key_hashes[i], verifier_id: verifier_ids[i] }\n                );\n            }\n        }\n    }\n\n    /**\n     * Register a DKIM key hash for email verifiers to anchor trust to\n     *\n     * @param verifier_id - the ID of the verifier\n     * @param dkim_key_hash - the hash of the DKIM key\n     */\n    #[public]\n    fn register_dkim(verifier_id: Field, dkim_key_hash: Field) {\n        // check that the sender is the admin\n        let admin = storage.definition.read_public().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // ensure that the dkim key has not already been registered\n        let stored_id = storage.dkim_registry.at(dkim_key_hash).read_public();\n        assert(stored_id == 0, \"DKIM key has already been registered\");\n        storage.dkim_registry.at(dkim_key_hash).initialize(verifier_id);\n        emit(\n            &mut context,\n            DKIMKeyHashRegistered { dkim_key_hash, verifier_id }\n        );\n    }\n\n    /**\n     * Check the authenticity and deployment status of an escrow contract and register it in the Z-Imburse registry\n     * @dev the header will not include the contract address and the contract \n     *\n     * @param escrow_contract - the address of the escrow contract to register\n     */\n    #[private]\n    fn register_escrow(escrow_contract: AztecAddress) {\n        // check the contract class ID by recomputing the contract address\n        let definition = storage.definition.read_private();\n        let contract_instance: ContractInstance = unsafe {\n            get_contract_instance(escrow_contract)\n        };\n        let exected_escrow_address = AztecAddress::compute(\n            contract_instance.public_keys_hash,\n            PartialAddress::compute(\n                ContractClassId::from_field(definition.escrow_contract_id), // constrained here\n                contract_instance.salt,\n                contract_instance.initialization_hash,\n                contract_instance.deployer\n            )\n        );\n        assert(\n            exected_escrow_address == escrow_contract, \"Escrow contract class ID does not match expected class ID\"\n        );\n        // check that the contract has been deployed\n        // annoying that we can't use this in the deploy tx\n        context.historical_header.prove_contract_initialization(escrow_contract);\n\n        // check that the contract has not already been registered\n        let registration_status = storage.escrow_registry.at(escrow_contract).read_private();\n        assert(!registration_status, \"Escrow contract has already been registered\");\n\n        let escrow_params = ZImburseEscrow::at(escrow_contract).get_registration_params().view(&mut context);\n        assert(\n            escrow_params[0] == context.this_address(), \"Escrow contract registry does not match this contract\"\n        );\n        assert(escrow_params[1] == definition.usdc, \"Escrow contract USDC does not match registry USDC\");\n        assert(\n            escrow_params[2] == context.msg_sender(), \"Escrow contract admin does not match sender of message\"\n        );\n\n        // privately add the escrow contract to the list of managed escrows\n        let admin_keys = get_public_keys(context.msg_sender());\n        let mut escrow_note = AddressNote::new(escrow_contract, admin_keys.npk_m.hash());\n\n        // use unconstrained - why would you lie here\n        storage.managed_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note_unconstrained(\n                &mut context,\n                admin_keys.ovpk_m,\n                admin_keys.ivpk_m,\n                context.msg_sender()\n            )\n        );\n\n        // publicly add the escrow contract to the list of participant escrows\n        ZImburseRegistry::at(context.this_address()).set_contract_registered(escrow_contract).enqueue(&mut context);\n    }\n\n    /**\n     * Publicly set the contract registration status\n     *\n     * @param escrow_contract - the address of the escrow contract that has privately been constrained to be valid\n     */\n    #[public]\n    #[internal]\n    fn set_contract_registered(escrow_contract: AztecAddress) {\n        storage.escrow_registry.at(escrow_contract).initialize(true);\n    }\n\n    #[private]\n    fn check_and_register_participant(participant: AztecAddress, participant_name: str<60>, escrow: AztecAddress) -> bool {\n        // todo: switch to check that the sender is an escrow\n        // check that sender is admin\n        let admin = storage.definition.read_private().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        let is_registered = storage.escrow_registry.at(escrow).read_private();\n        assert(is_registered, \"Escrow contract is not registered\");\n        // check if the participant has already been registered\n        let options = NoteGetterOptions::new().select(AddressNote::properties().address, Comparator.EQ, participant).set_limit(1);\n        let participant_exists = storage.participants.at(escrow).get_notes(options).len() == 0;\n        // if the participant has not been registered, enqueue a private call to register the participant\n        // do this instead of if statement here to make adding first time expensive but cheap if already registered\n        let mut added = false;\n        if participant_exists {\n            added = true;\n            ZImburseRegistry::at(context.this_address()).register_participant(participant, participant_name, admin, escrow).call(&mut context);\n        }\n        added\n    }\n\n    #[private]\n    #[internal]\n    fn register_participant(participant: AztecAddress, participant_name: str<60>, admin: AztecAddress, escrow: AztecAddress) {\n        let admin_keys = get_public_keys(admin);\n        let participant_keys = get_public_keys(participant);\n        // add escrow to the participant's set of escrows\n        let mut escrow_note = AddressNote::new(escrow, participant_keys.npk_m.hash());\n        storage.participant_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note(\n                &mut context,\n                admin_keys.ovpk_m,\n                participant_keys.ivpk_m,\n                participant\n            )\n        );\n        // add the participant to the admin set of participants\n        let mut participant_note = ParticipantNote::new(participant, participant_name, admin_keys.npk_m.hash());\n        storage.participants.at(escrow).insert(&mut participant_note).emit(\n            encode_and_encrypt_note_unconstrained(&mut context, admin_keys.ovpk_m, admin_keys.ivpk_m, admin)\n        );\n    }\n\n    // todo: add ability to remove participant\n    // todo: add ability to remove participant escrows by looking up nullifications\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the public context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[public]\n    #[view]\n    fn check_dkim_key_hash_public(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_public()\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the private context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[private]\n    #[view]\n    fn check_dkim_key_hash_private(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_private()\n    }\n\n    /** Get the class ID that all escrow contracts must match */\n    #[public]\n    #[view]\n    fn get_escrow_class_id() -> Field {\n        storage.definition.read_public().escrow_contract_id\n    }\n\n    /** Get the registration status of an escrow contract */\n    #[public]\n    #[view]\n    fn get_escrow_registry_status(escrow_contract: AztecAddress) -> bool {\n        storage.escrow_registry.at(escrow_contract).read_public()\n    }\n\n    /**\n     * Get a page of the list of escrows administrated by a given address (private)\n     *\n     * @param admin - the address of the admin\n     * @param page_index - the index of the page to retrieve\n     * @return managed_escrows - the list of managed escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained pub fn get_managed_escrows(offset: u32) -> pub (BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.managed_escrows.view_notes(options);\n        let mut managed_escrows = BoundedVec::new();\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                managed_escrows.push(notes.get_unchecked(i).address);\n            }\n        }\n        (managed_escrows, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n\n    /**\n     * Get a page of the list of escrows participated in by a given address (private)\n     *\n     * @param admin - the address of the participant\n     * @param page_index - the index of the page to retrieve\n     * @return participant_escrows - the list of enrolled escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained pub fn get_participant_escrows(\n        participant: AztecAddress,\n        offset: u32\n    ) -> pub (BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.participant_escrows.view_notes(options);\n        let mut participant_escrows: BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE> = BoundedVec::new();\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                participant_escrows.push(notes.get_unchecked(i).address);\n            }\n        }\n        (participant_escrows, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n\n    /**\n     * Get a page of the list of of participants in an escrow (private)\n     *\n     * @param admin - the address of the escrow\n     * @param page_index - the index of the page to retrieve\n     * @return participants - the list of participating addresses\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_participants(\n        escrow: AztecAddress,\n        offset: u32\n    ) -> pub (BoundedVec<ParticipantNote, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.participants.at(escrow).view_notes(options);\n        (notes, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n}\n\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"68":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c: [u8; 17]= b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"71":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/address_note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext, macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for AddressNote {\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe {\n            random()\n        };\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"77":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"},"78":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\nunconstrained pub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"80":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"83":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"84":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr","source":"use std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, NoteStatus};\nuse dep::protocol_types::traits::ToField;\nuse crate::note::note_interface::NoteInterface;\nuse crate::note::constants::MAX_NOTES_PER_PAGE;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> where Note: NoteInterface<N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T\n    ) -> Self where T: ToField {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set. This isn't required in unconstrained code, but we still keep this\n        // requirement here for API consistency.\n        assert_constant(limit);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"},"87":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe {\n            unpack_returns(self.packed_returns)\n        };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"91":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"92":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"93":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"94":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"98":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"99":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_ovsk_app, public_keys::{PublicKeys, OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_log\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] = compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress\n) {\n    let ovsk_app: Field  = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"}}}